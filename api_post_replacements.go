/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// PostReplacementsAPIService PostReplacementsAPI service
type PostReplacementsAPIService service

type ApiApprovePostReplacementRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	id float32
}

func (r ApiApprovePostReplacementRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApprovePostReplacementExecute(r)
}

/*
ApprovePostReplacement Approve Post Replacement

You must have the "Approve Posts" permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the post replacement.
 @return ApiApprovePostReplacementRequest
*/
func (a *PostReplacementsAPIService) ApprovePostReplacement(ctx context.Context, id float32) ApiApprovePostReplacementRequest {
	return ApiApprovePostReplacementRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PostReplacementsAPIService) ApprovePostReplacementExecute(r ApiApprovePostReplacementRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.ApprovePostReplacement")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements/{id}/approve.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreatePostReplacementRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	postReplacementReason *string
	postReplacementReplacementFile *os.File
	postReplacementReplacementUrl *string
	postReplacementSource *string
	postReplacementAsPending *bool
}

func (r ApiCreatePostReplacementRequest) PostReplacementReason(postReplacementReason string) ApiCreatePostReplacementRequest {
	r.postReplacementReason = &postReplacementReason
	return r
}

// Mutually exclusive with replacement_url.
func (r ApiCreatePostReplacementRequest) PostReplacementReplacementFile(postReplacementReplacementFile *os.File) ApiCreatePostReplacementRequest {
	r.postReplacementReplacementFile = postReplacementReplacementFile
	return r
}

// Mutually exclusive with replacement_file.
func (r ApiCreatePostReplacementRequest) PostReplacementReplacementUrl(postReplacementReplacementUrl string) ApiCreatePostReplacementRequest {
	r.postReplacementReplacementUrl = &postReplacementReplacementUrl
	return r
}

func (r ApiCreatePostReplacementRequest) PostReplacementSource(postReplacementSource string) ApiCreatePostReplacementRequest {
	r.postReplacementSource = &postReplacementSource
	return r
}

// You must be Janitor+.
func (r ApiCreatePostReplacementRequest) PostReplacementAsPending(postReplacementAsPending bool) ApiCreatePostReplacementRequest {
	r.postReplacementAsPending = &postReplacementAsPending
	return r
}

func (r ApiCreatePostReplacementRequest) Execute() (*CreatePostReplacement200Response, *http.Response, error) {
	return r.ApiService.CreatePostReplacementExecute(r)
}

/*
CreatePostReplacement Create Post Replacement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePostReplacementRequest
*/
func (a *PostReplacementsAPIService) CreatePostReplacement(ctx context.Context) ApiCreatePostReplacementRequest {
	return ApiCreatePostReplacementRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreatePostReplacement200Response
func (a *PostReplacementsAPIService) CreatePostReplacementExecute(r ApiCreatePostReplacementRequest) (*CreatePostReplacement200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreatePostReplacement200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.CreatePostReplacement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postReplacementReason == nil {
		return localVarReturnValue, nil, reportError("postReplacementReason is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var postReplacementReplacementFileLocalVarFormFileName string
	var postReplacementReplacementFileLocalVarFileName     string
	var postReplacementReplacementFileLocalVarFileBytes    []byte

	postReplacementReplacementFileLocalVarFormFileName = "post_replacement[replacement_file]"
	postReplacementReplacementFileLocalVarFile := r.postReplacementReplacementFile

	if postReplacementReplacementFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(postReplacementReplacementFileLocalVarFile)

		postReplacementReplacementFileLocalVarFileBytes = fbs
		postReplacementReplacementFileLocalVarFileName = postReplacementReplacementFileLocalVarFile.Name()
		postReplacementReplacementFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: postReplacementReplacementFileLocalVarFileBytes, fileName: postReplacementReplacementFileLocalVarFileName, formFileName: postReplacementReplacementFileLocalVarFormFileName})
	}
	if r.postReplacementReplacementUrl != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_replacement[replacement_url]", r.postReplacementReplacementUrl, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_replacement[reason]", r.postReplacementReason, "")
	if r.postReplacementSource != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_replacement[source]", r.postReplacementSource, "")
	}
	if r.postReplacementAsPending != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_replacement[as_pending]", r.postReplacementAsPending, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 412 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePostReplacementRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	id float32
}

func (r ApiDeletePostReplacementRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePostReplacementExecute(r)
}

/*
DeletePostReplacement Delete Post Replacement

You must be Admin+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the post replacement.
 @return ApiDeletePostReplacementRequest
*/
func (a *PostReplacementsAPIService) DeletePostReplacement(ctx context.Context, id float32) ApiDeletePostReplacementRequest {
	return ApiDeletePostReplacementRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PostReplacementsAPIService) DeletePostReplacementExecute(r ApiDeletePostReplacementRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.DeletePostReplacement")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPromotePostReplacementRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	id float32
}

func (r ApiPromotePostReplacementRequest) Execute() (*AddFavorite201Response, *http.Response, error) {
	return r.ApiService.PromotePostReplacementExecute(r)
}

/*
PromotePostReplacement Promote Post Replacement

You must have the "Approve Posts" permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the post replacement.
 @return ApiPromotePostReplacementRequest
*/
func (a *PostReplacementsAPIService) PromotePostReplacement(ctx context.Context, id float32) ApiPromotePostReplacementRequest {
	return ApiPromotePostReplacementRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AddFavorite201Response
func (a *PostReplacementsAPIService) PromotePostReplacementExecute(r ApiPromotePostReplacementRequest) (*AddFavorite201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddFavorite201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.PromotePostReplacement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements/{id}/promote.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRejectPostReplacementRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	id float32
	rejectPostReplacementRequest *RejectPostReplacementRequest
}

func (r ApiRejectPostReplacementRequest) RejectPostReplacementRequest(rejectPostReplacementRequest RejectPostReplacementRequest) ApiRejectPostReplacementRequest {
	r.rejectPostReplacementRequest = &rejectPostReplacementRequest
	return r
}

func (r ApiRejectPostReplacementRequest) Execute() (*http.Response, error) {
	return r.ApiService.RejectPostReplacementExecute(r)
}

/*
RejectPostReplacement Reject Post Replacement

You must have the "Approve Posts" permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the post replacement.
 @return ApiRejectPostReplacementRequest
*/
func (a *PostReplacementsAPIService) RejectPostReplacement(ctx context.Context, id float32) ApiRejectPostReplacementRequest {
	return ApiRejectPostReplacementRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PostReplacementsAPIService) RejectPostReplacementExecute(r ApiRejectPostReplacementRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.RejectPostReplacement")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements/{id}/reject.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rejectPostReplacementRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchPostReplacementsRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	limit *float32
	page *float32
	searchId *float32
	searchFileExt *string
	searchMd5 *string
	searchStatus *string
	searchCreatorId *float32
	searchCreatorName *string
	searchApproverId *float32
	searchApproverName *string
	searchRejectorId *float32
	searchRejectorName *string
	searchUploaderNameOnApprove *string
	searchUploaderIdOnApprove *float32
}

// The maximum number of results to return. Between 0 and 320.
func (r ApiSearchPostReplacementsRequest) Limit(limit float32) ApiSearchPostReplacementsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ApiSearchPostReplacementsRequest) Page(page float32) ApiSearchPostReplacementsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ApiSearchPostReplacementsRequest) SearchId(searchId float32) ApiSearchPostReplacementsRequest {
	r.searchId = &searchId
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchFileExt(searchFileExt string) ApiSearchPostReplacementsRequest {
	r.searchFileExt = &searchFileExt
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchMd5(searchMd5 string) ApiSearchPostReplacementsRequest {
	r.searchMd5 = &searchMd5
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchStatus(searchStatus string) ApiSearchPostReplacementsRequest {
	r.searchStatus = &searchStatus
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchCreatorId(searchCreatorId float32) ApiSearchPostReplacementsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchCreatorName(searchCreatorName string) ApiSearchPostReplacementsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchApproverId(searchApproverId float32) ApiSearchPostReplacementsRequest {
	r.searchApproverId = &searchApproverId
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchApproverName(searchApproverName string) ApiSearchPostReplacementsRequest {
	r.searchApproverName = &searchApproverName
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchRejectorId(searchRejectorId float32) ApiSearchPostReplacementsRequest {
	r.searchRejectorId = &searchRejectorId
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchRejectorName(searchRejectorName string) ApiSearchPostReplacementsRequest {
	r.searchRejectorName = &searchRejectorName
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchUploaderNameOnApprove(searchUploaderNameOnApprove string) ApiSearchPostReplacementsRequest {
	r.searchUploaderNameOnApprove = &searchUploaderNameOnApprove
	return r
}

func (r ApiSearchPostReplacementsRequest) SearchUploaderIdOnApprove(searchUploaderIdOnApprove float32) ApiSearchPostReplacementsRequest {
	r.searchUploaderIdOnApprove = &searchUploaderIdOnApprove
	return r
}

func (r ApiSearchPostReplacementsRequest) Execute() (*SearchPostReplacements200Response, *http.Response, error) {
	return r.ApiService.SearchPostReplacementsExecute(r)
}

/*
SearchPostReplacements Search Post Replacements

When no results are found, an object with an `post_replacements` key is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPostReplacementsRequest
*/
func (a *PostReplacementsAPIService) SearchPostReplacements(ctx context.Context) ApiSearchPostReplacementsRequest {
	return ApiSearchPostReplacementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchPostReplacements200Response
func (a *PostReplacementsAPIService) SearchPostReplacementsExecute(r ApiSearchPostReplacementsRequest) (*SearchPostReplacements200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchPostReplacements200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.SearchPostReplacements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchFileExt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[file_ext]", r.searchFileExt, "")
	}
	if r.searchMd5 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[md5]", r.searchMd5, "")
	}
	if r.searchStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[status]", r.searchStatus, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchApproverId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[approver_id]", r.searchApproverId, "")
	}
	if r.searchApproverName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[approver_name]", r.searchApproverName, "")
	}
	if r.searchRejectorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[rejector_id]", r.searchRejectorId, "")
	}
	if r.searchRejectorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[rejector_name]", r.searchRejectorName, "")
	}
	if r.searchUploaderNameOnApprove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[uploader_name_on_approve]", r.searchUploaderNameOnApprove, "")
	}
	if r.searchUploaderIdOnApprove != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[uploader_id_on_approve]", r.searchUploaderIdOnApprove, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTogglePostReplacementPenaltyRequest struct {
	ctx context.Context
	ApiService *PostReplacementsAPIService
	id float32
}

func (r ApiTogglePostReplacementPenaltyRequest) Execute() (*http.Response, error) {
	return r.ApiService.TogglePostReplacementPenaltyExecute(r)
}

/*
TogglePostReplacementPenalty Toggle Post Replacement Penalty

You must have the "Approve Posts" permission.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the post replacement.
 @return ApiTogglePostReplacementPenaltyRequest
*/
func (a *PostReplacementsAPIService) TogglePostReplacementPenalty(ctx context.Context, id float32) ApiTogglePostReplacementPenaltyRequest {
	return ApiTogglePostReplacementPenaltyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PostReplacementsAPIService) TogglePostReplacementPenaltyExecute(r ApiTogglePostReplacementPenaltyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostReplacementsAPIService.TogglePostReplacementPenalty")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_replacements/{id}/toggle_penalize.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
