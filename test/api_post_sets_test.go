/*
E621

Testing PostSetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package e621

import (
	"context"
	openapiclient "github.com/anthrove/openapi-e621-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_e621_PostSetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PostSetsAPIService AddPostsToPostSet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.PostSetsAPI.AddPostsToPostSet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService CreatePostSet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PostSetsAPI.CreatePostSet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService DeletePostSet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		httpRes, err := apiClient.PostSetsAPI.DeletePostSet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService EditPostSet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		httpRes, err := apiClient.PostSetsAPI.EditPostSet(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService GetPostSet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.PostSetsAPI.GetPostSet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService ListPostSetsForSelect", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PostSetsAPI.ListPostSetsForSelect(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService RemovePostsFromPostSet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.PostSetsAPI.RemovePostsFromPostSet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService SearchPostSets", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PostSetsAPI.SearchPostSets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PostSetsAPIService UpdatePostSetPosts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id float32

		resp, httpRes, err := apiClient.PostSetsAPI.UpdatePostSetPosts(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
