/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ArtistURLsAPIService ArtistURLsAPI service
type ArtistURLsAPIService service

type ArtistURLsAPISearchArtistUrlsRequest struct {
	ctx                        context.Context
	ApiService                 *ArtistURLsAPIService
	limit                      *int32
	page                       *int32
	searchId                   *int32
	searchOrder                *string
	searchArtistName           *string
	searchArtistId             *string
	searchIsActive             *bool
	searchUrl                  *string
	searchNormalizedUrl        *string
	searchArtist               *map[string]interface{}
	searchUrlMatches           *string
	searchNormalizedUrlMatches *string
}

// The maximum number of results to return. Between 0 and 320.
func (r ArtistURLsAPISearchArtistUrlsRequest) Limit(limit int32) ArtistURLsAPISearchArtistUrlsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ArtistURLsAPISearchArtistUrlsRequest) Page(page int32) ArtistURLsAPISearchArtistUrlsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchId(searchId int32) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchId = &searchId
	return r
}

// The order of the results.
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchOrder(searchOrder string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchOrder = &searchOrder
	return r
}

// The name of the artist.
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchArtistName(searchArtistName string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchArtistName = &searchArtistName
	return r
}

// The id of the artist.
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchArtistId(searchArtistId string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchArtistId = &searchArtistId
	return r
}

// If the artist url is active.
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchIsActive(searchIsActive bool) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchIsActive = &searchIsActive
	return r
}

// The url.
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchUrl(searchUrl string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchUrl = &searchUrl
	return r
}

// The normalized url. (http:, trailing &#x60;/&#x60;)
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchNormalizedUrl(searchNormalizedUrl string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchNormalizedUrl = &searchNormalizedUrl
	return r
}

// Legacy nested search for artist. Supports the same parameters as /artists.json.
// Deprecated
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchArtist(searchArtist map[string]interface{}) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchArtist = &searchArtist
	return r
}

// Legacy name for &#x60;search[url]&#x60;.
// Deprecated
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchUrlMatches(searchUrlMatches string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchUrlMatches = &searchUrlMatches
	return r
}

// Legacy name for &#x60;search[normalized_url]&#x60;.
// Deprecated
func (r ArtistURLsAPISearchArtistUrlsRequest) SearchNormalizedUrlMatches(searchNormalizedUrlMatches string) ArtistURLsAPISearchArtistUrlsRequest {
	r.searchNormalizedUrlMatches = &searchNormalizedUrlMatches
	return r
}

func (r ArtistURLsAPISearchArtistUrlsRequest) Execute() ([]SearchArtistUrls200ResponseInner, *http.Response, error) {
	return r.ApiService.SearchArtistUrlsExecute(r)
}

/*
SearchArtistUrls Search Artist URLs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ArtistURLsAPISearchArtistUrlsRequest
*/
func (a *ArtistURLsAPIService) SearchArtistUrls(ctx context.Context) ArtistURLsAPISearchArtistUrlsRequest {
	return ArtistURLsAPISearchArtistUrlsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []SearchArtistUrls200ResponseInner
func (a *ArtistURLsAPIService) SearchArtistUrlsExecute(r ArtistURLsAPISearchArtistUrlsRequest) ([]SearchArtistUrls200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SearchArtistUrls200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ArtistURLsAPIService.SearchArtistUrls")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/artist_urls.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchArtistName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[artist_name]", r.searchArtistName, "")
	}
	if r.searchArtistId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[artist_id]", r.searchArtistId, "")
	}
	if r.searchIsActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_active]", r.searchIsActive, "")
	}
	if r.searchUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[url]", r.searchUrl, "")
	}
	if r.searchNormalizedUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[normalized_url]", r.searchNormalizedUrl, "")
	}
	if r.searchArtist != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[artist]", r.searchArtist, "")
	}
	if r.searchUrlMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[url_matches]", r.searchUrlMatches, "")
	}
	if r.searchNormalizedUrlMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[normalized_url_matches]", r.searchNormalizedUrlMatches, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
