/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckIfUrlIsAllowed200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckIfUrlIsAllowed200Response{}

// CheckIfUrlIsAllowed200Response struct for CheckIfUrlIsAllowed200Response
type CheckIfUrlIsAllowed200Response struct {
	Url string `json:"url"`
	Domain string `json:"domain"`
	IsAllowed bool `json:"is_allowed"`
	Reason string `json:"reason"`
}

type _CheckIfUrlIsAllowed200Response CheckIfUrlIsAllowed200Response

// NewCheckIfUrlIsAllowed200Response instantiates a new CheckIfUrlIsAllowed200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckIfUrlIsAllowed200Response(url string, domain string, isAllowed bool, reason string) *CheckIfUrlIsAllowed200Response {
	this := CheckIfUrlIsAllowed200Response{}
	this.Url = url
	this.Domain = domain
	this.IsAllowed = isAllowed
	this.Reason = reason
	return &this
}

// NewCheckIfUrlIsAllowed200ResponseWithDefaults instantiates a new CheckIfUrlIsAllowed200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckIfUrlIsAllowed200ResponseWithDefaults() *CheckIfUrlIsAllowed200Response {
	this := CheckIfUrlIsAllowed200Response{}
	return &this
}

// GetUrl returns the Url field value
func (o *CheckIfUrlIsAllowed200Response) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *CheckIfUrlIsAllowed200Response) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *CheckIfUrlIsAllowed200Response) SetUrl(v string) {
	o.Url = v
}

// GetDomain returns the Domain field value
func (o *CheckIfUrlIsAllowed200Response) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CheckIfUrlIsAllowed200Response) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CheckIfUrlIsAllowed200Response) SetDomain(v string) {
	o.Domain = v
}

// GetIsAllowed returns the IsAllowed field value
func (o *CheckIfUrlIsAllowed200Response) GetIsAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAllowed
}

// GetIsAllowedOk returns a tuple with the IsAllowed field value
// and a boolean to check if the value has been set.
func (o *CheckIfUrlIsAllowed200Response) GetIsAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAllowed, true
}

// SetIsAllowed sets field value
func (o *CheckIfUrlIsAllowed200Response) SetIsAllowed(v bool) {
	o.IsAllowed = v
}

// GetReason returns the Reason field value
func (o *CheckIfUrlIsAllowed200Response) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *CheckIfUrlIsAllowed200Response) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *CheckIfUrlIsAllowed200Response) SetReason(v string) {
	o.Reason = v
}

func (o CheckIfUrlIsAllowed200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckIfUrlIsAllowed200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["domain"] = o.Domain
	toSerialize["is_allowed"] = o.IsAllowed
	toSerialize["reason"] = o.Reason
	return toSerialize, nil
}

func (o *CheckIfUrlIsAllowed200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"domain",
		"is_allowed",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckIfUrlIsAllowed200Response := _CheckIfUrlIsAllowed200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckIfUrlIsAllowed200Response)

	if err != nil {
		return err
	}

	*o = CheckIfUrlIsAllowed200Response(varCheckIfUrlIsAllowed200Response)

	return err
}

type NullableCheckIfUrlIsAllowed200Response struct {
	value *CheckIfUrlIsAllowed200Response
	isSet bool
}

func (v NullableCheckIfUrlIsAllowed200Response) Get() *CheckIfUrlIsAllowed200Response {
	return v.value
}

func (v *NullableCheckIfUrlIsAllowed200Response) Set(val *CheckIfUrlIsAllowed200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckIfUrlIsAllowed200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckIfUrlIsAllowed200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckIfUrlIsAllowed200Response(val *CheckIfUrlIsAllowed200Response) *NullableCheckIfUrlIsAllowed200Response {
	return &NullableCheckIfUrlIsAllowed200Response{value: val, isSet: true}
}

func (v NullableCheckIfUrlIsAllowed200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckIfUrlIsAllowed200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


