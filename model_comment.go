/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Comment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Comment{}

// Comment struct for Comment
type Comment struct {
	Id        int32     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	PostId    int32     `json:"post_id"`
	CreatorId int32     `json:"creator_id"`
	Body      string    `json:"body"`
	Score     float32   `json:"score"`
	UpdatedAt time.Time `json:"updated_at"`
	UpdaterId int32     `json:"updater_id"`
	// Deprecated
	DoNotBumpPost bool            `json:"do_not_bump_post"`
	IsHidden      bool            `json:"is_hidden"`
	IsSticky      bool            `json:"is_sticky"`
	WarningType   WarningTypes    `json:"warning_type"`
	WarningUserId NullableFloat32 `json:"warning_user_id"`
	CreatorName   string          `json:"creator_name"`
	UpdaterName   string          `json:"updater_name"`
}

type _Comment Comment

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment(id int32, createdAt time.Time, postId int32, creatorId int32, body string, score float32, updatedAt time.Time, updaterId int32, doNotBumpPost bool, isHidden bool, isSticky bool, warningType WarningTypes, warningUserId NullableFloat32, creatorName string, updaterName string) *Comment {
	this := Comment{}
	this.Id = id
	this.CreatedAt = createdAt
	this.PostId = postId
	this.CreatorId = creatorId
	this.Body = body
	this.Score = score
	this.UpdatedAt = updatedAt
	this.UpdaterId = updaterId
	this.DoNotBumpPost = doNotBumpPost
	this.IsHidden = isHidden
	this.IsSticky = isSticky
	this.WarningType = warningType
	this.WarningUserId = warningUserId
	this.CreatorName = creatorName
	this.UpdaterName = updaterName
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetId returns the Id field value
func (o *Comment) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Comment) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Comment) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Comment) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetPostId returns the PostId field value
func (o *Comment) GetPostId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PostId
}

// GetPostIdOk returns a tuple with the PostId field value
// and a boolean to check if the value has been set.
func (o *Comment) GetPostIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostId, true
}

// SetPostId sets field value
func (o *Comment) SetPostId(v int32) {
	o.PostId = v
}

// GetCreatorId returns the CreatorId field value
func (o *Comment) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *Comment) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetBody returns the Body field value
func (o *Comment) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *Comment) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *Comment) SetBody(v string) {
	o.Body = v
}

// GetScore returns the Score field value
func (o *Comment) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *Comment) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *Comment) SetScore(v float32) {
	o.Score = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Comment) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Comment) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Comment) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetUpdaterId returns the UpdaterId field value
func (o *Comment) GetUpdaterId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdaterId
}

// GetUpdaterIdOk returns a tuple with the UpdaterId field value
// and a boolean to check if the value has been set.
func (o *Comment) GetUpdaterIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdaterId, true
}

// SetUpdaterId sets field value
func (o *Comment) SetUpdaterId(v int32) {
	o.UpdaterId = v
}

// GetDoNotBumpPost returns the DoNotBumpPost field value
// Deprecated
func (o *Comment) GetDoNotBumpPost() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DoNotBumpPost
}

// GetDoNotBumpPostOk returns a tuple with the DoNotBumpPost field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *Comment) GetDoNotBumpPostOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoNotBumpPost, true
}

// SetDoNotBumpPost sets field value
// Deprecated
func (o *Comment) SetDoNotBumpPost(v bool) {
	o.DoNotBumpPost = v
}

// GetIsHidden returns the IsHidden field value
func (o *Comment) GetIsHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value
// and a boolean to check if the value has been set.
func (o *Comment) GetIsHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsHidden, true
}

// SetIsHidden sets field value
func (o *Comment) SetIsHidden(v bool) {
	o.IsHidden = v
}

// GetIsSticky returns the IsSticky field value
func (o *Comment) GetIsSticky() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSticky
}

// GetIsStickyOk returns a tuple with the IsSticky field value
// and a boolean to check if the value has been set.
func (o *Comment) GetIsStickyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSticky, true
}

// SetIsSticky sets field value
func (o *Comment) SetIsSticky(v bool) {
	o.IsSticky = v
}

// GetWarningType returns the WarningType field value
func (o *Comment) GetWarningType() WarningTypes {
	if o == nil {
		var ret WarningTypes
		return ret
	}

	return o.WarningType
}

// GetWarningTypeOk returns a tuple with the WarningType field value
// and a boolean to check if the value has been set.
func (o *Comment) GetWarningTypeOk() (*WarningTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarningType, true
}

// SetWarningType sets field value
func (o *Comment) SetWarningType(v WarningTypes) {
	o.WarningType = v
}

// GetWarningUserId returns the WarningUserId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *Comment) GetWarningUserId() float32 {
	if o == nil || o.WarningUserId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.WarningUserId.Get()
}

// GetWarningUserIdOk returns a tuple with the WarningUserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Comment) GetWarningUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WarningUserId.Get(), o.WarningUserId.IsSet()
}

// SetWarningUserId sets field value
func (o *Comment) SetWarningUserId(v float32) {
	o.WarningUserId.Set(&v)
}

// GetCreatorName returns the CreatorName field value
func (o *Comment) GetCreatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *Comment) SetCreatorName(v string) {
	o.CreatorName = v
}

// GetUpdaterName returns the UpdaterName field value
func (o *Comment) GetUpdaterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdaterName
}

// GetUpdaterNameOk returns a tuple with the UpdaterName field value
// and a boolean to check if the value has been set.
func (o *Comment) GetUpdaterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdaterName, true
}

// SetUpdaterName sets field value
func (o *Comment) SetUpdaterName(v string) {
	o.UpdaterName = v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Comment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["post_id"] = o.PostId
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["body"] = o.Body
	toSerialize["score"] = o.Score
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["updater_id"] = o.UpdaterId
	toSerialize["do_not_bump_post"] = o.DoNotBumpPost
	toSerialize["is_hidden"] = o.IsHidden
	toSerialize["is_sticky"] = o.IsSticky
	toSerialize["warning_type"] = o.WarningType
	toSerialize["warning_user_id"] = o.WarningUserId.Get()
	toSerialize["creator_name"] = o.CreatorName
	toSerialize["updater_name"] = o.UpdaterName
	return toSerialize, nil
}

func (o *Comment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"post_id",
		"creator_id",
		"body",
		"score",
		"updated_at",
		"updater_id",
		"do_not_bump_post",
		"is_hidden",
		"is_sticky",
		"warning_type",
		"warning_user_id",
		"creator_name",
		"updater_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComment := _Comment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComment)

	if err != nil {
		return err
	}

	*o = Comment(varComment)

	return err
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
