/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CommentsAPIService CommentsAPI service
type CommentsAPIService service

type CommentsAPICreateCommentRequest struct {
	ctx                  context.Context
	ApiService           *CommentsAPIService
	commentBody          *string
	commentPostId        *int32
	commentDoNotBumpPost *bool
	commentIsSticky      *bool
	commentIsHidden      *bool
}

func (r CommentsAPICreateCommentRequest) CommentBody(commentBody string) CommentsAPICreateCommentRequest {
	r.commentBody = &commentBody
	return r
}

func (r CommentsAPICreateCommentRequest) CommentPostId(commentPostId int32) CommentsAPICreateCommentRequest {
	r.commentPostId = &commentPostId
	return r
}

func (r CommentsAPICreateCommentRequest) CommentDoNotBumpPost(commentDoNotBumpPost bool) CommentsAPICreateCommentRequest {
	r.commentDoNotBumpPost = &commentDoNotBumpPost
	return r
}

// Only usable for Janitor+
func (r CommentsAPICreateCommentRequest) CommentIsSticky(commentIsSticky bool) CommentsAPICreateCommentRequest {
	r.commentIsSticky = &commentIsSticky
	return r
}

// Only usable for Moderator+
func (r CommentsAPICreateCommentRequest) CommentIsHidden(commentIsHidden bool) CommentsAPICreateCommentRequest {
	r.commentIsHidden = &commentIsHidden
	return r
}

func (r CommentsAPICreateCommentRequest) Execute() (*Comment, *http.Response, error) {
	return r.ApiService.CreateCommentExecute(r)
}

/*
CreateComment Create Comment

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CommentsAPICreateCommentRequest
*/
func (a *CommentsAPIService) CreateComment(ctx context.Context) CommentsAPICreateCommentRequest {
	return CommentsAPICreateCommentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Comment
func (a *CommentsAPIService) CreateCommentExecute(r CommentsAPICreateCommentRequest) (*Comment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Comment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.CreateComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.commentBody == nil {
		return localVarReturnValue, nil, reportError("commentBody is required and must be specified")
	}
	if r.commentPostId == nil {
		return localVarReturnValue, nil, reportError("commentPostId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "comment[body]", r.commentBody, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "comment[post_id]", r.commentPostId, "")
	if r.commentDoNotBumpPost != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "comment[do_not_bump_post]", r.commentDoNotBumpPost, "")
	}
	if r.commentIsSticky != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "comment[is_sticky]", r.commentIsSticky, "")
	}
	if r.commentIsHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "comment[is_hidden]", r.commentIsHidden, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommentsAPIDeleteCommentRequest struct {
	ctx        context.Context
	ApiService *CommentsAPIService
	id         int32
}

func (r CommentsAPIDeleteCommentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCommentExecute(r)
}

/*
DeleteComment Delete Comment

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the comment.
	@return CommentsAPIDeleteCommentRequest
*/
func (a *CommentsAPIService) DeleteComment(ctx context.Context, id int32) CommentsAPIDeleteCommentRequest {
	return CommentsAPIDeleteCommentRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CommentsAPIService) DeleteCommentExecute(r CommentsAPIDeleteCommentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.DeleteComment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CommentsAPIEditCommentRequest struct {
	ctx             context.Context
	ApiService      *CommentsAPIService
	id              int32
	commentBody     *string
	commentIsSticky *bool
	commentIsHidden *bool
}

func (r CommentsAPIEditCommentRequest) CommentBody(commentBody string) CommentsAPIEditCommentRequest {
	r.commentBody = &commentBody
	return r
}

// Only usable for Janitor+
func (r CommentsAPIEditCommentRequest) CommentIsSticky(commentIsSticky bool) CommentsAPIEditCommentRequest {
	r.commentIsSticky = &commentIsSticky
	return r
}

// Only usable for Moderator+
func (r CommentsAPIEditCommentRequest) CommentIsHidden(commentIsHidden bool) CommentsAPIEditCommentRequest {
	r.commentIsHidden = &commentIsHidden
	return r
}

func (r CommentsAPIEditCommentRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditCommentExecute(r)
}

/*
EditComment Edit Comment

You must be the creator of the comment, or Admin+ to edit. Marked comments cannot be edited.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the comment.
	@return CommentsAPIEditCommentRequest
*/
func (a *CommentsAPIService) EditComment(ctx context.Context, id int32) CommentsAPIEditCommentRequest {
	return CommentsAPIEditCommentRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CommentsAPIService) EditCommentExecute(r CommentsAPIEditCommentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.EditComment")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.commentBody != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "comment[body]", r.commentBody, "")
	}
	if r.commentIsSticky != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "comment[is_sticky]", r.commentIsSticky, "")
	}
	if r.commentIsHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "comment[is_hidden]", r.commentIsHidden, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CommentsAPIGetCommentRequest struct {
	ctx        context.Context
	ApiService *CommentsAPIService
	id         int32
}

func (r CommentsAPIGetCommentRequest) Execute() (*Comment, *http.Response, error) {
	return r.ApiService.GetCommentExecute(r)
}

/*
GetComment Get Comment

If the comment is hidden, you must be the creator or Moderator+ to see it.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the comment.
	@return CommentsAPIGetCommentRequest
*/
func (a *CommentsAPIService) GetComment(ctx context.Context, id int32) CommentsAPIGetCommentRequest {
	return CommentsAPIGetCommentRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Comment
func (a *CommentsAPIService) GetCommentExecute(r CommentsAPIGetCommentRequest) (*Comment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Comment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.GetComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommentsAPIHideCommentRequest struct {
	ctx        context.Context
	ApiService *CommentsAPIService
	id         int32
}

func (r CommentsAPIHideCommentRequest) Execute() (*Comment, *http.Response, error) {
	return r.ApiService.HideCommentExecute(r)
}

/*
HideComment Hide Comment

You must be the creator or Moderator+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the comment.
	@return CommentsAPIHideCommentRequest
*/
func (a *CommentsAPIService) HideComment(ctx context.Context, id int32) CommentsAPIHideCommentRequest {
	return CommentsAPIHideCommentRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Comment
func (a *CommentsAPIService) HideCommentExecute(r CommentsAPIHideCommentRequest) (*Comment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Comment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.HideComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}/hide.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommentsAPIMarkCommentRequest struct {
	ctx             context.Context
	ApiService      *CommentsAPIService
	id              int32
	markBlipRequest *MarkBlipRequest
}

func (r CommentsAPIMarkCommentRequest) MarkBlipRequest(markBlipRequest MarkBlipRequest) CommentsAPIMarkCommentRequest {
	r.markBlipRequest = &markBlipRequest
	return r
}

func (r CommentsAPIMarkCommentRequest) Execute() (*DTextResponse, *http.Response, error) {
	return r.ApiService.MarkCommentExecute(r)
}

/*
MarkComment Mark Comment

You must be Moderator+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the comment.
	@return CommentsAPIMarkCommentRequest
*/
func (a *CommentsAPIService) MarkComment(ctx context.Context, id int32) CommentsAPIMarkCommentRequest {
	return CommentsAPIMarkCommentRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DTextResponse
func (a *CommentsAPIService) MarkCommentExecute(r CommentsAPIMarkCommentRequest) (*DTextResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DTextResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.MarkComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}/warning.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.markBlipRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommentsAPISearchCommentsRequest struct {
	ctx                       context.Context
	ApiService                *CommentsAPIService
	limit                     *int32
	page                      *int32
	searchId                  *int32
	searchIpAddr              *string
	searchOrder               *string
	groupBy                   *string
	searchBodyMatches         *string
	searchPostId              *string
	searchPostTagsMatch       *string
	searchPostNoteUpdaterName *string
	searchPostNoteUpdaterId   *int32
	searchCreatorName         *string
	searchCreatorId           *int32
	searchIsSticky            *bool
	searchIsHidden            *bool
	searchDoNotBumpPost       *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r CommentsAPISearchCommentsRequest) Limit(limit int32) CommentsAPISearchCommentsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r CommentsAPISearchCommentsRequest) Page(page int32) CommentsAPISearchCommentsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r CommentsAPISearchCommentsRequest) SearchId(searchId int32) CommentsAPISearchCommentsRequest {
	r.searchId = &searchId
	return r
}

// Must be Admin+ to use. See [postgres&#39; documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, \&quot;is contained within or equals\&quot; (&#x60;&lt;&lt;&#x3D;&#x60;).
func (r CommentsAPISearchCommentsRequest) SearchIpAddr(searchIpAddr string) CommentsAPISearchCommentsRequest {
	r.searchIpAddr = &searchIpAddr
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchOrder(searchOrder string) CommentsAPISearchCommentsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r CommentsAPISearchCommentsRequest) GroupBy(groupBy string) CommentsAPISearchCommentsRequest {
	r.groupBy = &groupBy
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchBodyMatches(searchBodyMatches string) CommentsAPISearchCommentsRequest {
	r.searchBodyMatches = &searchBodyMatches
	return r
}

// Accepts a comma separated list.
func (r CommentsAPISearchCommentsRequest) SearchPostId(searchPostId string) CommentsAPISearchCommentsRequest {
	r.searchPostId = &searchPostId
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchPostTagsMatch(searchPostTagsMatch string) CommentsAPISearchCommentsRequest {
	r.searchPostTagsMatch = &searchPostTagsMatch
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchPostNoteUpdaterName(searchPostNoteUpdaterName string) CommentsAPISearchCommentsRequest {
	r.searchPostNoteUpdaterName = &searchPostNoteUpdaterName
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchPostNoteUpdaterId(searchPostNoteUpdaterId int32) CommentsAPISearchCommentsRequest {
	r.searchPostNoteUpdaterId = &searchPostNoteUpdaterId
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchCreatorName(searchCreatorName string) CommentsAPISearchCommentsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchCreatorId(searchCreatorId int32) CommentsAPISearchCommentsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchIsSticky(searchIsSticky bool) CommentsAPISearchCommentsRequest {
	r.searchIsSticky = &searchIsSticky
	return r
}

// Only usable by Moderator+
func (r CommentsAPISearchCommentsRequest) SearchIsHidden(searchIsHidden bool) CommentsAPISearchCommentsRequest {
	r.searchIsHidden = &searchIsHidden
	return r
}

func (r CommentsAPISearchCommentsRequest) SearchDoNotBumpPost(searchDoNotBumpPost bool) CommentsAPISearchCommentsRequest {
	r.searchDoNotBumpPost = &searchDoNotBumpPost
	return r
}

func (r CommentsAPISearchCommentsRequest) Execute() (*SearchComments200Response, *http.Response, error) {
	return r.ApiService.SearchCommentsExecute(r)
}

/*
SearchComments Search Comments

For searching comments, group_by=comment must be set. When no results are found, an object with an `comments` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return CommentsAPISearchCommentsRequest
*/
func (a *CommentsAPIService) SearchComments(ctx context.Context) CommentsAPISearchCommentsRequest {
	return CommentsAPISearchCommentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchComments200Response
func (a *CommentsAPIService) SearchCommentsExecute(r CommentsAPISearchCommentsRequest) (*SearchComments200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchComments200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.SearchComments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchIpAddr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[ip_addr]", r.searchIpAddr, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_by", r.groupBy, "")
	}
	if r.searchBodyMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[body_matches]", r.searchBodyMatches, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchPostTagsMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_tags_match]", r.searchPostTagsMatch, "")
	}
	if r.searchPostNoteUpdaterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_note_updater_name]", r.searchPostNoteUpdaterName, "")
	}
	if r.searchPostNoteUpdaterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_note_updater_id]", r.searchPostNoteUpdaterId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchIsSticky != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_sticky]", r.searchIsSticky, "")
	}
	if r.searchIsHidden != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_hidden]", r.searchIsHidden, "")
	}
	if r.searchDoNotBumpPost != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[do_not_bump_post]", r.searchDoNotBumpPost, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CommentsAPIUnhideCommentRequest struct {
	ctx        context.Context
	ApiService *CommentsAPIService
	id         int32
}

func (r CommentsAPIUnhideCommentRequest) Execute() (*Comment, *http.Response, error) {
	return r.ApiService.UnhideCommentExecute(r)
}

/*
UnhideComment Unhide Comment

You must be Moderator+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the comment.
	@return CommentsAPIUnhideCommentRequest
*/
func (a *CommentsAPIService) UnhideComment(ctx context.Context, id int32) CommentsAPIUnhideCommentRequest {
	return CommentsAPIUnhideCommentRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Comment
func (a *CommentsAPIService) UnhideCommentExecute(r CommentsAPIUnhideCommentRequest) (*Comment, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Comment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommentsAPIService.UnhideComment")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/comments/{id}/unhide.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
