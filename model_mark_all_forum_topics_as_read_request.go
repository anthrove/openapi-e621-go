/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the MarkAllForumTopicsAsReadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkAllForumTopicsAsReadRequest{}

// MarkAllForumTopicsAsReadRequest struct for MarkAllForumTopicsAsReadRequest
type MarkAllForumTopicsAsReadRequest struct {
	CategoryId float32 `json:"category_id"`
}

type _MarkAllForumTopicsAsReadRequest MarkAllForumTopicsAsReadRequest

// NewMarkAllForumTopicsAsReadRequest instantiates a new MarkAllForumTopicsAsReadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkAllForumTopicsAsReadRequest(categoryId float32) *MarkAllForumTopicsAsReadRequest {
	this := MarkAllForumTopicsAsReadRequest{}
	this.CategoryId = categoryId
	return &this
}

// NewMarkAllForumTopicsAsReadRequestWithDefaults instantiates a new MarkAllForumTopicsAsReadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkAllForumTopicsAsReadRequestWithDefaults() *MarkAllForumTopicsAsReadRequest {
	this := MarkAllForumTopicsAsReadRequest{}
	return &this
}

// GetCategoryId returns the CategoryId field value
func (o *MarkAllForumTopicsAsReadRequest) GetCategoryId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *MarkAllForumTopicsAsReadRequest) GetCategoryIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *MarkAllForumTopicsAsReadRequest) SetCategoryId(v float32) {
	o.CategoryId = v
}

func (o MarkAllForumTopicsAsReadRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkAllForumTopicsAsReadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category_id"] = o.CategoryId
	return toSerialize, nil
}

func (o *MarkAllForumTopicsAsReadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarkAllForumTopicsAsReadRequest := _MarkAllForumTopicsAsReadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarkAllForumTopicsAsReadRequest)

	if err != nil {
		return err
	}

	*o = MarkAllForumTopicsAsReadRequest(varMarkAllForumTopicsAsReadRequest)

	return err
}

type NullableMarkAllForumTopicsAsReadRequest struct {
	value *MarkAllForumTopicsAsReadRequest
	isSet bool
}

func (v NullableMarkAllForumTopicsAsReadRequest) Get() *MarkAllForumTopicsAsReadRequest {
	return v.value
}

func (v *NullableMarkAllForumTopicsAsReadRequest) Set(val *MarkAllForumTopicsAsReadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkAllForumTopicsAsReadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkAllForumTopicsAsReadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkAllForumTopicsAsReadRequest(val *MarkAllForumTopicsAsReadRequest) *NullableMarkAllForumTopicsAsReadRequest {
	return &NullableMarkAllForumTopicsAsReadRequest{value: val, isSet: true}
}

func (v NullableMarkAllForumTopicsAsReadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkAllForumTopicsAsReadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
