/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RejectPostReplacementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RejectPostReplacementRequest{}

// RejectPostReplacementRequest struct for RejectPostReplacementRequest
type RejectPostReplacementRequest struct {
	Reason *string `json:"reason,omitempty"`
}

// NewRejectPostReplacementRequest instantiates a new RejectPostReplacementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRejectPostReplacementRequest() *RejectPostReplacementRequest {
	this := RejectPostReplacementRequest{}
	return &this
}

// NewRejectPostReplacementRequestWithDefaults instantiates a new RejectPostReplacementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRejectPostReplacementRequestWithDefaults() *RejectPostReplacementRequest {
	this := RejectPostReplacementRequest{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RejectPostReplacementRequest) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RejectPostReplacementRequest) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RejectPostReplacementRequest) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RejectPostReplacementRequest) SetReason(v string) {
	o.Reason = &v
}

func (o RejectPostReplacementRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RejectPostReplacementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableRejectPostReplacementRequest struct {
	value *RejectPostReplacementRequest
	isSet bool
}

func (v NullableRejectPostReplacementRequest) Get() *RejectPostReplacementRequest {
	return v.value
}

func (v *NullableRejectPostReplacementRequest) Set(val *RejectPostReplacementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRejectPostReplacementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRejectPostReplacementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRejectPostReplacementRequest(val *RejectPostReplacementRequest) *NullableRejectPostReplacementRequest {
	return &NullableRejectPostReplacementRequest{value: val, isSet: true}
}

func (v NullableRejectPostReplacementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRejectPostReplacementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
