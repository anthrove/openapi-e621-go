/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// WarningTypes the model 'WarningTypes'
type WarningTypes string

// List of WarningTypes
const (
	WARNING WarningTypes = "warning"
	RECORD WarningTypes = "record"
	BAN WarningTypes = "ban"
)

// All allowed values of WarningTypes enum
var AllowedWarningTypesEnumValues = []WarningTypes{
	"warning",
	"record",
	"ban",
}

func (v *WarningTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WarningTypes(value)
	for _, existing := range AllowedWarningTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WarningTypes", value)
}

// NewWarningTypesFromValue returns a pointer to a valid WarningTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWarningTypesFromValue(v string) (*WarningTypes, error) {
	ev := WarningTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WarningTypes: valid values are %v", v, AllowedWarningTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WarningTypes) IsValid() bool {
	for _, existing := range AllowedWarningTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WarningTypes value
func (v WarningTypes) Ptr() *WarningTypes {
	return &v
}

type NullableWarningTypes struct {
	value *WarningTypes
	isSet bool
}

func (v NullableWarningTypes) Get() *WarningTypes {
	return v.value
}

func (v *NullableWarningTypes) Set(val *WarningTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableWarningTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableWarningTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarningTypes(val *WarningTypes) *NullableWarningTypes {
	return &NullableWarningTypes{value: val, isSet: true}
}

func (v NullableWarningTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarningTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

