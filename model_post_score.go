/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostScore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostScore{}

// PostScore struct for PostScore
type PostScore struct {
	Up    int32 `json:"up"`
	Down  int32 `json:"down"`
	Total int32 `json:"total"`
}

type _PostScore PostScore

// NewPostScore instantiates a new PostScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostScore(up int32, down int32, total int32) *PostScore {
	this := PostScore{}
	this.Up = up
	this.Down = down
	this.Total = total
	return &this
}

// NewPostScoreWithDefaults instantiates a new PostScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostScoreWithDefaults() *PostScore {
	this := PostScore{}
	return &this
}

// GetUp returns the Up field value
func (o *PostScore) GetUp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Up
}

// GetUpOk returns a tuple with the Up field value
// and a boolean to check if the value has been set.
func (o *PostScore) GetUpOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Up, true
}

// SetUp sets field value
func (o *PostScore) SetUp(v int32) {
	o.Up = v
}

// GetDown returns the Down field value
func (o *PostScore) GetDown() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Down
}

// GetDownOk returns a tuple with the Down field value
// and a boolean to check if the value has been set.
func (o *PostScore) GetDownOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Down, true
}

// SetDown sets field value
func (o *PostScore) SetDown(v int32) {
	o.Down = v
}

// GetTotal returns the Total field value
func (o *PostScore) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *PostScore) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *PostScore) SetTotal(v int32) {
	o.Total = v
}

func (o PostScore) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostScore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["up"] = o.Up
	toSerialize["down"] = o.Down
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *PostScore) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"up",
		"down",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostScore := _PostScore{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostScore)

	if err != nil {
		return err
	}

	*o = PostScore(varPostScore)

	return err
}

type NullablePostScore struct {
	value *PostScore
	isSet bool
}

func (v NullablePostScore) Get() *PostScore {
	return v.value
}

func (v *NullablePostScore) Set(val *PostScore) {
	v.value = val
	v.isSet = true
}

func (v NullablePostScore) IsSet() bool {
	return v.isSet
}

func (v *NullablePostScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostScore(val *PostScore) *NullablePostScore {
	return &NullablePostScore{value: val, isSet: true}
}

func (v NullablePostScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
