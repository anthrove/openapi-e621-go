/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the IPBan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPBan{}

// IPBan Due to a global filter, the ip_addr is not present no matter your user level.
type IPBan struct {
	Id        int32     `json:"id"`
	CreatorId int32     `json:"creator_id"`
	Reason    string    `json:"reason"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type _IPBan IPBan

// NewIPBan instantiates a new IPBan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPBan(id int32, creatorId int32, reason string, createdAt time.Time, updatedAt time.Time) *IPBan {
	this := IPBan{}
	this.Id = id
	this.CreatorId = creatorId
	this.Reason = reason
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewIPBanWithDefaults instantiates a new IPBan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPBanWithDefaults() *IPBan {
	this := IPBan{}
	return &this
}

// GetId returns the Id field value
func (o *IPBan) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IPBan) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IPBan) SetId(v int32) {
	o.Id = v
}

// GetCreatorId returns the CreatorId field value
func (o *IPBan) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *IPBan) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *IPBan) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetReason returns the Reason field value
func (o *IPBan) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *IPBan) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *IPBan) SetReason(v string) {
	o.Reason = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *IPBan) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *IPBan) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *IPBan) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *IPBan) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *IPBan) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *IPBan) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o IPBan) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPBan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["reason"] = o.Reason
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *IPBan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"creator_id",
		"reason",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIPBan := _IPBan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIPBan)

	if err != nil {
		return err
	}

	*o = IPBan(varIPBan)

	return err
}

type NullableIPBan struct {
	value *IPBan
	isSet bool
}

func (v NullableIPBan) Get() *IPBan {
	return v.value
}

func (v *NullableIPBan) Set(val *IPBan) {
	v.value = val
	v.isSet = true
}

func (v NullableIPBan) IsSet() bool {
	return v.isSet
}

func (v *NullableIPBan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPBan(val *IPBan) *NullableIPBan {
	return &NullableIPBan{value: val, isSet: true}
}

func (v NullableIPBan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPBan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
