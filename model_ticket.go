/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Ticket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ticket{}

// Ticket struct for Ticket
type Ticket struct {
	Id        int32           `json:"id"`
	CreatorId int32           `json:"creator_id"`
	Reason    string          `json:"reason"`
	DispId    float32         `json:"disp_id"`
	Qtype     TicketTypes     `json:"qtype"`
	Status    TicketStatuses  `json:"status"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
	Response  string          `json:"response"`
	HandlerId NullableFloat32 `json:"handler_id"`
	// Only visible to Moderator+.
	ClaimantId   NullableFloat32 `json:"claimant_id,omitempty"`
	ReportReason NullableString  `json:"report_reason"`
	AccusedId    NullableFloat32 `json:"accused_id"`
}

type _Ticket Ticket

// NewTicket instantiates a new Ticket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicket(id int32, creatorId int32, reason string, dispId float32, qtype TicketTypes, status TicketStatuses, createdAt time.Time, updatedAt time.Time, response string, handlerId NullableFloat32, reportReason NullableString, accusedId NullableFloat32) *Ticket {
	this := Ticket{}
	this.Id = id
	this.CreatorId = creatorId
	this.Reason = reason
	this.DispId = dispId
	this.Qtype = qtype
	this.Status = status
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Response = response
	this.HandlerId = handlerId
	this.ReportReason = reportReason
	this.AccusedId = accusedId
	return &this
}

// NewTicketWithDefaults instantiates a new Ticket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketWithDefaults() *Ticket {
	this := Ticket{}
	return &this
}

// GetId returns the Id field value
func (o *Ticket) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Ticket) SetId(v int32) {
	o.Id = v
}

// GetCreatorId returns the CreatorId field value
func (o *Ticket) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *Ticket) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetReason returns the Reason field value
func (o *Ticket) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Ticket) SetReason(v string) {
	o.Reason = v
}

// GetDispId returns the DispId field value
func (o *Ticket) GetDispId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DispId
}

// GetDispIdOk returns a tuple with the DispId field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetDispIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DispId, true
}

// SetDispId sets field value
func (o *Ticket) SetDispId(v float32) {
	o.DispId = v
}

// GetQtype returns the Qtype field value
func (o *Ticket) GetQtype() TicketTypes {
	if o == nil {
		var ret TicketTypes
		return ret
	}

	return o.Qtype
}

// GetQtypeOk returns a tuple with the Qtype field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetQtypeOk() (*TicketTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qtype, true
}

// SetQtype sets field value
func (o *Ticket) SetQtype(v TicketTypes) {
	o.Qtype = v
}

// GetStatus returns the Status field value
func (o *Ticket) GetStatus() TicketStatuses {
	if o == nil {
		var ret TicketStatuses
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetStatusOk() (*TicketStatuses, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Ticket) SetStatus(v TicketStatuses) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Ticket) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Ticket) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Ticket) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Ticket) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetResponse returns the Response field value
func (o *Ticket) GetResponse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *Ticket) GetResponseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *Ticket) SetResponse(v string) {
	o.Response = v
}

// GetHandlerId returns the HandlerId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *Ticket) GetHandlerId() float32 {
	if o == nil || o.HandlerId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.HandlerId.Get()
}

// GetHandlerIdOk returns a tuple with the HandlerId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetHandlerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HandlerId.Get(), o.HandlerId.IsSet()
}

// SetHandlerId sets field value
func (o *Ticket) SetHandlerId(v float32) {
	o.HandlerId.Set(&v)
}

// GetClaimantId returns the ClaimantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ticket) GetClaimantId() float32 {
	if o == nil || IsNil(o.ClaimantId.Get()) {
		var ret float32
		return ret
	}
	return *o.ClaimantId.Get()
}

// GetClaimantIdOk returns a tuple with the ClaimantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetClaimantIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClaimantId.Get(), o.ClaimantId.IsSet()
}

// HasClaimantId returns a boolean if a field has been set.
func (o *Ticket) HasClaimantId() bool {
	if o != nil && o.ClaimantId.IsSet() {
		return true
	}

	return false
}

// SetClaimantId gets a reference to the given NullableFloat32 and assigns it to the ClaimantId field.
func (o *Ticket) SetClaimantId(v float32) {
	o.ClaimantId.Set(&v)
}

// SetClaimantIdNil sets the value for ClaimantId to be an explicit nil
func (o *Ticket) SetClaimantIdNil() {
	o.ClaimantId.Set(nil)
}

// UnsetClaimantId ensures that no value is present for ClaimantId, not even an explicit nil
func (o *Ticket) UnsetClaimantId() {
	o.ClaimantId.Unset()
}

// GetReportReason returns the ReportReason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Ticket) GetReportReason() string {
	if o == nil || o.ReportReason.Get() == nil {
		var ret string
		return ret
	}

	return *o.ReportReason.Get()
}

// GetReportReasonOk returns a tuple with the ReportReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetReportReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportReason.Get(), o.ReportReason.IsSet()
}

// SetReportReason sets field value
func (o *Ticket) SetReportReason(v string) {
	o.ReportReason.Set(&v)
}

// GetAccusedId returns the AccusedId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *Ticket) GetAccusedId() float32 {
	if o == nil || o.AccusedId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.AccusedId.Get()
}

// GetAccusedIdOk returns a tuple with the AccusedId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ticket) GetAccusedIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccusedId.Get(), o.AccusedId.IsSet()
}

// SetAccusedId sets field value
func (o *Ticket) SetAccusedId(v float32) {
	o.AccusedId.Set(&v)
}

func (o Ticket) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ticket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["reason"] = o.Reason
	toSerialize["disp_id"] = o.DispId
	toSerialize["qtype"] = o.Qtype
	toSerialize["status"] = o.Status
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["response"] = o.Response
	toSerialize["handler_id"] = o.HandlerId.Get()
	if o.ClaimantId.IsSet() {
		toSerialize["claimant_id"] = o.ClaimantId.Get()
	}
	toSerialize["report_reason"] = o.ReportReason.Get()
	toSerialize["accused_id"] = o.AccusedId.Get()
	return toSerialize, nil
}

func (o *Ticket) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"creator_id",
		"reason",
		"disp_id",
		"qtype",
		"status",
		"created_at",
		"updated_at",
		"response",
		"handler_id",
		"report_reason",
		"accused_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTicket := _Ticket{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTicket)

	if err != nil {
		return err
	}

	*o = Ticket(varTicket)

	return err
}

type NullableTicket struct {
	value *Ticket
	isSet bool
}

func (v NullableTicket) Get() *Ticket {
	return v.value
}

func (v *NullableTicket) Set(val *Ticket) {
	v.value = val
	v.isSet = true
}

func (v NullableTicket) IsSet() bool {
	return v.isSet
}

func (v *NullableTicket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicket(val *Ticket) *NullableTicket {
	return &NullableTicket{value: val, isSet: true}
}

func (v NullableTicket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
