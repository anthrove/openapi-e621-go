/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Artist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Artist{}

// Artist struct for Artist
type Artist struct {
	Id           int32           `json:"id"`
	Name         string          `json:"name"`
	UpdatedAt    time.Time       `json:"updated_at"`
	IsActive     bool            `json:"is_active"`
	OtherNames   []string        `json:"other_names"`
	GroupName    string          `json:"group_name"`
	LinkedUserId NullableFloat32 `json:"linked_user_id"`
	CreatedAt    time.Time       `json:"created_at"`
	CreatorId    int32           `json:"creator_id"`
	IsLocked     bool            `json:"is_locked"`
	Notes        NullableString  `json:"notes"`
}

type _Artist Artist

// NewArtist instantiates a new Artist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtist(id int32, name string, updatedAt time.Time, isActive bool, otherNames []string, groupName string, linkedUserId NullableFloat32, createdAt time.Time, creatorId int32, isLocked bool, notes NullableString) *Artist {
	this := Artist{}
	this.Id = id
	this.Name = name
	this.UpdatedAt = updatedAt
	this.IsActive = isActive
	this.OtherNames = otherNames
	this.GroupName = groupName
	this.LinkedUserId = linkedUserId
	this.CreatedAt = createdAt
	this.CreatorId = creatorId
	this.IsLocked = isLocked
	this.Notes = notes
	return &this
}

// NewArtistWithDefaults instantiates a new Artist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtistWithDefaults() *Artist {
	this := Artist{}
	return &this
}

// GetId returns the Id field value
func (o *Artist) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Artist) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Artist) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Artist) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Artist) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Artist) SetName(v string) {
	o.Name = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Artist) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Artist) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Artist) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIsActive returns the IsActive field value
func (o *Artist) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *Artist) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *Artist) SetIsActive(v bool) {
	o.IsActive = v
}

// GetOtherNames returns the OtherNames field value
func (o *Artist) GetOtherNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OtherNames
}

// GetOtherNamesOk returns a tuple with the OtherNames field value
// and a boolean to check if the value has been set.
func (o *Artist) GetOtherNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherNames, true
}

// SetOtherNames sets field value
func (o *Artist) SetOtherNames(v []string) {
	o.OtherNames = v
}

// GetGroupName returns the GroupName field value
func (o *Artist) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *Artist) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *Artist) SetGroupName(v string) {
	o.GroupName = v
}

// GetLinkedUserId returns the LinkedUserId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *Artist) GetLinkedUserId() float32 {
	if o == nil || o.LinkedUserId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.LinkedUserId.Get()
}

// GetLinkedUserIdOk returns a tuple with the LinkedUserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Artist) GetLinkedUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkedUserId.Get(), o.LinkedUserId.IsSet()
}

// SetLinkedUserId sets field value
func (o *Artist) SetLinkedUserId(v float32) {
	o.LinkedUserId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *Artist) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Artist) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Artist) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetCreatorId returns the CreatorId field value
func (o *Artist) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *Artist) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *Artist) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetIsLocked returns the IsLocked field value
func (o *Artist) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *Artist) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *Artist) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetNotes returns the Notes field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Artist) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}

	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Artist) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// SetNotes sets field value
func (o *Artist) SetNotes(v string) {
	o.Notes.Set(&v)
}

func (o Artist) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Artist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["is_active"] = o.IsActive
	toSerialize["other_names"] = o.OtherNames
	toSerialize["group_name"] = o.GroupName
	toSerialize["linked_user_id"] = o.LinkedUserId.Get()
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["is_locked"] = o.IsLocked
	toSerialize["notes"] = o.Notes.Get()
	return toSerialize, nil
}

func (o *Artist) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"updated_at",
		"is_active",
		"other_names",
		"group_name",
		"linked_user_id",
		"created_at",
		"creator_id",
		"is_locked",
		"notes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtist := _Artist{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtist)

	if err != nil {
		return err
	}

	*o = Artist(varArtist)

	return err
}

type NullableArtist struct {
	value *Artist
	isSet bool
}

func (v NullableArtist) Get() *Artist {
	return v.value
}

func (v *NullableArtist) Set(val *Artist) {
	v.value = val
	v.isSet = true
}

func (v NullableArtist) IsSet() bool {
	return v.isSet
}

func (v *NullableArtist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtist(val *Artist) *NullableArtist {
	return &NullableArtist{value: val, isSet: true}
}

func (v NullableArtist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
