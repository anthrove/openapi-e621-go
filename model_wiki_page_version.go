/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WikiPageVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WikiPageVersion{}

// WikiPageVersion struct for WikiPageVersion
type WikiPageVersion struct {
	Id float32 `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Title string `json:"title"`
	Body string `json:"body"`
	UpdaterId float32 `json:"updater_id"`
	WikiPageId float32 `json:"wiki_page_id"`
	IsLocked bool `json:"is_locked"`
	OtherNames []string `json:"other_names"`
	IsDeleted bool `json:"is_deleted"`
	Reason NullableString `json:"reason"`
	Parent NullableString `json:"parent"`
}

type _WikiPageVersion WikiPageVersion

// NewWikiPageVersion instantiates a new WikiPageVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWikiPageVersion(id float32, createdAt time.Time, updatedAt time.Time, title string, body string, updaterId float32, wikiPageId float32, isLocked bool, otherNames []string, isDeleted bool, reason NullableString, parent NullableString) *WikiPageVersion {
	this := WikiPageVersion{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Title = title
	this.Body = body
	this.UpdaterId = updaterId
	this.WikiPageId = wikiPageId
	this.IsLocked = isLocked
	this.OtherNames = otherNames
	this.IsDeleted = isDeleted
	this.Reason = reason
	this.Parent = parent
	return &this
}

// NewWikiPageVersionWithDefaults instantiates a new WikiPageVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWikiPageVersionWithDefaults() *WikiPageVersion {
	this := WikiPageVersion{}
	return &this
}

// GetId returns the Id field value
func (o *WikiPageVersion) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WikiPageVersion) SetId(v float32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WikiPageVersion) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WikiPageVersion) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *WikiPageVersion) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *WikiPageVersion) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetTitle returns the Title field value
func (o *WikiPageVersion) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *WikiPageVersion) SetTitle(v string) {
	o.Title = v
}

// GetBody returns the Body field value
func (o *WikiPageVersion) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *WikiPageVersion) SetBody(v string) {
	o.Body = v
}

// GetUpdaterId returns the UpdaterId field value
func (o *WikiPageVersion) GetUpdaterId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UpdaterId
}

// GetUpdaterIdOk returns a tuple with the UpdaterId field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetUpdaterIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdaterId, true
}

// SetUpdaterId sets field value
func (o *WikiPageVersion) SetUpdaterId(v float32) {
	o.UpdaterId = v
}

// GetWikiPageId returns the WikiPageId field value
func (o *WikiPageVersion) GetWikiPageId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WikiPageId
}

// GetWikiPageIdOk returns a tuple with the WikiPageId field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetWikiPageIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WikiPageId, true
}

// SetWikiPageId sets field value
func (o *WikiPageVersion) SetWikiPageId(v float32) {
	o.WikiPageId = v
}

// GetIsLocked returns the IsLocked field value
func (o *WikiPageVersion) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *WikiPageVersion) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetOtherNames returns the OtherNames field value
func (o *WikiPageVersion) GetOtherNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OtherNames
}

// GetOtherNamesOk returns a tuple with the OtherNames field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetOtherNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtherNames, true
}

// SetOtherNames sets field value
func (o *WikiPageVersion) SetOtherNames(v []string) {
	o.OtherNames = v
}

// GetIsDeleted returns the IsDeleted field value
func (o *WikiPageVersion) GetIsDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value
// and a boolean to check if the value has been set.
func (o *WikiPageVersion) GetIsDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeleted, true
}

// SetIsDeleted sets field value
func (o *WikiPageVersion) SetIsDeleted(v bool) {
	o.IsDeleted = v
}

// GetReason returns the Reason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WikiPageVersion) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}

	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiPageVersion) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// SetReason sets field value
func (o *WikiPageVersion) SetReason(v string) {
	o.Reason.Set(&v)
}

// GetParent returns the Parent field value
// If the value is explicit nil, the zero value for string will be returned
func (o *WikiPageVersion) GetParent() string {
	if o == nil || o.Parent.Get() == nil {
		var ret string
		return ret
	}

	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WikiPageVersion) GetParentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// SetParent sets field value
func (o *WikiPageVersion) SetParent(v string) {
	o.Parent.Set(&v)
}

func (o WikiPageVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WikiPageVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["title"] = o.Title
	toSerialize["body"] = o.Body
	toSerialize["updater_id"] = o.UpdaterId
	toSerialize["wiki_page_id"] = o.WikiPageId
	toSerialize["is_locked"] = o.IsLocked
	toSerialize["other_names"] = o.OtherNames
	toSerialize["is_deleted"] = o.IsDeleted
	toSerialize["reason"] = o.Reason.Get()
	toSerialize["parent"] = o.Parent.Get()
	return toSerialize, nil
}

func (o *WikiPageVersion) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"title",
		"body",
		"updater_id",
		"wiki_page_id",
		"is_locked",
		"other_names",
		"is_deleted",
		"reason",
		"parent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWikiPageVersion := _WikiPageVersion{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWikiPageVersion)

	if err != nil {
		return err
	}

	*o = WikiPageVersion(varWikiPageVersion)

	return err
}

type NullableWikiPageVersion struct {
	value *WikiPageVersion
	isSet bool
}

func (v NullableWikiPageVersion) Get() *WikiPageVersion {
	return v.value
}

func (v *NullableWikiPageVersion) Set(val *WikiPageVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableWikiPageVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableWikiPageVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWikiPageVersion(val *WikiPageVersion) *NullableWikiPageVersion {
	return &NullableWikiPageVersion{value: val, isSet: true}
}

func (v NullableWikiPageVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWikiPageVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


