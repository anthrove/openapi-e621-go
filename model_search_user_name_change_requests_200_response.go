/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// SearchUserNameChangeRequests200Response struct for SearchUserNameChangeRequests200Response
type SearchUserNameChangeRequests200Response struct {
	SearchUserNameChangeRequests200ResponseAnyOf *SearchUserNameChangeRequests200ResponseAnyOf
	ArrayOfUserNameChangeRequest *[]UserNameChangeRequest
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SearchUserNameChangeRequests200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SearchUserNameChangeRequests200ResponseAnyOf
	err = json.Unmarshal(data, &dst.SearchUserNameChangeRequests200ResponseAnyOf);
	if err == nil {
		jsonSearchUserNameChangeRequests200ResponseAnyOf, _ := json.Marshal(dst.SearchUserNameChangeRequests200ResponseAnyOf)
		if string(jsonSearchUserNameChangeRequests200ResponseAnyOf) == "{}" { // empty struct
			dst.SearchUserNameChangeRequests200ResponseAnyOf = nil
		} else {
			return nil // data stored in dst.SearchUserNameChangeRequests200ResponseAnyOf, return on the first match
		}
	} else {
		dst.SearchUserNameChangeRequests200ResponseAnyOf = nil
	}

	// try to unmarshal JSON data into ArrayOfUserNameChangeRequest
	err = json.Unmarshal(data, &dst.ArrayOfUserNameChangeRequest);
	if err == nil {
		jsonArrayOfUserNameChangeRequest, _ := json.Marshal(dst.ArrayOfUserNameChangeRequest)
		if string(jsonArrayOfUserNameChangeRequest) == "{}" { // empty struct
			dst.ArrayOfUserNameChangeRequest = nil
		} else {
			return nil // data stored in dst.ArrayOfUserNameChangeRequest, return on the first match
		}
	} else {
		dst.ArrayOfUserNameChangeRequest = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SearchUserNameChangeRequests200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SearchUserNameChangeRequests200Response) MarshalJSON() ([]byte, error) {
	if src.SearchUserNameChangeRequests200ResponseAnyOf != nil {
		return json.Marshal(&src.SearchUserNameChangeRequests200ResponseAnyOf)
	}

	if src.ArrayOfUserNameChangeRequest != nil {
		return json.Marshal(&src.ArrayOfUserNameChangeRequest)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSearchUserNameChangeRequests200Response struct {
	value *SearchUserNameChangeRequests200Response
	isSet bool
}

func (v NullableSearchUserNameChangeRequests200Response) Get() *SearchUserNameChangeRequests200Response {
	return v.value
}

func (v *NullableSearchUserNameChangeRequests200Response) Set(val *SearchUserNameChangeRequests200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchUserNameChangeRequests200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchUserNameChangeRequests200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchUserNameChangeRequests200Response(val *SearchUserNameChangeRequests200Response) *NullableSearchUserNameChangeRequests200Response {
	return &NullableSearchUserNameChangeRequests200Response{value: val, isSet: true}
}

func (v NullableSearchUserNameChangeRequests200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchUserNameChangeRequests200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


