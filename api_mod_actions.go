/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ModActionsAPIService ModActionsAPI service
type ModActionsAPIService service

type ModActionsAPISearchModActionsRequest struct {
	ctx               context.Context
	ApiService        *ModActionsAPIService
	limit             *int32
	page              *int32
	searchId          *int32
	searchOrder       *string
	searchCreatorId   *int32
	searchCreatorName *string
	searchAction      *ModactionActions
}

// The maximum number of results to return. Between 0 and 320.
func (r ModActionsAPISearchModActionsRequest) Limit(limit int32) ModActionsAPISearchModActionsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ModActionsAPISearchModActionsRequest) Page(page int32) ModActionsAPISearchModActionsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ModActionsAPISearchModActionsRequest) SearchId(searchId int32) ModActionsAPISearchModActionsRequest {
	r.searchId = &searchId
	return r
}

func (r ModActionsAPISearchModActionsRequest) SearchOrder(searchOrder string) ModActionsAPISearchModActionsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r ModActionsAPISearchModActionsRequest) SearchCreatorId(searchCreatorId int32) ModActionsAPISearchModActionsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r ModActionsAPISearchModActionsRequest) SearchCreatorName(searchCreatorName string) ModActionsAPISearchModActionsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r ModActionsAPISearchModActionsRequest) SearchAction(searchAction ModactionActions) ModActionsAPISearchModActionsRequest {
	r.searchAction = &searchAction
	return r
}

func (r ModActionsAPISearchModActionsRequest) Execute() ([]ModAction, *http.Response, error) {
	return r.ApiService.SearchModActionsExecute(r)
}

/*
SearchModActions Search Mod Actions

Note that some mod actions are not in use anymore. Their entries exist for historical purposes only.<br>
The current legacy actions are as follows:<br>
* `created_positive_record`, `created_neutral_record`, `created_negative_record`
* `created_flag_reason`, `edited_flag_reason`, `deleted_flag_reason`
* `post_move_favorites`, `post_delete`, `post_undelete`, `post_destroy`, `post_rating_lock`, `post_unapprove`
* `post_replacement_accept`, `post_replacement_reject`, `post_replacement_delete`

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ModActionsAPISearchModActionsRequest
*/
func (a *ModActionsAPIService) SearchModActions(ctx context.Context) ModActionsAPISearchModActionsRequest {
	return ModActionsAPISearchModActionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ModAction
func (a *ModActionsAPIService) SearchModActionsExecute(r ModActionsAPISearchModActionsRequest) ([]ModAction, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ModAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModActionsAPIService.SearchModActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mod_actions.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[action]", r.searchAction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
