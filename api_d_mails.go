/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// DMailsAPIService DMailsAPI service
type DMailsAPIService service

type DMailsAPIDeleteDMailRequest struct {
	ctx        context.Context
	ApiService *DMailsAPIService
	id         float32
}

func (r DMailsAPIDeleteDMailRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDMailExecute(r)
}

/*
DeleteDMail Delete DMail

Deleting simply hides your copy of the dmail.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the dmail.
	@return DMailsAPIDeleteDMailRequest
*/
func (a *DMailsAPIService) DeleteDMail(ctx context.Context, id float32) DMailsAPIDeleteDMailRequest {
	return DMailsAPIDeleteDMailRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DMailsAPIService) DeleteDMailExecute(r DMailsAPIDeleteDMailRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.DeleteDMail")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmails/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DMailsAPIGetDMailRequest struct {
	ctx        context.Context
	ApiService *DMailsAPIService
	id         float32
}

func (r DMailsAPIGetDMailRequest) Execute() (*DMail, *http.Response, error) {
	return r.ApiService.GetDMailExecute(r)
}

/*
GetDMail Get DMail

Fetching a dmail will not mark it as read.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the dmail.
	@return DMailsAPIGetDMailRequest
*/
func (a *DMailsAPIService) GetDMail(ctx context.Context, id float32) DMailsAPIGetDMailRequest {
	return DMailsAPIGetDMailRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DMail
func (a *DMailsAPIService) GetDMailExecute(r DMailsAPIGetDMailRequest) (*DMail, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DMail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.GetDMail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmails/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DMailsAPIMarkAllDMailsAsUnreadRequest struct {
	ctx        context.Context
	ApiService *DMailsAPIService
}

func (r DMailsAPIMarkAllDMailsAsUnreadRequest) Execute() (*http.Response, error) {
	return r.ApiService.MarkAllDMailsAsUnreadExecute(r)
}

/*
MarkAllDMailsAsUnread Mark All DMails As Unread

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DMailsAPIMarkAllDMailsAsUnreadRequest
*/
func (a *DMailsAPIService) MarkAllDMailsAsUnread(ctx context.Context) DMailsAPIMarkAllDMailsAsUnreadRequest {
	return DMailsAPIMarkAllDMailsAsUnreadRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DMailsAPIService) MarkAllDMailsAsUnreadExecute(r DMailsAPIMarkAllDMailsAsUnreadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.MarkAllDMailsAsUnread")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmails/mark_all_as_unread.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DMailsAPIMarkDMailAsReadRequest struct {
	ctx        context.Context
	ApiService *DMailsAPIService
	id         float32
}

func (r DMailsAPIMarkDMailAsReadRequest) Execute() (*http.Response, error) {
	return r.ApiService.MarkDMailAsReadExecute(r)
}

/*
MarkDMailAsRead Mark DMail As Read

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the dmail.
	@return DMailsAPIMarkDMailAsReadRequest
*/
func (a *DMailsAPIService) MarkDMailAsRead(ctx context.Context, id float32) DMailsAPIMarkDMailAsReadRequest {
	return DMailsAPIMarkDMailAsReadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DMailsAPIService) MarkDMailAsReadExecute(r DMailsAPIMarkDMailAsReadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.MarkDMailAsRead")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmails/{id}/mark_as_read.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DMailsAPIMarkDMailAsUnreadRequest struct {
	ctx        context.Context
	ApiService *DMailsAPIService
	id         float32
}

func (r DMailsAPIMarkDMailAsUnreadRequest) Execute() (*http.Response, error) {
	return r.ApiService.MarkDMailAsUnreadExecute(r)
}

/*
MarkDMailAsUnread Mark DMail As Unread

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the dmail.
	@return DMailsAPIMarkDMailAsUnreadRequest
*/
func (a *DMailsAPIService) MarkDMailAsUnread(ctx context.Context, id float32) DMailsAPIMarkDMailAsUnreadRequest {
	return DMailsAPIMarkDMailAsUnreadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DMailsAPIService) MarkDMailAsUnreadExecute(r DMailsAPIMarkDMailAsUnreadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.MarkDMailAsUnread")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmails/{id}/mark_as_unread.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DMailsAPISearchDMailsRequest struct {
	ctx                  context.Context
	ApiService           *DMailsAPIService
	limit                *int32
	page                 *int32
	searchId             *int32
	searchTitleMatches   *string
	searchMessageMatches *string
	searchToName         *string
	searchToId           *float32
	searchFromName       *string
	searchFromId         *float32
	searchIsRead         *bool
	searchIsDeleted      *bool
	searchRead           *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r DMailsAPISearchDMailsRequest) Limit(limit int32) DMailsAPISearchDMailsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r DMailsAPISearchDMailsRequest) Page(page int32) DMailsAPISearchDMailsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r DMailsAPISearchDMailsRequest) SearchId(searchId int32) DMailsAPISearchDMailsRequest {
	r.searchId = &searchId
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchTitleMatches(searchTitleMatches string) DMailsAPISearchDMailsRequest {
	r.searchTitleMatches = &searchTitleMatches
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchMessageMatches(searchMessageMatches string) DMailsAPISearchDMailsRequest {
	r.searchMessageMatches = &searchMessageMatches
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchToName(searchToName string) DMailsAPISearchDMailsRequest {
	r.searchToName = &searchToName
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchToId(searchToId float32) DMailsAPISearchDMailsRequest {
	r.searchToId = &searchToId
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchFromName(searchFromName string) DMailsAPISearchDMailsRequest {
	r.searchFromName = &searchFromName
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchFromId(searchFromId float32) DMailsAPISearchDMailsRequest {
	r.searchFromId = &searchFromId
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchIsRead(searchIsRead bool) DMailsAPISearchDMailsRequest {
	r.searchIsRead = &searchIsRead
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchIsDeleted(searchIsDeleted bool) DMailsAPISearchDMailsRequest {
	r.searchIsDeleted = &searchIsDeleted
	return r
}

func (r DMailsAPISearchDMailsRequest) SearchRead(searchRead bool) DMailsAPISearchDMailsRequest {
	r.searchRead = &searchRead
	return r
}

func (r DMailsAPISearchDMailsRequest) Execute() (*SearchDMails200Response, *http.Response, error) {
	return r.ApiService.SearchDMailsExecute(r)
}

/*
SearchDMails Search DMails

When no results are found, an object with a `dmails` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DMailsAPISearchDMailsRequest
*/
func (a *DMailsAPIService) SearchDMails(ctx context.Context) DMailsAPISearchDMailsRequest {
	return DMailsAPISearchDMailsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchDMails200Response
func (a *DMailsAPIService) SearchDMailsExecute(r DMailsAPISearchDMailsRequest) (*SearchDMails200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchDMails200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.SearchDMails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dmails.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchTitleMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title_matches]", r.searchTitleMatches, "")
	}
	if r.searchMessageMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[message_matches]", r.searchMessageMatches, "")
	}
	if r.searchToName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[to_name]", r.searchToName, "")
	}
	if r.searchToId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[to_id]", r.searchToId, "")
	}
	if r.searchFromName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[from_name]", r.searchFromName, "")
	}
	if r.searchFromId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[from_id]", r.searchFromId, "")
	}
	if r.searchIsRead != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_read]", r.searchIsRead, "")
	}
	if r.searchIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_deleted]", r.searchIsDeleted, "")
	}
	if r.searchRead != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[read]", r.searchRead, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DMailsAPIUpdateUserDmailFilterRequest struct {
	ctx              context.Context
	ApiService       *DMailsAPIService
	dmailId          *float32
	dmailFilterWords *string
}

// Due to the odd way this route works, a dmail is REQUIRED to edit your dmail filter. You must be the owner of the dmail.
func (r DMailsAPIUpdateUserDmailFilterRequest) DmailId(dmailId float32) DMailsAPIUpdateUserDmailFilterRequest {
	r.dmailId = &dmailId
	return r
}

func (r DMailsAPIUpdateUserDmailFilterRequest) DmailFilterWords(dmailFilterWords string) DMailsAPIUpdateUserDmailFilterRequest {
	r.dmailFilterWords = &dmailFilterWords
	return r
}

func (r DMailsAPIUpdateUserDmailFilterRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateUserDmailFilterExecute(r)
}

/*
UpdateUserDmailFilter Update User Dmail Filter

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DMailsAPIUpdateUserDmailFilterRequest
*/
func (a *DMailsAPIService) UpdateUserDmailFilter(ctx context.Context) DMailsAPIUpdateUserDmailFilterRequest {
	return DMailsAPIUpdateUserDmailFilterRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DMailsAPIService) UpdateUserDmailFilterExecute(r DMailsAPIUpdateUserDmailFilterRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DMailsAPIService.UpdateUserDmailFilter")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/maintenance/user/dmail_filter.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dmailId == nil {
		return nil, reportError("dmailId is required and must be specified")
	}
	if r.dmailFilterWords == nil {
		return nil, reportError("dmailFilterWords is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "dmail_id", r.dmailId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "dmail_filter[words]", r.dmailFilterWords, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
