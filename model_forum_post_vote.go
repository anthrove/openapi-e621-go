/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ForumPostVote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPostVote{}

// ForumPostVote struct for ForumPostVote
type ForumPostVote struct {
	Id          int32     `json:"id"`
	ForumPostId int32     `json:"forum_post_id"`
	CreatorId   int32     `json:"creator_id"`
	Score       float32   `json:"score"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatorName string    `json:"creator_name"`
}

type _ForumPostVote ForumPostVote

// NewForumPostVote instantiates a new ForumPostVote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPostVote(id int32, forumPostId int32, creatorId int32, score float32, createdAt time.Time, updatedAt time.Time, creatorName string) *ForumPostVote {
	this := ForumPostVote{}
	this.Id = id
	this.ForumPostId = forumPostId
	this.CreatorId = creatorId
	this.Score = score
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.CreatorName = creatorName
	return &this
}

// NewForumPostVoteWithDefaults instantiates a new ForumPostVote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPostVoteWithDefaults() *ForumPostVote {
	this := ForumPostVote{}
	return &this
}

// GetId returns the Id field value
func (o *ForumPostVote) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ForumPostVote) SetId(v int32) {
	o.Id = v
}

// GetForumPostId returns the ForumPostId field value
func (o *ForumPostVote) GetForumPostId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ForumPostId
}

// GetForumPostIdOk returns a tuple with the ForumPostId field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetForumPostIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForumPostId, true
}

// SetForumPostId sets field value
func (o *ForumPostVote) SetForumPostId(v int32) {
	o.ForumPostId = v
}

// GetCreatorId returns the CreatorId field value
func (o *ForumPostVote) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *ForumPostVote) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetScore returns the Score field value
func (o *ForumPostVote) GetScore() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetScoreOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *ForumPostVote) SetScore(v float32) {
	o.Score = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ForumPostVote) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ForumPostVote) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ForumPostVote) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ForumPostVote) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatorName returns the CreatorName field value
func (o *ForumPostVote) GetCreatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *ForumPostVote) GetCreatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *ForumPostVote) SetCreatorName(v string) {
	o.CreatorName = v
}

func (o ForumPostVote) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPostVote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["forum_post_id"] = o.ForumPostId
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["score"] = o.Score
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["creator_name"] = o.CreatorName
	return toSerialize, nil
}

func (o *ForumPostVote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"forum_post_id",
		"creator_id",
		"score",
		"created_at",
		"updated_at",
		"creator_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForumPostVote := _ForumPostVote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varForumPostVote)

	if err != nil {
		return err
	}

	*o = ForumPostVote(varForumPostVote)

	return err
}

type NullableForumPostVote struct {
	value *ForumPostVote
	isSet bool
}

func (v NullableForumPostVote) Get() *ForumPostVote {
	return v.value
}

func (v *NullableForumPostVote) Set(val *ForumPostVote) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPostVote) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPostVote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPostVote(val *ForumPostVote) *NullableForumPostVote {
	return &NullableForumPostVote{value: val, isSet: true}
}

func (v NullableForumPostVote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPostVote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
