/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PostSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostSet{}

// PostSet struct for PostSet
type PostSet struct {
	Id               float32   `json:"id"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	CreatorId        float32   `json:"creator_id"`
	IsPublic         bool      `json:"is_public"`
	Name             string    `json:"name"`
	Shortname        string    `json:"shortname"`
	Description      string    `json:"description"`
	PostCount        float32   `json:"post_count"`
	TransferOnDelete bool      `json:"transfer_on_delete"`
	PostIds          []float32 `json:"post_ids"`
}

type _PostSet PostSet

// NewPostSet instantiates a new PostSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostSet(id float32, createdAt time.Time, updatedAt time.Time, creatorId float32, isPublic bool, name string, shortname string, description string, postCount float32, transferOnDelete bool, postIds []float32) *PostSet {
	this := PostSet{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.CreatorId = creatorId
	this.IsPublic = isPublic
	this.Name = name
	this.Shortname = shortname
	this.Description = description
	this.PostCount = postCount
	this.TransferOnDelete = transferOnDelete
	this.PostIds = postIds
	return &this
}

// NewPostSetWithDefaults instantiates a new PostSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostSetWithDefaults() *PostSet {
	this := PostSet{}
	return &this
}

// GetId returns the Id field value
func (o *PostSet) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PostSet) SetId(v float32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PostSet) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PostSet) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PostSet) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PostSet) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatorId returns the CreatorId field value
func (o *PostSet) GetCreatorId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetCreatorIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *PostSet) SetCreatorId(v float32) {
	o.CreatorId = v
}

// GetIsPublic returns the IsPublic field value
func (o *PostSet) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *PostSet) SetIsPublic(v bool) {
	o.IsPublic = v
}

// GetName returns the Name field value
func (o *PostSet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostSet) SetName(v string) {
	o.Name = v
}

// GetShortname returns the Shortname field value
func (o *PostSet) GetShortname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Shortname
}

// GetShortnameOk returns a tuple with the Shortname field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetShortnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shortname, true
}

// SetShortname sets field value
func (o *PostSet) SetShortname(v string) {
	o.Shortname = v
}

// GetDescription returns the Description field value
func (o *PostSet) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PostSet) SetDescription(v string) {
	o.Description = v
}

// GetPostCount returns the PostCount field value
func (o *PostSet) GetPostCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PostCount
}

// GetPostCountOk returns a tuple with the PostCount field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetPostCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostCount, true
}

// SetPostCount sets field value
func (o *PostSet) SetPostCount(v float32) {
	o.PostCount = v
}

// GetTransferOnDelete returns the TransferOnDelete field value
func (o *PostSet) GetTransferOnDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TransferOnDelete
}

// GetTransferOnDeleteOk returns a tuple with the TransferOnDelete field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetTransferOnDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransferOnDelete, true
}

// SetTransferOnDelete sets field value
func (o *PostSet) SetTransferOnDelete(v bool) {
	o.TransferOnDelete = v
}

// GetPostIds returns the PostIds field value
func (o *PostSet) GetPostIds() []float32 {
	if o == nil {
		var ret []float32
		return ret
	}

	return o.PostIds
}

// GetPostIdsOk returns a tuple with the PostIds field value
// and a boolean to check if the value has been set.
func (o *PostSet) GetPostIdsOk() ([]float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostIds, true
}

// SetPostIds sets field value
func (o *PostSet) SetPostIds(v []float32) {
	o.PostIds = v
}

func (o PostSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["is_public"] = o.IsPublic
	toSerialize["name"] = o.Name
	toSerialize["shortname"] = o.Shortname
	toSerialize["description"] = o.Description
	toSerialize["post_count"] = o.PostCount
	toSerialize["transfer_on_delete"] = o.TransferOnDelete
	toSerialize["post_ids"] = o.PostIds
	return toSerialize, nil
}

func (o *PostSet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"creator_id",
		"is_public",
		"name",
		"shortname",
		"description",
		"post_count",
		"transfer_on_delete",
		"post_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostSet := _PostSet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostSet)

	if err != nil {
		return err
	}

	*o = PostSet(varPostSet)

	return err
}

type NullablePostSet struct {
	value *PostSet
	isSet bool
}

func (v NullablePostSet) Get() *PostSet {
	return v.value
}

func (v *NullablePostSet) Set(val *PostSet) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSet) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSet(val *PostSet) *NullablePostSet {
	return &NullablePostSet{value: val, isSet: true}
}

func (v NullablePostSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
