/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FullUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FullUser{}

// FullUser struct for FullUser
type FullUser struct {
	Id float32 `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Name string `json:"name"`
	Level float32 `json:"level"`
	BaseUploadLimit float32 `json:"base_upload_limit"`
	PostUploadCount float32 `json:"post_upload_count"`
	PostUpdateCount float32 `json:"post_update_count"`
	NoteUpdateCount float32 `json:"note_update_count"`
	IsBanned bool `json:"is_banned"`
	CanApprovePosts bool `json:"can_approve_posts"`
	CanUploadFree bool `json:"can_upload_free"`
	LevelString string `json:"level_string"`
	AvatarId float32 `json:"avatar_id"`
	WikiPageVersionCount float32 `json:"wiki_page_version_count"`
	ArtistVersionCount float32 `json:"artist_version_count"`
	PoolVersionCount float32 `json:"pool_version_count"`
	ForumPostCount float32 `json:"forum_post_count"`
	CommentCount float32 `json:"comment_count"`
	FlagCount float32 `json:"flag_count"`
	FavoriteCount float32 `json:"favorite_count"`
	PositiveFeedbackCount float32 `json:"positive_feedback_count"`
	NeutralFeedbackCount float32 `json:"neutral_feedback_count"`
	NegativeFeedbackCount float32 `json:"negative_feedback_count"`
	UploadLimit float32 `json:"upload_limit"`
	ProfileAbout string `json:"profile_about"`
	ProfileArtinfo string `json:"profile_artinfo"`
}

type _FullUser FullUser

// NewFullUser instantiates a new FullUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullUser(id float32, createdAt time.Time, name string, level float32, baseUploadLimit float32, postUploadCount float32, postUpdateCount float32, noteUpdateCount float32, isBanned bool, canApprovePosts bool, canUploadFree bool, levelString string, avatarId float32, wikiPageVersionCount float32, artistVersionCount float32, poolVersionCount float32, forumPostCount float32, commentCount float32, flagCount float32, favoriteCount float32, positiveFeedbackCount float32, neutralFeedbackCount float32, negativeFeedbackCount float32, uploadLimit float32, profileAbout string, profileArtinfo string) *FullUser {
	this := FullUser{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Name = name
	this.Level = level
	this.BaseUploadLimit = baseUploadLimit
	this.PostUploadCount = postUploadCount
	this.PostUpdateCount = postUpdateCount
	this.NoteUpdateCount = noteUpdateCount
	this.IsBanned = isBanned
	this.CanApprovePosts = canApprovePosts
	this.CanUploadFree = canUploadFree
	this.LevelString = levelString
	this.AvatarId = avatarId
	this.WikiPageVersionCount = wikiPageVersionCount
	this.ArtistVersionCount = artistVersionCount
	this.PoolVersionCount = poolVersionCount
	this.ForumPostCount = forumPostCount
	this.CommentCount = commentCount
	this.FlagCount = flagCount
	this.FavoriteCount = favoriteCount
	this.PositiveFeedbackCount = positiveFeedbackCount
	this.NeutralFeedbackCount = neutralFeedbackCount
	this.NegativeFeedbackCount = negativeFeedbackCount
	this.UploadLimit = uploadLimit
	this.ProfileAbout = profileAbout
	this.ProfileArtinfo = profileArtinfo
	return &this
}

// NewFullUserWithDefaults instantiates a new FullUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullUserWithDefaults() *FullUser {
	this := FullUser{}
	return &this
}

// GetId returns the Id field value
func (o *FullUser) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FullUser) SetId(v float32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FullUser) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FullUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetName returns the Name field value
func (o *FullUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FullUser) SetName(v string) {
	o.Name = v
}

// GetLevel returns the Level field value
func (o *FullUser) GetLevel() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetLevelOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *FullUser) SetLevel(v float32) {
	o.Level = v
}

// GetBaseUploadLimit returns the BaseUploadLimit field value
func (o *FullUser) GetBaseUploadLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseUploadLimit
}

// GetBaseUploadLimitOk returns a tuple with the BaseUploadLimit field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetBaseUploadLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseUploadLimit, true
}

// SetBaseUploadLimit sets field value
func (o *FullUser) SetBaseUploadLimit(v float32) {
	o.BaseUploadLimit = v
}

// GetPostUploadCount returns the PostUploadCount field value
func (o *FullUser) GetPostUploadCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PostUploadCount
}

// GetPostUploadCountOk returns a tuple with the PostUploadCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetPostUploadCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostUploadCount, true
}

// SetPostUploadCount sets field value
func (o *FullUser) SetPostUploadCount(v float32) {
	o.PostUploadCount = v
}

// GetPostUpdateCount returns the PostUpdateCount field value
func (o *FullUser) GetPostUpdateCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PostUpdateCount
}

// GetPostUpdateCountOk returns a tuple with the PostUpdateCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetPostUpdateCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostUpdateCount, true
}

// SetPostUpdateCount sets field value
func (o *FullUser) SetPostUpdateCount(v float32) {
	o.PostUpdateCount = v
}

// GetNoteUpdateCount returns the NoteUpdateCount field value
func (o *FullUser) GetNoteUpdateCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NoteUpdateCount
}

// GetNoteUpdateCountOk returns a tuple with the NoteUpdateCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetNoteUpdateCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoteUpdateCount, true
}

// SetNoteUpdateCount sets field value
func (o *FullUser) SetNoteUpdateCount(v float32) {
	o.NoteUpdateCount = v
}

// GetIsBanned returns the IsBanned field value
func (o *FullUser) GetIsBanned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBanned
}

// GetIsBannedOk returns a tuple with the IsBanned field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetIsBannedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBanned, true
}

// SetIsBanned sets field value
func (o *FullUser) SetIsBanned(v bool) {
	o.IsBanned = v
}

// GetCanApprovePosts returns the CanApprovePosts field value
func (o *FullUser) GetCanApprovePosts() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanApprovePosts
}

// GetCanApprovePostsOk returns a tuple with the CanApprovePosts field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetCanApprovePostsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanApprovePosts, true
}

// SetCanApprovePosts sets field value
func (o *FullUser) SetCanApprovePosts(v bool) {
	o.CanApprovePosts = v
}

// GetCanUploadFree returns the CanUploadFree field value
func (o *FullUser) GetCanUploadFree() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanUploadFree
}

// GetCanUploadFreeOk returns a tuple with the CanUploadFree field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetCanUploadFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanUploadFree, true
}

// SetCanUploadFree sets field value
func (o *FullUser) SetCanUploadFree(v bool) {
	o.CanUploadFree = v
}

// GetLevelString returns the LevelString field value
func (o *FullUser) GetLevelString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LevelString
}

// GetLevelStringOk returns a tuple with the LevelString field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetLevelStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LevelString, true
}

// SetLevelString sets field value
func (o *FullUser) SetLevelString(v string) {
	o.LevelString = v
}

// GetAvatarId returns the AvatarId field value
func (o *FullUser) GetAvatarId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AvatarId
}

// GetAvatarIdOk returns a tuple with the AvatarId field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetAvatarIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarId, true
}

// SetAvatarId sets field value
func (o *FullUser) SetAvatarId(v float32) {
	o.AvatarId = v
}

// GetWikiPageVersionCount returns the WikiPageVersionCount field value
func (o *FullUser) GetWikiPageVersionCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WikiPageVersionCount
}

// GetWikiPageVersionCountOk returns a tuple with the WikiPageVersionCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetWikiPageVersionCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WikiPageVersionCount, true
}

// SetWikiPageVersionCount sets field value
func (o *FullUser) SetWikiPageVersionCount(v float32) {
	o.WikiPageVersionCount = v
}

// GetArtistVersionCount returns the ArtistVersionCount field value
func (o *FullUser) GetArtistVersionCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ArtistVersionCount
}

// GetArtistVersionCountOk returns a tuple with the ArtistVersionCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetArtistVersionCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtistVersionCount, true
}

// SetArtistVersionCount sets field value
func (o *FullUser) SetArtistVersionCount(v float32) {
	o.ArtistVersionCount = v
}

// GetPoolVersionCount returns the PoolVersionCount field value
func (o *FullUser) GetPoolVersionCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PoolVersionCount
}

// GetPoolVersionCountOk returns a tuple with the PoolVersionCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetPoolVersionCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolVersionCount, true
}

// SetPoolVersionCount sets field value
func (o *FullUser) SetPoolVersionCount(v float32) {
	o.PoolVersionCount = v
}

// GetForumPostCount returns the ForumPostCount field value
func (o *FullUser) GetForumPostCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ForumPostCount
}

// GetForumPostCountOk returns a tuple with the ForumPostCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetForumPostCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForumPostCount, true
}

// SetForumPostCount sets field value
func (o *FullUser) SetForumPostCount(v float32) {
	o.ForumPostCount = v
}

// GetCommentCount returns the CommentCount field value
func (o *FullUser) GetCommentCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetCommentCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommentCount, true
}

// SetCommentCount sets field value
func (o *FullUser) SetCommentCount(v float32) {
	o.CommentCount = v
}

// GetFlagCount returns the FlagCount field value
func (o *FullUser) GetFlagCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FlagCount
}

// GetFlagCountOk returns a tuple with the FlagCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetFlagCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlagCount, true
}

// SetFlagCount sets field value
func (o *FullUser) SetFlagCount(v float32) {
	o.FlagCount = v
}

// GetFavoriteCount returns the FavoriteCount field value
func (o *FullUser) GetFavoriteCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.FavoriteCount
}

// GetFavoriteCountOk returns a tuple with the FavoriteCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetFavoriteCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FavoriteCount, true
}

// SetFavoriteCount sets field value
func (o *FullUser) SetFavoriteCount(v float32) {
	o.FavoriteCount = v
}

// GetPositiveFeedbackCount returns the PositiveFeedbackCount field value
func (o *FullUser) GetPositiveFeedbackCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PositiveFeedbackCount
}

// GetPositiveFeedbackCountOk returns a tuple with the PositiveFeedbackCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetPositiveFeedbackCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PositiveFeedbackCount, true
}

// SetPositiveFeedbackCount sets field value
func (o *FullUser) SetPositiveFeedbackCount(v float32) {
	o.PositiveFeedbackCount = v
}

// GetNeutralFeedbackCount returns the NeutralFeedbackCount field value
func (o *FullUser) GetNeutralFeedbackCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NeutralFeedbackCount
}

// GetNeutralFeedbackCountOk returns a tuple with the NeutralFeedbackCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetNeutralFeedbackCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NeutralFeedbackCount, true
}

// SetNeutralFeedbackCount sets field value
func (o *FullUser) SetNeutralFeedbackCount(v float32) {
	o.NeutralFeedbackCount = v
}

// GetNegativeFeedbackCount returns the NegativeFeedbackCount field value
func (o *FullUser) GetNegativeFeedbackCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NegativeFeedbackCount
}

// GetNegativeFeedbackCountOk returns a tuple with the NegativeFeedbackCount field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetNegativeFeedbackCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NegativeFeedbackCount, true
}

// SetNegativeFeedbackCount sets field value
func (o *FullUser) SetNegativeFeedbackCount(v float32) {
	o.NegativeFeedbackCount = v
}

// GetUploadLimit returns the UploadLimit field value
func (o *FullUser) GetUploadLimit() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UploadLimit
}

// GetUploadLimitOk returns a tuple with the UploadLimit field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetUploadLimitOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadLimit, true
}

// SetUploadLimit sets field value
func (o *FullUser) SetUploadLimit(v float32) {
	o.UploadLimit = v
}

// GetProfileAbout returns the ProfileAbout field value
func (o *FullUser) GetProfileAbout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileAbout
}

// GetProfileAboutOk returns a tuple with the ProfileAbout field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetProfileAboutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileAbout, true
}

// SetProfileAbout sets field value
func (o *FullUser) SetProfileAbout(v string) {
	o.ProfileAbout = v
}

// GetProfileArtinfo returns the ProfileArtinfo field value
func (o *FullUser) GetProfileArtinfo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProfileArtinfo
}

// GetProfileArtinfoOk returns a tuple with the ProfileArtinfo field value
// and a boolean to check if the value has been set.
func (o *FullUser) GetProfileArtinfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfileArtinfo, true
}

// SetProfileArtinfo sets field value
func (o *FullUser) SetProfileArtinfo(v string) {
	o.ProfileArtinfo = v
}

func (o FullUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FullUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["name"] = o.Name
	toSerialize["level"] = o.Level
	toSerialize["base_upload_limit"] = o.BaseUploadLimit
	toSerialize["post_upload_count"] = o.PostUploadCount
	toSerialize["post_update_count"] = o.PostUpdateCount
	toSerialize["note_update_count"] = o.NoteUpdateCount
	toSerialize["is_banned"] = o.IsBanned
	toSerialize["can_approve_posts"] = o.CanApprovePosts
	toSerialize["can_upload_free"] = o.CanUploadFree
	toSerialize["level_string"] = o.LevelString
	toSerialize["avatar_id"] = o.AvatarId
	toSerialize["wiki_page_version_count"] = o.WikiPageVersionCount
	toSerialize["artist_version_count"] = o.ArtistVersionCount
	toSerialize["pool_version_count"] = o.PoolVersionCount
	toSerialize["forum_post_count"] = o.ForumPostCount
	toSerialize["comment_count"] = o.CommentCount
	toSerialize["flag_count"] = o.FlagCount
	toSerialize["favorite_count"] = o.FavoriteCount
	toSerialize["positive_feedback_count"] = o.PositiveFeedbackCount
	toSerialize["neutral_feedback_count"] = o.NeutralFeedbackCount
	toSerialize["negative_feedback_count"] = o.NegativeFeedbackCount
	toSerialize["upload_limit"] = o.UploadLimit
	toSerialize["profile_about"] = o.ProfileAbout
	toSerialize["profile_artinfo"] = o.ProfileArtinfo
	return toSerialize, nil
}

func (o *FullUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"name",
		"level",
		"base_upload_limit",
		"post_upload_count",
		"post_update_count",
		"note_update_count",
		"is_banned",
		"can_approve_posts",
		"can_upload_free",
		"level_string",
		"avatar_id",
		"wiki_page_version_count",
		"artist_version_count",
		"pool_version_count",
		"forum_post_count",
		"comment_count",
		"flag_count",
		"favorite_count",
		"positive_feedback_count",
		"neutral_feedback_count",
		"negative_feedback_count",
		"upload_limit",
		"profile_about",
		"profile_artinfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFullUser := _FullUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFullUser)

	if err != nil {
		return err
	}

	*o = FullUser(varFullUser)

	return err
}

type NullableFullUser struct {
	value *FullUser
	isSet bool
}

func (v NullableFullUser) Get() *FullUser {
	return v.value
}

func (v *NullableFullUser) Set(val *FullUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFullUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFullUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullUser(val *FullUser) *NullableFullUser {
	return &NullableFullUser{value: val, isSet: true}
}

func (v NullableFullUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


