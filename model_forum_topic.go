/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ForumTopic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumTopic{}

// ForumTopic struct for ForumTopic
type ForumTopic struct {
	Id float32 `json:"id"`
	CreatorId float32 `json:"creator_id"`
	UpdaterId float32 `json:"updater_id"`
	Title string `json:"title"`
	ResponseCount float32 `json:"response_count"`
	IsSticky bool `json:"is_sticky"`
	IsLocked bool `json:"is_locked"`
	IsHidden bool `json:"is_hidden"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CategoryId float32 `json:"category_id"`
}

type _ForumTopic ForumTopic

// NewForumTopic instantiates a new ForumTopic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumTopic(id float32, creatorId float32, updaterId float32, title string, responseCount float32, isSticky bool, isLocked bool, isHidden bool, createdAt time.Time, updatedAt time.Time, categoryId float32) *ForumTopic {
	this := ForumTopic{}
	this.Id = id
	this.CreatorId = creatorId
	this.UpdaterId = updaterId
	this.Title = title
	this.ResponseCount = responseCount
	this.IsSticky = isSticky
	this.IsLocked = isLocked
	this.IsHidden = isHidden
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.CategoryId = categoryId
	return &this
}

// NewForumTopicWithDefaults instantiates a new ForumTopic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumTopicWithDefaults() *ForumTopic {
	this := ForumTopic{}
	return &this
}

// GetId returns the Id field value
func (o *ForumTopic) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ForumTopic) SetId(v float32) {
	o.Id = v
}

// GetCreatorId returns the CreatorId field value
func (o *ForumTopic) GetCreatorId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetCreatorIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *ForumTopic) SetCreatorId(v float32) {
	o.CreatorId = v
}

// GetUpdaterId returns the UpdaterId field value
func (o *ForumTopic) GetUpdaterId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UpdaterId
}

// GetUpdaterIdOk returns a tuple with the UpdaterId field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetUpdaterIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdaterId, true
}

// SetUpdaterId sets field value
func (o *ForumTopic) SetUpdaterId(v float32) {
	o.UpdaterId = v
}

// GetTitle returns the Title field value
func (o *ForumTopic) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ForumTopic) SetTitle(v string) {
	o.Title = v
}

// GetResponseCount returns the ResponseCount field value
func (o *ForumTopic) GetResponseCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ResponseCount
}

// GetResponseCountOk returns a tuple with the ResponseCount field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetResponseCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseCount, true
}

// SetResponseCount sets field value
func (o *ForumTopic) SetResponseCount(v float32) {
	o.ResponseCount = v
}

// GetIsSticky returns the IsSticky field value
func (o *ForumTopic) GetIsSticky() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSticky
}

// GetIsStickyOk returns a tuple with the IsSticky field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetIsStickyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSticky, true
}

// SetIsSticky sets field value
func (o *ForumTopic) SetIsSticky(v bool) {
	o.IsSticky = v
}

// GetIsLocked returns the IsLocked field value
func (o *ForumTopic) GetIsLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetIsLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLocked, true
}

// SetIsLocked sets field value
func (o *ForumTopic) SetIsLocked(v bool) {
	o.IsLocked = v
}

// GetIsHidden returns the IsHidden field value
func (o *ForumTopic) GetIsHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetIsHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsHidden, true
}

// SetIsHidden sets field value
func (o *ForumTopic) SetIsHidden(v bool) {
	o.IsHidden = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ForumTopic) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ForumTopic) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ForumTopic) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ForumTopic) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCategoryId returns the CategoryId field value
func (o *ForumTopic) GetCategoryId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *ForumTopic) GetCategoryIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *ForumTopic) SetCategoryId(v float32) {
	o.CategoryId = v
}

func (o ForumTopic) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumTopic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["updater_id"] = o.UpdaterId
	toSerialize["title"] = o.Title
	toSerialize["response_count"] = o.ResponseCount
	toSerialize["is_sticky"] = o.IsSticky
	toSerialize["is_locked"] = o.IsLocked
	toSerialize["is_hidden"] = o.IsHidden
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["category_id"] = o.CategoryId
	return toSerialize, nil
}

func (o *ForumTopic) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"creator_id",
		"updater_id",
		"title",
		"response_count",
		"is_sticky",
		"is_locked",
		"is_hidden",
		"created_at",
		"updated_at",
		"category_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varForumTopic := _ForumTopic{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varForumTopic)

	if err != nil {
		return err
	}

	*o = ForumTopic(varForumTopic)

	return err
}

type NullableForumTopic struct {
	value *ForumTopic
	isSet bool
}

func (v NullableForumTopic) Get() *ForumTopic {
	return v.value
}

func (v *NullableForumTopic) Set(val *ForumTopic) {
	v.value = val
	v.isSet = true
}

func (v NullableForumTopic) IsSet() bool {
	return v.isSet
}

func (v *NullableForumTopic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumTopic(val *ForumTopic) *NullableForumTopic {
	return &NullableForumTopic{value: val, isSet: true}
}

func (v NullableForumTopic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumTopic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


