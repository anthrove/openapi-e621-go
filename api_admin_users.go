/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AdminUsersAPIService AdminUsersAPI service
type AdminUsersAPIService service

type ApiAdminEditUserRequest struct {
	ctx context.Context
	ApiService *AdminUsersAPIService
	id float32
	userVerified *bool
	userLevel *float32
	userName *string
	userProfileAbout *string
	userProfileArtinfo *string
	userBaseUploadLimit *float32
	userEnablePrivacyMode *bool
	userEmail *string
	userCanApprovePosts *bool
	userCanUploadFree *bool
	userNoFlagging *bool
	userReplacementsBeta *bool
}

// Must have the bd staff user flag to use.
func (r ApiAdminEditUserRequest) UserVerified(userVerified bool) ApiAdminEditUserRequest {
	r.userVerified = &userVerified
	return r
}

// Must have the bd staff user flag to promote to Admin+.
func (r ApiAdminEditUserRequest) UserLevel(userLevel float32) ApiAdminEditUserRequest {
	r.userLevel = &userLevel
	return r
}

func (r ApiAdminEditUserRequest) UserName(userName string) ApiAdminEditUserRequest {
	r.userName = &userName
	return r
}

func (r ApiAdminEditUserRequest) UserProfileAbout(userProfileAbout string) ApiAdminEditUserRequest {
	r.userProfileAbout = &userProfileAbout
	return r
}

func (r ApiAdminEditUserRequest) UserProfileArtinfo(userProfileArtinfo string) ApiAdminEditUserRequest {
	r.userProfileArtinfo = &userProfileArtinfo
	return r
}

func (r ApiAdminEditUserRequest) UserBaseUploadLimit(userBaseUploadLimit float32) ApiAdminEditUserRequest {
	r.userBaseUploadLimit = &userBaseUploadLimit
	return r
}

func (r ApiAdminEditUserRequest) UserEnablePrivacyMode(userEnablePrivacyMode bool) ApiAdminEditUserRequest {
	r.userEnablePrivacyMode = &userEnablePrivacyMode
	return r
}

// Must have the bd staff user flag to use.
func (r ApiAdminEditUserRequest) UserEmail(userEmail string) ApiAdminEditUserRequest {
	r.userEmail = &userEmail
	return r
}

func (r ApiAdminEditUserRequest) UserCanApprovePosts(userCanApprovePosts bool) ApiAdminEditUserRequest {
	r.userCanApprovePosts = &userCanApprovePosts
	return r
}

func (r ApiAdminEditUserRequest) UserCanUploadFree(userCanUploadFree bool) ApiAdminEditUserRequest {
	r.userCanUploadFree = &userCanUploadFree
	return r
}

func (r ApiAdminEditUserRequest) UserNoFlagging(userNoFlagging bool) ApiAdminEditUserRequest {
	r.userNoFlagging = &userNoFlagging
	return r
}

func (r ApiAdminEditUserRequest) UserReplacementsBeta(userReplacementsBeta bool) ApiAdminEditUserRequest {
	r.userReplacementsBeta = &userReplacementsBeta
	return r
}

func (r ApiAdminEditUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminEditUserExecute(r)
}

/*
AdminEditUser Admin Edit User

You must be Admin+. If editing an Admin+, you must be Owner+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the user.
 @return ApiAdminEditUserRequest
*/
func (a *AdminUsersAPIService) AdminEditUser(ctx context.Context, id float32) ApiAdminEditUserRequest {
	return ApiAdminEditUserRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AdminUsersAPIService) AdminEditUserExecute(r ApiAdminEditUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersAPIService.AdminEditUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admins/users/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.userVerified != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[verified]", r.userVerified, "")
	}
	if r.userLevel != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[level]", r.userLevel, "")
	}
	if r.userName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[name]", r.userName, "")
	}
	if r.userProfileAbout != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[profile_about]", r.userProfileAbout, "")
	}
	if r.userProfileArtinfo != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[profile_artinfo]", r.userProfileArtinfo, "")
	}
	if r.userBaseUploadLimit != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[base_upload_limit]", r.userBaseUploadLimit, "")
	}
	if r.userEnablePrivacyMode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[enable_privacy_mode]", r.userEnablePrivacyMode, "")
	}
	if r.userEmail != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[email]", r.userEmail, "")
	}
	if r.userCanApprovePosts != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[can_approve_posts]", r.userCanApprovePosts, "")
	}
	if r.userCanUploadFree != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[can_upload_free]", r.userCanUploadFree, "")
	}
	if r.userNoFlagging != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[no_flagging]", r.userNoFlagging, "")
	}
	if r.userReplacementsBeta != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "user[replacements_beta]", r.userReplacementsBeta, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAltListRequest struct {
	ctx context.Context
	ApiService *AdminUsersAPIService
	page *float32
}

// The page number of results to get. Between 1 and 9999.
func (r ApiGetAltListRequest) Page(page float32) ApiGetAltListRequest {
	r.page = &page
	return r
}

func (r ApiGetAltListRequest) Execute() ([]GetAltList200ResponseInner, *http.Response, error) {
	return r.ApiService.GetAltListExecute(r)
}

/*
GetAltList Get Alt List

You must be Admin+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAltListRequest
*/
func (a *AdminUsersAPIService) GetAltList(ctx context.Context) ApiGetAltListRequest {
	return ApiGetAltListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GetAltList200ResponseInner
func (a *AdminUsersAPIService) GetAltListExecute(r ApiGetAltListRequest) ([]GetAltList200ResponseInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GetAltList200ResponseInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersAPIService.GetAltList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/users/alt_list.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
