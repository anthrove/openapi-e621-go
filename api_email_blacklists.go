/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EmailBlacklistsAPIService EmailBlacklistsAPI service
type EmailBlacklistsAPIService service

type EmailBlacklistsAPICreateEmailBlacklistRequest struct {
	ctx                  context.Context
	ApiService           *EmailBlacklistsAPIService
	emailBlacklistDomain *string
	emailBlacklistReason *string
}

func (r EmailBlacklistsAPICreateEmailBlacklistRequest) EmailBlacklistDomain(emailBlacklistDomain string) EmailBlacklistsAPICreateEmailBlacklistRequest {
	r.emailBlacklistDomain = &emailBlacklistDomain
	return r
}

func (r EmailBlacklistsAPICreateEmailBlacklistRequest) EmailBlacklistReason(emailBlacklistReason string) EmailBlacklistsAPICreateEmailBlacklistRequest {
	r.emailBlacklistReason = &emailBlacklistReason
	return r
}

func (r EmailBlacklistsAPICreateEmailBlacklistRequest) Execute() (*EmailBlacklist, *http.Response, error) {
	return r.ApiService.CreateEmailBlacklistExecute(r)
}

/*
CreateEmailBlacklist Create Email Blacklist

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EmailBlacklistsAPICreateEmailBlacklistRequest
*/
func (a *EmailBlacklistsAPIService) CreateEmailBlacklist(ctx context.Context) EmailBlacklistsAPICreateEmailBlacklistRequest {
	return EmailBlacklistsAPICreateEmailBlacklistRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EmailBlacklist
func (a *EmailBlacklistsAPIService) CreateEmailBlacklistExecute(r EmailBlacklistsAPICreateEmailBlacklistRequest) (*EmailBlacklist, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmailBlacklist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailBlacklistsAPIService.CreateEmailBlacklist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/email_blacklists.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailBlacklistDomain == nil {
		return localVarReturnValue, nil, reportError("emailBlacklistDomain is required and must be specified")
	}
	if r.emailBlacklistReason == nil {
		return localVarReturnValue, nil, reportError("emailBlacklistReason is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "email_blacklist[domain]", r.emailBlacklistDomain, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "email_blacklist[reason]", r.emailBlacklistReason, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EmailBlacklistsAPIDeleteEmailBlacklistRequest struct {
	ctx        context.Context
	ApiService *EmailBlacklistsAPIService
	id         float32
}

func (r EmailBlacklistsAPIDeleteEmailBlacklistRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteEmailBlacklistExecute(r)
}

/*
DeleteEmailBlacklist Delete Email Blacklist

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the email blacklist.
	@return EmailBlacklistsAPIDeleteEmailBlacklistRequest
*/
func (a *EmailBlacklistsAPIService) DeleteEmailBlacklist(ctx context.Context, id float32) EmailBlacklistsAPIDeleteEmailBlacklistRequest {
	return EmailBlacklistsAPIDeleteEmailBlacklistRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EmailBlacklistsAPIService) DeleteEmailBlacklistExecute(r EmailBlacklistsAPIDeleteEmailBlacklistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailBlacklistsAPIService.DeleteEmailBlacklist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/email_blacklists/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EmailBlacklistsAPISearchEmailBlacklistsRequest struct {
	ctx          context.Context
	ApiService   *EmailBlacklistsAPIService
	limit        *int32
	page         *int32
	searchId     *int32
	searchOrder  *string
	searchDomain *string
	searchReason *string
}

// The maximum number of results to return. Between 0 and 320.
func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) Limit(limit int32) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) Page(page int32) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) SearchId(searchId int32) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	r.searchId = &searchId
	return r
}

func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) SearchOrder(searchOrder string) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) SearchDomain(searchDomain string) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	r.searchDomain = &searchDomain
	return r
}

func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) SearchReason(searchReason string) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	r.searchReason = &searchReason
	return r
}

func (r EmailBlacklistsAPISearchEmailBlacklistsRequest) Execute() (*SearchEmailBlacklists200Response, *http.Response, error) {
	return r.ApiService.SearchEmailBlacklistsExecute(r)
}

/*
SearchEmailBlacklists Search Email Blacklists

You must be Admin+. When no results are found, an object with an `email_blacklists` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return EmailBlacklistsAPISearchEmailBlacklistsRequest
*/
func (a *EmailBlacklistsAPIService) SearchEmailBlacklists(ctx context.Context) EmailBlacklistsAPISearchEmailBlacklistsRequest {
	return EmailBlacklistsAPISearchEmailBlacklistsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchEmailBlacklists200Response
func (a *EmailBlacklistsAPIService) SearchEmailBlacklistsExecute(r EmailBlacklistsAPISearchEmailBlacklistsRequest) (*SearchEmailBlacklists200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchEmailBlacklists200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailBlacklistsAPIService.SearchEmailBlacklists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/email_blacklists.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchDomain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[domain]", r.searchDomain, "")
	}
	if r.searchReason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[reason]", r.searchReason, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
