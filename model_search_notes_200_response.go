/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SearchNotes200Response struct for SearchNotes200Response
type SearchNotes200Response struct {
	SearchNotes200ResponseAnyOf *SearchNotes200ResponseAnyOf
	ArrayOfNote                 *[]Note
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SearchNotes200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SearchNotes200ResponseAnyOf
	err = json.Unmarshal(data, &dst.SearchNotes200ResponseAnyOf)
	if err == nil {
		jsonSearchNotes200ResponseAnyOf, _ := json.Marshal(dst.SearchNotes200ResponseAnyOf)
		if string(jsonSearchNotes200ResponseAnyOf) == "{}" { // empty struct
			dst.SearchNotes200ResponseAnyOf = nil
		} else {
			return nil // data stored in dst.SearchNotes200ResponseAnyOf, return on the first match
		}
	} else {
		dst.SearchNotes200ResponseAnyOf = nil
	}

	// try to unmarshal JSON data into ArrayOfNote
	err = json.Unmarshal(data, &dst.ArrayOfNote)
	if err == nil {
		jsonArrayOfNote, _ := json.Marshal(dst.ArrayOfNote)
		if string(jsonArrayOfNote) == "{}" { // empty struct
			dst.ArrayOfNote = nil
		} else {
			return nil // data stored in dst.ArrayOfNote, return on the first match
		}
	} else {
		dst.ArrayOfNote = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SearchNotes200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SearchNotes200Response) MarshalJSON() ([]byte, error) {
	if src.SearchNotes200ResponseAnyOf != nil {
		return json.Marshal(&src.SearchNotes200ResponseAnyOf)
	}

	if src.ArrayOfNote != nil {
		return json.Marshal(&src.ArrayOfNote)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSearchNotes200Response struct {
	value *SearchNotes200Response
	isSet bool
}

func (v NullableSearchNotes200Response) Get() *SearchNotes200Response {
	return v.value
}

func (v *NullableSearchNotes200Response) Set(val *SearchNotes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchNotes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchNotes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchNotes200Response(val *SearchNotes200Response) *NullableSearchNotes200Response {
	return &NullableSearchNotes200Response{value: val, isSet: true}
}

func (v NullableSearchNotes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchNotes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
