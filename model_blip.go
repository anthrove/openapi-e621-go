/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Blip type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Blip{}

// Blip struct for Blip
type Blip struct {
	Id float32 `json:"id"`
	CreatorId float32 `json:"creator_id"`
	Body string `json:"body"`
	ResponseTo float32 `json:"response_to"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	IsHidden bool `json:"is_hidden"`
	WarningType WarningTypes `json:"warning_type"`
	WarningUserId float32 `json:"warning_user_id"`
	UpdaterId float32 `json:"updater_id"`
	CreatorName string `json:"creator_name"`
}

type _Blip Blip

// NewBlip instantiates a new Blip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlip(id float32, creatorId float32, body string, responseTo float32, createdAt time.Time, updatedAt time.Time, isHidden bool, warningType WarningTypes, warningUserId float32, updaterId float32, creatorName string) *Blip {
	this := Blip{}
	this.Id = id
	this.CreatorId = creatorId
	this.Body = body
	this.ResponseTo = responseTo
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.IsHidden = isHidden
	this.WarningType = warningType
	this.WarningUserId = warningUserId
	this.UpdaterId = updaterId
	this.CreatorName = creatorName
	return &this
}

// NewBlipWithDefaults instantiates a new Blip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlipWithDefaults() *Blip {
	this := Blip{}
	return &this
}

// GetId returns the Id field value
func (o *Blip) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Blip) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Blip) SetId(v float32) {
	o.Id = v
}

// GetCreatorId returns the CreatorId field value
func (o *Blip) GetCreatorId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *Blip) GetCreatorIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *Blip) SetCreatorId(v float32) {
	o.CreatorId = v
}

// GetBody returns the Body field value
func (o *Blip) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *Blip) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *Blip) SetBody(v string) {
	o.Body = v
}

// GetResponseTo returns the ResponseTo field value
func (o *Blip) GetResponseTo() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ResponseTo
}

// GetResponseToOk returns a tuple with the ResponseTo field value
// and a boolean to check if the value has been set.
func (o *Blip) GetResponseToOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResponseTo, true
}

// SetResponseTo sets field value
func (o *Blip) SetResponseTo(v float32) {
	o.ResponseTo = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Blip) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Blip) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Blip) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Blip) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Blip) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Blip) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIsHidden returns the IsHidden field value
func (o *Blip) GetIsHidden() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value
// and a boolean to check if the value has been set.
func (o *Blip) GetIsHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsHidden, true
}

// SetIsHidden sets field value
func (o *Blip) SetIsHidden(v bool) {
	o.IsHidden = v
}

// GetWarningType returns the WarningType field value
func (o *Blip) GetWarningType() WarningTypes {
	if o == nil {
		var ret WarningTypes
		return ret
	}

	return o.WarningType
}

// GetWarningTypeOk returns a tuple with the WarningType field value
// and a boolean to check if the value has been set.
func (o *Blip) GetWarningTypeOk() (*WarningTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarningType, true
}

// SetWarningType sets field value
func (o *Blip) SetWarningType(v WarningTypes) {
	o.WarningType = v
}

// GetWarningUserId returns the WarningUserId field value
func (o *Blip) GetWarningUserId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.WarningUserId
}

// GetWarningUserIdOk returns a tuple with the WarningUserId field value
// and a boolean to check if the value has been set.
func (o *Blip) GetWarningUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarningUserId, true
}

// SetWarningUserId sets field value
func (o *Blip) SetWarningUserId(v float32) {
	o.WarningUserId = v
}

// GetUpdaterId returns the UpdaterId field value
func (o *Blip) GetUpdaterId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UpdaterId
}

// GetUpdaterIdOk returns a tuple with the UpdaterId field value
// and a boolean to check if the value has been set.
func (o *Blip) GetUpdaterIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdaterId, true
}

// SetUpdaterId sets field value
func (o *Blip) SetUpdaterId(v float32) {
	o.UpdaterId = v
}

// GetCreatorName returns the CreatorName field value
func (o *Blip) GetCreatorName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatorName
}

// GetCreatorNameOk returns a tuple with the CreatorName field value
// and a boolean to check if the value has been set.
func (o *Blip) GetCreatorNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorName, true
}

// SetCreatorName sets field value
func (o *Blip) SetCreatorName(v string) {
	o.CreatorName = v
}

func (o Blip) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Blip) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["body"] = o.Body
	toSerialize["response_to"] = o.ResponseTo
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["is_hidden"] = o.IsHidden
	toSerialize["warning_type"] = o.WarningType
	toSerialize["warning_user_id"] = o.WarningUserId
	toSerialize["updater_id"] = o.UpdaterId
	toSerialize["creator_name"] = o.CreatorName
	return toSerialize, nil
}

func (o *Blip) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"creator_id",
		"body",
		"response_to",
		"created_at",
		"updated_at",
		"is_hidden",
		"warning_type",
		"warning_user_id",
		"updater_id",
		"creator_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBlip := _Blip{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBlip)

	if err != nil {
		return err
	}

	*o = Blip(varBlip)

	return err
}

type NullableBlip struct {
	value *Blip
	isSet bool
}

func (v NullableBlip) Get() *Blip {
	return v.value
}

func (v *NullableBlip) Set(val *Blip) {
	v.value = val
	v.isSet = true
}

func (v NullableBlip) IsSet() bool {
	return v.isSet
}

func (v *NullableBlip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlip(val *Blip) *NullableBlip {
	return &NullableBlip{value: val, isSet: true}
}

func (v NullableBlip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


