/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the NewsUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewsUpdate{}

// NewsUpdate struct for NewsUpdate
type NewsUpdate struct {
	Id        int32     `json:"id"`
	Message   string    `json:"message"`
	CreatorId int32     `json:"creator_id"`
	UpdaterId int32     `json:"updater_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type _NewsUpdate NewsUpdate

// NewNewsUpdate instantiates a new NewsUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsUpdate(id int32, message string, creatorId int32, updaterId int32, createdAt time.Time, updatedAt time.Time) *NewsUpdate {
	this := NewsUpdate{}
	this.Id = id
	this.Message = message
	this.CreatorId = creatorId
	this.UpdaterId = updaterId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewNewsUpdateWithDefaults instantiates a new NewsUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsUpdateWithDefaults() *NewsUpdate {
	this := NewsUpdate{}
	return &this
}

// GetId returns the Id field value
func (o *NewsUpdate) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NewsUpdate) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NewsUpdate) SetId(v int32) {
	o.Id = v
}

// GetMessage returns the Message field value
func (o *NewsUpdate) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *NewsUpdate) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *NewsUpdate) SetMessage(v string) {
	o.Message = v
}

// GetCreatorId returns the CreatorId field value
func (o *NewsUpdate) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *NewsUpdate) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *NewsUpdate) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetUpdaterId returns the UpdaterId field value
func (o *NewsUpdate) GetUpdaterId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdaterId
}

// GetUpdaterIdOk returns a tuple with the UpdaterId field value
// and a boolean to check if the value has been set.
func (o *NewsUpdate) GetUpdaterIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdaterId, true
}

// SetUpdaterId sets field value
func (o *NewsUpdate) SetUpdaterId(v int32) {
	o.UpdaterId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *NewsUpdate) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NewsUpdate) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NewsUpdate) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *NewsUpdate) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *NewsUpdate) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *NewsUpdate) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o NewsUpdate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewsUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["message"] = o.Message
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["updater_id"] = o.UpdaterId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *NewsUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"message",
		"creator_id",
		"updater_id",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNewsUpdate := _NewsUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNewsUpdate)

	if err != nil {
		return err
	}

	*o = NewsUpdate(varNewsUpdate)

	return err
}

type NullableNewsUpdate struct {
	value *NewsUpdate
	isSet bool
}

func (v NullableNewsUpdate) Get() *NewsUpdate {
	return v.value
}

func (v *NullableNewsUpdate) Set(val *NewsUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsUpdate(val *NewsUpdate) *NullableNewsUpdate {
	return &NullableNewsUpdate{value: val, isSet: true}
}

func (v NullableNewsUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
