/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BulkUpdateRequestsAPIService BulkUpdateRequestsAPI service
type BulkUpdateRequestsAPIService service

type BulkUpdateRequestsAPIApproveBulkUpdateRequestRequest struct {
	ctx        context.Context
	ApiService *BulkUpdateRequestsAPIService
	id         float32
}

func (r BulkUpdateRequestsAPIApproveBulkUpdateRequestRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApproveBulkUpdateRequestExecute(r)
}

/*
ApproveBulkUpdateRequest Approve Bulk Update Request

Must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the bulk update request.
	@return BulkUpdateRequestsAPIApproveBulkUpdateRequestRequest
*/
func (a *BulkUpdateRequestsAPIService) ApproveBulkUpdateRequest(ctx context.Context, id float32) BulkUpdateRequestsAPIApproveBulkUpdateRequestRequest {
	return BulkUpdateRequestsAPIApproveBulkUpdateRequestRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BulkUpdateRequestsAPIService) ApproveBulkUpdateRequestExecute(r BulkUpdateRequestsAPIApproveBulkUpdateRequestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkUpdateRequestsAPIService.ApproveBulkUpdateRequest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulk_update_request/{id}/approve.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BulkUpdateRequestsAPICreateBulkUpdateRequestRequest struct {
	ctx                           context.Context
	ApiService                    *BulkUpdateRequestsAPIService
	bulkUpdateRequestScript       *string
	bulkUpdateRequestTitle        *string
	bulkUpdateRequestReason       *string
	bulkUpdateRequestForumTopicId *float32
	bulkUpdateRequestSkipForum    *bool
}

func (r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) BulkUpdateRequestScript(bulkUpdateRequestScript string) BulkUpdateRequestsAPICreateBulkUpdateRequestRequest {
	r.bulkUpdateRequestScript = &bulkUpdateRequestScript
	return r
}

func (r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) BulkUpdateRequestTitle(bulkUpdateRequestTitle string) BulkUpdateRequestsAPICreateBulkUpdateRequestRequest {
	r.bulkUpdateRequestTitle = &bulkUpdateRequestTitle
	return r
}

func (r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) BulkUpdateRequestReason(bulkUpdateRequestReason string) BulkUpdateRequestsAPICreateBulkUpdateRequestRequest {
	r.bulkUpdateRequestReason = &bulkUpdateRequestReason
	return r
}

func (r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) BulkUpdateRequestForumTopicId(bulkUpdateRequestForumTopicId float32) BulkUpdateRequestsAPICreateBulkUpdateRequestRequest {
	r.bulkUpdateRequestForumTopicId = &bulkUpdateRequestForumTopicId
	return r
}

// Only usable for Admin+
func (r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) BulkUpdateRequestSkipForum(bulkUpdateRequestSkipForum bool) BulkUpdateRequestsAPICreateBulkUpdateRequestRequest {
	r.bulkUpdateRequestSkipForum = &bulkUpdateRequestSkipForum
	return r
}

func (r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) Execute() (*BulkUpdateRequest, *http.Response, error) {
	return r.ApiService.CreateBulkUpdateRequestExecute(r)
}

/*
CreateBulkUpdateRequest Create Bulk Update Request

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BulkUpdateRequestsAPICreateBulkUpdateRequestRequest
*/
func (a *BulkUpdateRequestsAPIService) CreateBulkUpdateRequest(ctx context.Context) BulkUpdateRequestsAPICreateBulkUpdateRequestRequest {
	return BulkUpdateRequestsAPICreateBulkUpdateRequestRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BulkUpdateRequest
func (a *BulkUpdateRequestsAPIService) CreateBulkUpdateRequestExecute(r BulkUpdateRequestsAPICreateBulkUpdateRequestRequest) (*BulkUpdateRequest, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BulkUpdateRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkUpdateRequestsAPIService.CreateBulkUpdateRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulk_update_requests.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bulkUpdateRequestScript == nil {
		return localVarReturnValue, nil, reportError("bulkUpdateRequestScript is required and must be specified")
	}
	if r.bulkUpdateRequestTitle == nil {
		return localVarReturnValue, nil, reportError("bulkUpdateRequestTitle is required and must be specified")
	}
	if r.bulkUpdateRequestReason == nil {
		return localVarReturnValue, nil, reportError("bulkUpdateRequestReason is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[script]", r.bulkUpdateRequestScript, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[title]", r.bulkUpdateRequestTitle, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[reason]", r.bulkUpdateRequestReason, "")
	if r.bulkUpdateRequestForumTopicId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[forum_topic_id]", r.bulkUpdateRequestForumTopicId, "")
	}
	if r.bulkUpdateRequestSkipForum != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[skip_forum]", r.bulkUpdateRequestSkipForum, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BulkUpdateRequestsAPIEditBulkUpdateRequestRequest struct {
	ctx                           context.Context
	ApiService                    *BulkUpdateRequestsAPIService
	id                            float32
	bulkUpdateRequestScript       *string
	bulkUpdateRequestForumTopicId *string
	bulkUpdateRequestForumPostId  *string
}

func (r BulkUpdateRequestsAPIEditBulkUpdateRequestRequest) BulkUpdateRequestScript(bulkUpdateRequestScript string) BulkUpdateRequestsAPIEditBulkUpdateRequestRequest {
	r.bulkUpdateRequestScript = &bulkUpdateRequestScript
	return r
}

// You must be Admin+.
func (r BulkUpdateRequestsAPIEditBulkUpdateRequestRequest) BulkUpdateRequestForumTopicId(bulkUpdateRequestForumTopicId string) BulkUpdateRequestsAPIEditBulkUpdateRequestRequest {
	r.bulkUpdateRequestForumTopicId = &bulkUpdateRequestForumTopicId
	return r
}

// You must be Admin+.
func (r BulkUpdateRequestsAPIEditBulkUpdateRequestRequest) BulkUpdateRequestForumPostId(bulkUpdateRequestForumPostId string) BulkUpdateRequestsAPIEditBulkUpdateRequestRequest {
	r.bulkUpdateRequestForumPostId = &bulkUpdateRequestForumPostId
	return r
}

func (r BulkUpdateRequestsAPIEditBulkUpdateRequestRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditBulkUpdateRequestExecute(r)
}

/*
EditBulkUpdateRequest Edit Bulk Update Request

You must be the creator of the BUR, or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the bulk update request.
	@return BulkUpdateRequestsAPIEditBulkUpdateRequestRequest
*/
func (a *BulkUpdateRequestsAPIService) EditBulkUpdateRequest(ctx context.Context, id float32) BulkUpdateRequestsAPIEditBulkUpdateRequestRequest {
	return BulkUpdateRequestsAPIEditBulkUpdateRequestRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BulkUpdateRequestsAPIService) EditBulkUpdateRequestExecute(r BulkUpdateRequestsAPIEditBulkUpdateRequestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkUpdateRequestsAPIService.EditBulkUpdateRequest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulk_update_request/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.bulkUpdateRequestScript != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[script]", r.bulkUpdateRequestScript, "")
	}
	if r.bulkUpdateRequestForumTopicId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[forum_topic_id]", r.bulkUpdateRequestForumTopicId, "")
	}
	if r.bulkUpdateRequestForumPostId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "bulk_update_request[forum_post_id]", r.bulkUpdateRequestForumPostId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BulkUpdateRequestsAPIGetBulkUpdateRequestRequest struct {
	ctx        context.Context
	ApiService *BulkUpdateRequestsAPIService
	id         float32
}

func (r BulkUpdateRequestsAPIGetBulkUpdateRequestRequest) Execute() (*BulkUpdateRequest, *http.Response, error) {
	return r.ApiService.GetBulkUpdateRequestExecute(r)
}

/*
GetBulkUpdateRequest Get Bulk Update Request

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the bulk update request.
	@return BulkUpdateRequestsAPIGetBulkUpdateRequestRequest
*/
func (a *BulkUpdateRequestsAPIService) GetBulkUpdateRequest(ctx context.Context, id float32) BulkUpdateRequestsAPIGetBulkUpdateRequestRequest {
	return BulkUpdateRequestsAPIGetBulkUpdateRequestRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BulkUpdateRequest
func (a *BulkUpdateRequestsAPIService) GetBulkUpdateRequestExecute(r BulkUpdateRequestsAPIGetBulkUpdateRequestRequest) (*BulkUpdateRequest, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BulkUpdateRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkUpdateRequestsAPIService.GetBulkUpdateRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulk_update_request/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BulkUpdateRequestsAPIRejectBulkUpdateRequestRequest struct {
	ctx        context.Context
	ApiService *BulkUpdateRequestsAPIService
	id         float32
}

func (r BulkUpdateRequestsAPIRejectBulkUpdateRequestRequest) Execute() (*http.Response, error) {
	return r.ApiService.RejectBulkUpdateRequestExecute(r)
}

/*
RejectBulkUpdateRequest Reject Bulk Update Request

You must be the creator of the BUR, or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the bulk update request.
	@return BulkUpdateRequestsAPIRejectBulkUpdateRequestRequest
*/
func (a *BulkUpdateRequestsAPIService) RejectBulkUpdateRequest(ctx context.Context, id float32) BulkUpdateRequestsAPIRejectBulkUpdateRequestRequest {
	return BulkUpdateRequestsAPIRejectBulkUpdateRequestRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BulkUpdateRequestsAPIService) RejectBulkUpdateRequestExecute(r BulkUpdateRequestsAPIRejectBulkUpdateRequestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkUpdateRequestsAPIService.RejectBulkUpdateRequest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulk_update_request/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest struct {
	ctx                 context.Context
	ApiService          *BulkUpdateRequestsAPIService
	limit               *int32
	page                *int32
	searchId            *int32
	searchOrder         *string
	searchUserId        *float32
	searchUserName      *string
	searchApproverId    *float32
	searchApproverName  *string
	searchForumTopicId  *float32
	searchForumPostId   *float32
	searchStatus        *string
	searchTitleMatches  *string
	searchScriptMatches *string
}

// The maximum number of results to return. Between 0 and 320.
func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) Limit(limit int32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) Page(page int32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchId(searchId int32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchId = &searchId
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchOrder(searchOrder string) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchUserId(searchUserId float32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchUserId = &searchUserId
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchUserName(searchUserName string) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchUserName = &searchUserName
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchApproverId(searchApproverId float32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchApproverId = &searchApproverId
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchApproverName(searchApproverName string) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchApproverName = &searchApproverName
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchForumTopicId(searchForumTopicId float32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchForumTopicId = &searchForumTopicId
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchForumPostId(searchForumPostId float32) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchForumPostId = &searchForumPostId
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchStatus(searchStatus string) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchStatus = &searchStatus
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchTitleMatches(searchTitleMatches string) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchTitleMatches = &searchTitleMatches
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) SearchScriptMatches(searchScriptMatches string) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	r.searchScriptMatches = &searchScriptMatches
	return r
}

func (r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) Execute() (*SearchBulkUpdateRequests200Response, *http.Response, error) {
	return r.ApiService.SearchBulkUpdateRequestsExecute(r)
}

/*
SearchBulkUpdateRequests Search Bulk Update Requests

When no results are found, an object with an `bulk_update_requests` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest
*/
func (a *BulkUpdateRequestsAPIService) SearchBulkUpdateRequests(ctx context.Context) BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest {
	return BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchBulkUpdateRequests200Response
func (a *BulkUpdateRequestsAPIService) SearchBulkUpdateRequestsExecute(r BulkUpdateRequestsAPISearchBulkUpdateRequestsRequest) (*SearchBulkUpdateRequests200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchBulkUpdateRequests200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BulkUpdateRequestsAPIService.SearchBulkUpdateRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/bulk_update_requests.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchUserId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[user_id]", r.searchUserId, "")
	}
	if r.searchUserName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[user_name]", r.searchUserName, "")
	}
	if r.searchApproverId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[approver_id]", r.searchApproverId, "")
	}
	if r.searchApproverName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[approver_name]", r.searchApproverName, "")
	}
	if r.searchForumTopicId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[forum_topic_id]", r.searchForumTopicId, "")
	}
	if r.searchForumPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[forum_post_id]", r.searchForumPostId, "")
	}
	if r.searchStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[status]", r.searchStatus, "")
	}
	if r.searchTitleMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title_matches]", r.searchTitleMatches, "")
	}
	if r.searchScriptMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[script_matches]", r.searchScriptMatches, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
