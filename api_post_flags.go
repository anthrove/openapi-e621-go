/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PostFlagsAPIService PostFlagsAPI service
type PostFlagsAPIService service

type PostFlagsAPICreatePostFlagRequest struct {
	ctx                context.Context
	ApiService         *PostFlagsAPIService
	postFlagPostId     *int32
	postFlagReasonName *string
	postFlagParentId   *int32
}

func (r PostFlagsAPICreatePostFlagRequest) PostFlagPostId(postFlagPostId int32) PostFlagsAPICreatePostFlagRequest {
	r.postFlagPostId = &postFlagPostId
	return r
}

func (r PostFlagsAPICreatePostFlagRequest) PostFlagReasonName(postFlagReasonName string) PostFlagsAPICreatePostFlagRequest {
	r.postFlagReasonName = &postFlagReasonName
	return r
}

func (r PostFlagsAPICreatePostFlagRequest) PostFlagParentId(postFlagParentId int32) PostFlagsAPICreatePostFlagRequest {
	r.postFlagParentId = &postFlagParentId
	return r
}

func (r PostFlagsAPICreatePostFlagRequest) Execute() (*PostFlag, *http.Response, error) {
	return r.ApiService.CreatePostFlagExecute(r)
}

/*
CreatePostFlag Create Post Flag

Will error if post_id is not provided.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostFlagsAPICreatePostFlagRequest
*/
func (a *PostFlagsAPIService) CreatePostFlag(ctx context.Context) PostFlagsAPICreatePostFlagRequest {
	return PostFlagsAPICreatePostFlagRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PostFlag
func (a *PostFlagsAPIService) CreatePostFlagExecute(r PostFlagsAPICreatePostFlagRequest) (*PostFlag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostFlag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostFlagsAPIService.CreatePostFlag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_flags.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postFlagPostId == nil {
		return localVarReturnValue, nil, reportError("postFlagPostId is required and must be specified")
	}
	if r.postFlagReasonName == nil {
		return localVarReturnValue, nil, reportError("postFlagReasonName is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_flag[post_id]", r.postFlagPostId, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "post_flag[reason_name]", r.postFlagReasonName, "")
	if r.postFlagParentId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_flag[parent_id]", r.postFlagParentId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostFlagsAPIGetPostFlagRequest struct {
	ctx        context.Context
	ApiService *PostFlagsAPIService
	id         int32
}

func (r PostFlagsAPIGetPostFlagRequest) Execute() (*PostFlag, *http.Response, error) {
	return r.ApiService.GetPostFlagExecute(r)
}

/*
GetPostFlag Get Post Flag

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post flag.
	@return PostFlagsAPIGetPostFlagRequest
*/
func (a *PostFlagsAPIService) GetPostFlag(ctx context.Context, id int32) PostFlagsAPIGetPostFlagRequest {
	return PostFlagsAPIGetPostFlagRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PostFlag
func (a *PostFlagsAPIService) GetPostFlagExecute(r PostFlagsAPIGetPostFlagRequest) (*PostFlag, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostFlag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostFlagsAPIService.GetPostFlag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_flags/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostFlagsAPISearchPostFlagsRequest struct {
	ctx                 context.Context
	ApiService          *PostFlagsAPIService
	limit               *int32
	page                *int32
	searchId            *int32
	searchIpAddr        *string
	searchOrder         *string
	searchReasonMatches *string
	searchCreatorId     *int32
	searchCreatorName   *string
	searchPostId        *int32
	searchPostTagsMatch *string
	searchType          *string
	searchIsResolved    *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r PostFlagsAPISearchPostFlagsRequest) Limit(limit int32) PostFlagsAPISearchPostFlagsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r PostFlagsAPISearchPostFlagsRequest) Page(page int32) PostFlagsAPISearchPostFlagsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r PostFlagsAPISearchPostFlagsRequest) SearchId(searchId int32) PostFlagsAPISearchPostFlagsRequest {
	r.searchId = &searchId
	return r
}

// Must be Admin+ to use. See [postgres&#39; documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, \&quot;is contained within or equals\&quot; (&#x60;&lt;&lt;&#x3D;&#x60;).
func (r PostFlagsAPISearchPostFlagsRequest) SearchIpAddr(searchIpAddr string) PostFlagsAPISearchPostFlagsRequest {
	r.searchIpAddr = &searchIpAddr
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchOrder(searchOrder string) PostFlagsAPISearchPostFlagsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchReasonMatches(searchReasonMatches string) PostFlagsAPISearchPostFlagsRequest {
	r.searchReasonMatches = &searchReasonMatches
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchCreatorId(searchCreatorId int32) PostFlagsAPISearchPostFlagsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchCreatorName(searchCreatorName string) PostFlagsAPISearchPostFlagsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchPostId(searchPostId int32) PostFlagsAPISearchPostFlagsRequest {
	r.searchPostId = &searchPostId
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchPostTagsMatch(searchPostTagsMatch string) PostFlagsAPISearchPostFlagsRequest {
	r.searchPostTagsMatch = &searchPostTagsMatch
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchType(searchType string) PostFlagsAPISearchPostFlagsRequest {
	r.searchType = &searchType
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) SearchIsResolved(searchIsResolved bool) PostFlagsAPISearchPostFlagsRequest {
	r.searchIsResolved = &searchIsResolved
	return r
}

func (r PostFlagsAPISearchPostFlagsRequest) Execute() (*SearchPostFlags200Response, *http.Response, error) {
	return r.ApiService.SearchPostFlagsExecute(r)
}

/*
SearchPostFlags Search Post Flags

When no results are found, an object with an `post_flags` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostFlagsAPISearchPostFlagsRequest
*/
func (a *PostFlagsAPIService) SearchPostFlags(ctx context.Context) PostFlagsAPISearchPostFlagsRequest {
	return PostFlagsAPISearchPostFlagsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchPostFlags200Response
func (a *PostFlagsAPIService) SearchPostFlagsExecute(r PostFlagsAPISearchPostFlagsRequest) (*SearchPostFlags200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchPostFlags200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostFlagsAPIService.SearchPostFlags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_flags.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchIpAddr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[ip_addr]", r.searchIpAddr, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchReasonMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[reason_matches]", r.searchReasonMatches, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchPostTagsMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_tags_match]", r.searchPostTagsMatch, "")
	}
	if r.searchType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[type]", r.searchType, "")
	}
	if r.searchIsResolved != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_resolved]", r.searchIsResolved, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
