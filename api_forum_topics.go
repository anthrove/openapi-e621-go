/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ForumTopicsAPIService ForumTopicsAPI service
type ForumTopicsAPIService service

type ApiCreateForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	forumTopicTitle *string
	forumTopicCategoryId *float32
	forumTopicOriginalPostAttributesId *float32
	forumTopicOriginalPostAttributesBody *string
	forumTopicIsSticky *bool
	forumTopicIsLocked *bool
}

func (r ApiCreateForumTopicRequest) ForumTopicTitle(forumTopicTitle string) ApiCreateForumTopicRequest {
	r.forumTopicTitle = &forumTopicTitle
	return r
}

func (r ApiCreateForumTopicRequest) ForumTopicCategoryId(forumTopicCategoryId float32) ApiCreateForumTopicRequest {
	r.forumTopicCategoryId = &forumTopicCategoryId
	return r
}

// Forum post ID. Mutually exclusive with body, one must be provided.
func (r ApiCreateForumTopicRequest) ForumTopicOriginalPostAttributesId(forumTopicOriginalPostAttributesId float32) ApiCreateForumTopicRequest {
	r.forumTopicOriginalPostAttributesId = &forumTopicOriginalPostAttributesId
	return r
}

// First forum post body. Mutually exclusive with id, one must be provided.
func (r ApiCreateForumTopicRequest) ForumTopicOriginalPostAttributesBody(forumTopicOriginalPostAttributesBody string) ApiCreateForumTopicRequest {
	r.forumTopicOriginalPostAttributesBody = &forumTopicOriginalPostAttributesBody
	return r
}

// You must be Moderator+.
func (r ApiCreateForumTopicRequest) ForumTopicIsSticky(forumTopicIsSticky bool) ApiCreateForumTopicRequest {
	r.forumTopicIsSticky = &forumTopicIsSticky
	return r
}

// You must be Moderator+.
func (r ApiCreateForumTopicRequest) ForumTopicIsLocked(forumTopicIsLocked bool) ApiCreateForumTopicRequest {
	r.forumTopicIsLocked = &forumTopicIsLocked
	return r
}

func (r ApiCreateForumTopicRequest) Execute() (*ForumTopic, *http.Response, error) {
	return r.ApiService.CreateForumTopicExecute(r)
}

/*
CreateForumTopic Create Forum Topic

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateForumTopicRequest
*/
func (a *ForumTopicsAPIService) CreateForumTopic(ctx context.Context) ApiCreateForumTopicRequest {
	return ApiCreateForumTopicRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ForumTopic
func (a *ForumTopicsAPIService) CreateForumTopicExecute(r ApiCreateForumTopicRequest) (*ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.CreateForumTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.forumTopicTitle == nil {
		return localVarReturnValue, nil, reportError("forumTopicTitle is required and must be specified")
	}
	if r.forumTopicCategoryId == nil {
		return localVarReturnValue, nil, reportError("forumTopicCategoryId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[title]", r.forumTopicTitle, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[category_id]", r.forumTopicCategoryId, "")
	if r.forumTopicOriginalPostAttributesId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[original_post_attributes][id]", r.forumTopicOriginalPostAttributesId, "")
	}
	if r.forumTopicOriginalPostAttributesBody != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[original_post_attributes][body]", r.forumTopicOriginalPostAttributesBody, "")
	}
	if r.forumTopicIsSticky != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[is_sticky]", r.forumTopicIsSticky, "")
	}
	if r.forumTopicIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[is_locked]", r.forumTopicIsLocked, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
}

func (r ApiDeleteForumTopicRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteForumTopicExecute(r)
}

/*
DeleteForumTopic Delete Forum Topic

You must be Admin+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiDeleteForumTopicRequest
*/
func (a *ForumTopicsAPIService) DeleteForumTopic(ctx context.Context, id float32) ApiDeleteForumTopicRequest {
	return ApiDeleteForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ForumTopicsAPIService) DeleteForumTopicExecute(r ApiDeleteForumTopicRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.DeleteForumTopic")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
	forumTopicTitle *string
	forumTopicCategoryId *float32
	forumTopicOriginalPostAttributesId *float32
	forumTopicOriginalPostAttributesBody *string
	forumTopicIsSticky *bool
	forumTopicIsLocked *bool
}

func (r ApiEditForumTopicRequest) ForumTopicTitle(forumTopicTitle string) ApiEditForumTopicRequest {
	r.forumTopicTitle = &forumTopicTitle
	return r
}

func (r ApiEditForumTopicRequest) ForumTopicCategoryId(forumTopicCategoryId float32) ApiEditForumTopicRequest {
	r.forumTopicCategoryId = &forumTopicCategoryId
	return r
}

// Forum post ID. Silently ignored
func (r ApiEditForumTopicRequest) ForumTopicOriginalPostAttributesId(forumTopicOriginalPostAttributesId float32) ApiEditForumTopicRequest {
	r.forumTopicOriginalPostAttributesId = &forumTopicOriginalPostAttributesId
	return r
}

// First forum post body.
func (r ApiEditForumTopicRequest) ForumTopicOriginalPostAttributesBody(forumTopicOriginalPostAttributesBody string) ApiEditForumTopicRequest {
	r.forumTopicOriginalPostAttributesBody = &forumTopicOriginalPostAttributesBody
	return r
}

// You must be Moderator+.
func (r ApiEditForumTopicRequest) ForumTopicIsSticky(forumTopicIsSticky bool) ApiEditForumTopicRequest {
	r.forumTopicIsSticky = &forumTopicIsSticky
	return r
}

// You must be Moderator+.
func (r ApiEditForumTopicRequest) ForumTopicIsLocked(forumTopicIsLocked bool) ApiEditForumTopicRequest {
	r.forumTopicIsLocked = &forumTopicIsLocked
	return r
}

func (r ApiEditForumTopicRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditForumTopicExecute(r)
}

/*
EditForumTopic Edit Forum Topic

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiEditForumTopicRequest
*/
func (a *ForumTopicsAPIService) EditForumTopic(ctx context.Context, id float32) ApiEditForumTopicRequest {
	return ApiEditForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ForumTopicsAPIService) EditForumTopicExecute(r ApiEditForumTopicRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.EditForumTopic")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.forumTopicTitle != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[title]", r.forumTopicTitle, "")
	}
	if r.forumTopicCategoryId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[category_id]", r.forumTopicCategoryId, "")
	}
	if r.forumTopicOriginalPostAttributesId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[original_post_attributes][id]", r.forumTopicOriginalPostAttributesId, "")
	}
	if r.forumTopicOriginalPostAttributesBody != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[original_post_attributes][body]", r.forumTopicOriginalPostAttributesBody, "")
	}
	if r.forumTopicIsSticky != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[is_sticky]", r.forumTopicIsSticky, "")
	}
	if r.forumTopicIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "forum_topic[is_locked]", r.forumTopicIsLocked, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
}

func (r ApiGetForumTopicRequest) Execute() (*ForumTopic, *http.Response, error) {
	return r.ApiService.GetForumTopicExecute(r)
}

/*
GetForumTopic Get Forum Forum Topic

If the forum topic is hidden, you must be the creator or Moderator+ to see it.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiGetForumTopicRequest
*/
func (a *ForumTopicsAPIService) GetForumTopic(ctx context.Context, id float32) ApiGetForumTopicRequest {
	return ApiGetForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ForumTopic
func (a *ForumTopicsAPIService) GetForumTopicExecute(r ApiGetForumTopicRequest) (*ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.GetForumTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHideForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
}

func (r ApiHideForumTopicRequest) Execute() (*ForumTopic, *http.Response, error) {
	return r.ApiService.HideForumTopicExecute(r)
}

/*
HideForumTopic Hide Forum Topic

You must be the creator or Moderator+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiHideForumTopicRequest
*/
func (a *ForumTopicsAPIService) HideForumTopic(ctx context.Context, id float32) ApiHideForumTopicRequest {
	return ApiHideForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ForumTopic
func (a *ForumTopicsAPIService) HideForumTopicExecute(r ApiHideForumTopicRequest) (*ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.HideForumTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}/hide.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMarkAllForumTopicsAsReadRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	markAllForumTopicsAsReadRequest *MarkAllForumTopicsAsReadRequest
}

func (r ApiMarkAllForumTopicsAsReadRequest) MarkAllForumTopicsAsReadRequest(markAllForumTopicsAsReadRequest MarkAllForumTopicsAsReadRequest) ApiMarkAllForumTopicsAsReadRequest {
	r.markAllForumTopicsAsReadRequest = &markAllForumTopicsAsReadRequest
	return r
}

func (r ApiMarkAllForumTopicsAsReadRequest) Execute() (*http.Response, error) {
	return r.ApiService.MarkAllForumTopicsAsReadExecute(r)
}

/*
MarkAllForumTopicsAsRead Mark All Forum Topics As Read

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMarkAllForumTopicsAsReadRequest
*/
func (a *ForumTopicsAPIService) MarkAllForumTopicsAsRead(ctx context.Context) ApiMarkAllForumTopicsAsReadRequest {
	return ApiMarkAllForumTopicsAsReadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ForumTopicsAPIService) MarkAllForumTopicsAsReadExecute(r ApiMarkAllForumTopicsAsReadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.MarkAllForumTopicsAsRead")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/mark_all_as_read.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.markAllForumTopicsAsReadRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchForumTopicsRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	limit *float32
	page *float32
	searchId *float32
	searchOrder *string
	searchTitle *string
	searchTitleMatches *string
	searchCategoryId *float32
	searchIsSticky *bool
	searchIsLocked *bool
	searchIsHidden *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r ApiSearchForumTopicsRequest) Limit(limit float32) ApiSearchForumTopicsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ApiSearchForumTopicsRequest) Page(page float32) ApiSearchForumTopicsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ApiSearchForumTopicsRequest) SearchId(searchId float32) ApiSearchForumTopicsRequest {
	r.searchId = &searchId
	return r
}

func (r ApiSearchForumTopicsRequest) SearchOrder(searchOrder string) ApiSearchForumTopicsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r ApiSearchForumTopicsRequest) SearchTitle(searchTitle string) ApiSearchForumTopicsRequest {
	r.searchTitle = &searchTitle
	return r
}

func (r ApiSearchForumTopicsRequest) SearchTitleMatches(searchTitleMatches string) ApiSearchForumTopicsRequest {
	r.searchTitleMatches = &searchTitleMatches
	return r
}

func (r ApiSearchForumTopicsRequest) SearchCategoryId(searchCategoryId float32) ApiSearchForumTopicsRequest {
	r.searchCategoryId = &searchCategoryId
	return r
}

func (r ApiSearchForumTopicsRequest) SearchIsSticky(searchIsSticky bool) ApiSearchForumTopicsRequest {
	r.searchIsSticky = &searchIsSticky
	return r
}

func (r ApiSearchForumTopicsRequest) SearchIsLocked(searchIsLocked bool) ApiSearchForumTopicsRequest {
	r.searchIsLocked = &searchIsLocked
	return r
}

func (r ApiSearchForumTopicsRequest) SearchIsHidden(searchIsHidden bool) ApiSearchForumTopicsRequest {
	r.searchIsHidden = &searchIsHidden
	return r
}

func (r ApiSearchForumTopicsRequest) Execute() ([]ForumTopic, *http.Response, error) {
	return r.ApiService.SearchForumTopicsExecute(r)
}

/*
SearchForumTopics Search Forum Topics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchForumTopicsRequest
*/
func (a *ForumTopicsAPIService) SearchForumTopics(ctx context.Context) ApiSearchForumTopicsRequest {
	return ApiSearchForumTopicsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ForumTopic
func (a *ForumTopicsAPIService) SearchForumTopicsExecute(r ApiSearchForumTopicsRequest) ([]ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.SearchForumTopics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title]", r.searchTitle, "")
	}
	if r.searchTitleMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title_matches]", r.searchTitleMatches, "")
	}
	if r.searchCategoryId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[category_id]", r.searchCategoryId, "")
	}
	if r.searchIsSticky != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_sticky]", r.searchIsSticky, "")
	}
	if r.searchIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_locked]", r.searchIsLocked, "")
	}
	if r.searchIsHidden != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_hidden]", r.searchIsHidden, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscribeForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
}

func (r ApiSubscribeForumTopicRequest) Execute() (*ForumTopic, *http.Response, error) {
	return r.ApiService.SubscribeForumTopicExecute(r)
}

/*
SubscribeForumTopic Subscribe To Forum Topic

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiSubscribeForumTopicRequest
*/
func (a *ForumTopicsAPIService) SubscribeForumTopic(ctx context.Context, id float32) ApiSubscribeForumTopicRequest {
	return ApiSubscribeForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ForumTopic
func (a *ForumTopicsAPIService) SubscribeForumTopicExecute(r ApiSubscribeForumTopicRequest) (*ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.SubscribeForumTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}/subscribe.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnhideForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
}

func (r ApiUnhideForumTopicRequest) Execute() (*ForumTopic, *http.Response, error) {
	return r.ApiService.UnhideForumTopicExecute(r)
}

/*
UnhideForumTopic Unhide Forum Topic

You must be Moderator+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiUnhideForumTopicRequest
*/
func (a *ForumTopicsAPIService) UnhideForumTopic(ctx context.Context, id float32) ApiUnhideForumTopicRequest {
	return ApiUnhideForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ForumTopic
func (a *ForumTopicsAPIService) UnhideForumTopicExecute(r ApiUnhideForumTopicRequest) (*ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.UnhideForumTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}/unhide.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnsubscribeForumTopicRequest struct {
	ctx context.Context
	ApiService *ForumTopicsAPIService
	id float32
}

func (r ApiUnsubscribeForumTopicRequest) Execute() (*ForumTopic, *http.Response, error) {
	return r.ApiService.UnsubscribeForumTopicExecute(r)
}

/*
UnsubscribeForumTopic Unsubscribe From Forum Topic

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the forum topic.
 @return ApiUnsubscribeForumTopicRequest
*/
func (a *ForumTopicsAPIService) UnsubscribeForumTopic(ctx context.Context, id float32) ApiUnsubscribeForumTopicRequest {
	return ApiUnsubscribeForumTopicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ForumTopic
func (a *ForumTopicsAPIService) UnsubscribeForumTopicExecute(r ApiUnsubscribeForumTopicRequest) (*ForumTopic, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForumTopic
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ForumTopicsAPIService.UnsubscribeForumTopic")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/forum_topics/{id}/unsubscribe.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
