/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AvoidPostingEntriesAPIService AvoidPostingEntriesAPI service
type AvoidPostingEntriesAPIService service

type AvoidPostingEntriesAPICreateAvoidPostingRequest struct {
	ctx                                          context.Context
	ApiService                                   *AvoidPostingEntriesAPIService
	avoidPostingDetails                          *string
	avoidPostingStaffNotes                       *string
	avoidPostingIsActive                         *bool
	avoidPostingArtistAttributesId               *int32
	avoidPostingArtistAttributesName             *string
	avoidPostingArtistAttributesOtherNamesString *string
	avoidPostingArtistAttributesOtherNames       *[]string
	avoidPostingArtistAttributesGroupName        *string
	avoidPostingArtistAttributesLinkedUserId     *int32
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingDetails(avoidPostingDetails string) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingDetails = &avoidPostingDetails
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingStaffNotes(avoidPostingStaffNotes string) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingStaffNotes = &avoidPostingStaffNotes
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingIsActive(avoidPostingIsActive bool) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingIsActive = &avoidPostingIsActive
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingArtistAttributesId(avoidPostingArtistAttributesId int32) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingArtistAttributesId = &avoidPostingArtistAttributesId
	return r
}

// If provided and the artist does not exist, an artist will be created.
func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingArtistAttributesName(avoidPostingArtistAttributesName string) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingArtistAttributesName = &avoidPostingArtistAttributesName
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingArtistAttributesOtherNamesString(avoidPostingArtistAttributesOtherNamesString string) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingArtistAttributesOtherNamesString = &avoidPostingArtistAttributesOtherNamesString
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingArtistAttributesOtherNames(avoidPostingArtistAttributesOtherNames []string) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingArtistAttributesOtherNames = &avoidPostingArtistAttributesOtherNames
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingArtistAttributesGroupName(avoidPostingArtistAttributesGroupName string) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingArtistAttributesGroupName = &avoidPostingArtistAttributesGroupName
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) AvoidPostingArtistAttributesLinkedUserId(avoidPostingArtistAttributesLinkedUserId int32) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	r.avoidPostingArtistAttributesLinkedUserId = &avoidPostingArtistAttributesLinkedUserId
	return r
}

func (r AvoidPostingEntriesAPICreateAvoidPostingRequest) Execute() (*AvoidPosting, *http.Response, error) {
	return r.ApiService.CreateAvoidPostingExecute(r)
}

/*
CreateAvoidPosting Create Avoid Posting Entry

Must have the bd staff user flag. When no results are found, an object with an `avoid_posting_versions` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AvoidPostingEntriesAPICreateAvoidPostingRequest
*/
func (a *AvoidPostingEntriesAPIService) CreateAvoidPosting(ctx context.Context) AvoidPostingEntriesAPICreateAvoidPostingRequest {
	return AvoidPostingEntriesAPICreateAvoidPostingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AvoidPosting
func (a *AvoidPostingEntriesAPIService) CreateAvoidPostingExecute(r AvoidPostingEntriesAPICreateAvoidPostingRequest) (*AvoidPosting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AvoidPosting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.CreateAvoidPosting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.avoidPostingDetails != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[details]", r.avoidPostingDetails, "")
	}
	if r.avoidPostingStaffNotes != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[staff_notes]", r.avoidPostingStaffNotes, "")
	}
	if r.avoidPostingIsActive != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[is_active]", r.avoidPostingIsActive, "")
	}
	if r.avoidPostingArtistAttributesId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][id]", r.avoidPostingArtistAttributesId, "")
	}
	if r.avoidPostingArtistAttributesName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][name]", r.avoidPostingArtistAttributesName, "")
	}
	if r.avoidPostingArtistAttributesOtherNamesString != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][other_names_string]", r.avoidPostingArtistAttributesOtherNamesString, "")
	}
	if r.avoidPostingArtistAttributesOtherNames != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][other_names]", r.avoidPostingArtistAttributesOtherNames, "csv")
	}
	if r.avoidPostingArtistAttributesGroupName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][group_name]", r.avoidPostingArtistAttributesGroupName, "")
	}
	if r.avoidPostingArtistAttributesLinkedUserId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][linked_user_id]", r.avoidPostingArtistAttributesLinkedUserId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AvoidPostingEntriesAPIDeleteAvoidPostingRequest struct {
	ctx            context.Context
	ApiService     *AvoidPostingEntriesAPIService
	idOrArtistName string
}

func (r AvoidPostingEntriesAPIDeleteAvoidPostingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAvoidPostingExecute(r)
}

/*
DeleteAvoidPosting Delete Avoid Posting Entry

Must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrArtistName The ID of the avoid posting entry, or the name of the artist.
	@return AvoidPostingEntriesAPIDeleteAvoidPostingRequest
*/
func (a *AvoidPostingEntriesAPIService) DeleteAvoidPosting(ctx context.Context, idOrArtistName string) AvoidPostingEntriesAPIDeleteAvoidPostingRequest {
	return AvoidPostingEntriesAPIDeleteAvoidPostingRequest{
		ApiService:     a,
		ctx:            ctx,
		idOrArtistName: idOrArtistName,
	}
}

// Execute executes the request
func (a *AvoidPostingEntriesAPIService) DeleteAvoidPostingExecute(r AvoidPostingEntriesAPIDeleteAvoidPostingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.DeleteAvoidPosting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings/{idOrArtistName}/delete.json"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrArtistName"+"}", url.PathEscape(parameterValueToString(r.idOrArtistName, "idOrArtistName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AvoidPostingEntriesAPIDestroyAvoidPostingRequest struct {
	ctx            context.Context
	ApiService     *AvoidPostingEntriesAPIService
	idOrArtistName string
}

func (r AvoidPostingEntriesAPIDestroyAvoidPostingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DestroyAvoidPostingExecute(r)
}

/*
DestroyAvoidPosting Destroy Avoid Posting Entry

Must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrArtistName The ID of the avoid posting entry, or the name of the artist.
	@return AvoidPostingEntriesAPIDestroyAvoidPostingRequest
*/
func (a *AvoidPostingEntriesAPIService) DestroyAvoidPosting(ctx context.Context, idOrArtistName string) AvoidPostingEntriesAPIDestroyAvoidPostingRequest {
	return AvoidPostingEntriesAPIDestroyAvoidPostingRequest{
		ApiService:     a,
		ctx:            ctx,
		idOrArtistName: idOrArtistName,
	}
}

// Execute executes the request
func (a *AvoidPostingEntriesAPIService) DestroyAvoidPostingExecute(r AvoidPostingEntriesAPIDestroyAvoidPostingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.DestroyAvoidPosting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings/{idOrArtistName}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrArtistName"+"}", url.PathEscape(parameterValueToString(r.idOrArtistName, "idOrArtistName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AvoidPostingEntriesAPIEditAvoidPostingRequest struct {
	ctx                                          context.Context
	ApiService                                   *AvoidPostingEntriesAPIService
	idOrArtistName                               string
	avoidPostingDetails                          *string
	avoidPostingStaffNotes                       *string
	avoidPostingIsActive                         *bool
	avoidPostingArtistAttributesName             *string
	avoidPostingArtistAttributesOtherNamesString *string
	avoidPostingArtistAttributesOtherNames       *[]string
	avoidPostingArtistAttributesGroupName        *string
	avoidPostingArtistAttributesLinkedUserId     *int32
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingDetails(avoidPostingDetails string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingDetails = &avoidPostingDetails
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingStaffNotes(avoidPostingStaffNotes string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingStaffNotes = &avoidPostingStaffNotes
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingIsActive(avoidPostingIsActive bool) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingIsActive = &avoidPostingIsActive
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingArtistAttributesName(avoidPostingArtistAttributesName string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingArtistAttributesName = &avoidPostingArtistAttributesName
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingArtistAttributesOtherNamesString(avoidPostingArtistAttributesOtherNamesString string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingArtistAttributesOtherNamesString = &avoidPostingArtistAttributesOtherNamesString
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingArtistAttributesOtherNames(avoidPostingArtistAttributesOtherNames []string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingArtistAttributesOtherNames = &avoidPostingArtistAttributesOtherNames
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingArtistAttributesGroupName(avoidPostingArtistAttributesGroupName string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingArtistAttributesGroupName = &avoidPostingArtistAttributesGroupName
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) AvoidPostingArtistAttributesLinkedUserId(avoidPostingArtistAttributesLinkedUserId int32) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	r.avoidPostingArtistAttributesLinkedUserId = &avoidPostingArtistAttributesLinkedUserId
	return r
}

func (r AvoidPostingEntriesAPIEditAvoidPostingRequest) Execute() (*AvoidPosting, *http.Response, error) {
	return r.ApiService.EditAvoidPostingExecute(r)
}

/*
EditAvoidPosting Edit Avoid Posting Entry

Must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrArtistName The ID of the avoid posting entry, or the name of the artist.
	@return AvoidPostingEntriesAPIEditAvoidPostingRequest
*/
func (a *AvoidPostingEntriesAPIService) EditAvoidPosting(ctx context.Context, idOrArtistName string) AvoidPostingEntriesAPIEditAvoidPostingRequest {
	return AvoidPostingEntriesAPIEditAvoidPostingRequest{
		ApiService:     a,
		ctx:            ctx,
		idOrArtistName: idOrArtistName,
	}
}

// Execute executes the request
//
//	@return AvoidPosting
func (a *AvoidPostingEntriesAPIService) EditAvoidPostingExecute(r AvoidPostingEntriesAPIEditAvoidPostingRequest) (*AvoidPosting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AvoidPosting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.EditAvoidPosting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings/{idOrArtistName}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrArtistName"+"}", url.PathEscape(parameterValueToString(r.idOrArtistName, "idOrArtistName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.avoidPostingDetails != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[details]", r.avoidPostingDetails, "")
	}
	if r.avoidPostingStaffNotes != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[staff_notes]", r.avoidPostingStaffNotes, "")
	}
	if r.avoidPostingIsActive != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[is_active]", r.avoidPostingIsActive, "")
	}
	if r.avoidPostingArtistAttributesName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][name]", r.avoidPostingArtistAttributesName, "")
	}
	if r.avoidPostingArtistAttributesOtherNamesString != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][other_names_string]", r.avoidPostingArtistAttributesOtherNamesString, "")
	}
	if r.avoidPostingArtistAttributesOtherNames != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][other_names]", r.avoidPostingArtistAttributesOtherNames, "csv")
	}
	if r.avoidPostingArtistAttributesGroupName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][group_name]", r.avoidPostingArtistAttributesGroupName, "")
	}
	if r.avoidPostingArtistAttributesLinkedUserId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "avoid_posting[artist_attributes][linked_user_id]", r.avoidPostingArtistAttributesLinkedUserId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AvoidPostingEntriesAPIGetAvoidPostingRequest struct {
	ctx            context.Context
	ApiService     *AvoidPostingEntriesAPIService
	idOrArtistName string
}

func (r AvoidPostingEntriesAPIGetAvoidPostingRequest) Execute() (*AvoidPosting, *http.Response, error) {
	return r.ApiService.GetAvoidPostingExecute(r)
}

/*
GetAvoidPosting Get Avoid Posting Entry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrArtistName The ID of the avoid posting entry, or the name of the artist.
	@return AvoidPostingEntriesAPIGetAvoidPostingRequest
*/
func (a *AvoidPostingEntriesAPIService) GetAvoidPosting(ctx context.Context, idOrArtistName string) AvoidPostingEntriesAPIGetAvoidPostingRequest {
	return AvoidPostingEntriesAPIGetAvoidPostingRequest{
		ApiService:     a,
		ctx:            ctx,
		idOrArtistName: idOrArtistName,
	}
}

// Execute executes the request
//
//	@return AvoidPosting
func (a *AvoidPostingEntriesAPIService) GetAvoidPostingExecute(r AvoidPostingEntriesAPIGetAvoidPostingRequest) (*AvoidPosting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AvoidPosting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.GetAvoidPosting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings/{idOrArtistName}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrArtistName"+"}", url.PathEscape(parameterValueToString(r.idOrArtistName, "idOrArtistName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AvoidPostingEntriesAPISearchAvoidPostingsRequest struct {
	ctx                       context.Context
	ApiService                *AvoidPostingEntriesAPIService
	limit                     *int32
	page                      *int32
	searchId                  *int32
	searchIpAddr              *string
	searchOrder               *string
	searchCreatorName         *string
	searchCreatorId           *string
	searchAnyNameMatches      *string
	searchArtistName          *string
	searchArtistId            *string
	searchAnyOtherNameMatches *string
	searchDetails             *string
	searchStaffNotes          *string
	searchIsActive            *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) Limit(limit int32) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) Page(page int32) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchId(searchId int32) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchId = &searchId
	return r
}

// Must be Admin+ to use. See [postgres&#39; documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, \&quot;is contained within or equals\&quot; (&#x60;&lt;&lt;&#x3D;&#x60;).
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchIpAddr(searchIpAddr string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchIpAddr = &searchIpAddr
	return r
}

func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchOrder(searchOrder string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchCreatorName(searchCreatorName string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchCreatorId(searchCreatorId string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

// Any name matching.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchAnyNameMatches(searchAnyNameMatches string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchAnyNameMatches = &searchAnyNameMatches
	return r
}

// The artist name of the avoid posting entry.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchArtistName(searchArtistName string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchArtistName = &searchArtistName
	return r
}

// The artist id for the avoid posting entry.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchArtistId(searchArtistId string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchArtistId = &searchArtistId
	return r
}

// Any other name matching.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchAnyOtherNameMatches(searchAnyOtherNameMatches string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchAnyOtherNameMatches = &searchAnyOtherNameMatches
	return r
}

// The details of the avoid posting entry.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchDetails(searchDetails string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchDetails = &searchDetails
	return r
}

// The staff notes on the avoid posting entry. Must be Janitor+ to use.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchStaffNotes(searchStaffNotes string) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchStaffNotes = &searchStaffNotes
	return r
}

// If the avoid posting entry is active.
func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) SearchIsActive(searchIsActive bool) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	r.searchIsActive = &searchIsActive
	return r
}

func (r AvoidPostingEntriesAPISearchAvoidPostingsRequest) Execute() (*SearchAvoidPostings200Response, *http.Response, error) {
	return r.ApiService.SearchAvoidPostingsExecute(r)
}

/*
SearchAvoidPostings Search Avoid Posting Entries

When no results are found, an object with an `avoid_postings` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AvoidPostingEntriesAPISearchAvoidPostingsRequest
*/
func (a *AvoidPostingEntriesAPIService) SearchAvoidPostings(ctx context.Context) AvoidPostingEntriesAPISearchAvoidPostingsRequest {
	return AvoidPostingEntriesAPISearchAvoidPostingsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchAvoidPostings200Response
func (a *AvoidPostingEntriesAPIService) SearchAvoidPostingsExecute(r AvoidPostingEntriesAPISearchAvoidPostingsRequest) (*SearchAvoidPostings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchAvoidPostings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.SearchAvoidPostings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchIpAddr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[ip_addr]", r.searchIpAddr, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchAnyNameMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[any_name_matches]", r.searchAnyNameMatches, "")
	}
	if r.searchArtistName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[artist_name]", r.searchArtistName, "")
	}
	if r.searchArtistId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[artist_id]", r.searchArtistId, "")
	}
	if r.searchAnyOtherNameMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[any_other_name_matches]", r.searchAnyOtherNameMatches, "")
	}
	if r.searchDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[details]", r.searchDetails, "")
	}
	if r.searchStaffNotes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[staff_notes]", r.searchStaffNotes, "")
	}
	if r.searchIsActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_active]", r.searchIsActive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AvoidPostingEntriesAPIUndeleteAvoidPostingRequest struct {
	ctx            context.Context
	ApiService     *AvoidPostingEntriesAPIService
	idOrArtistName string
}

func (r AvoidPostingEntriesAPIUndeleteAvoidPostingRequest) Execute() (*http.Response, error) {
	return r.ApiService.UndeleteAvoidPostingExecute(r)
}

/*
UndeleteAvoidPosting Undelete Avoid Posting Entry

Must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param idOrArtistName The ID of the avoid posting entry, or the name of the artist.
	@return AvoidPostingEntriesAPIUndeleteAvoidPostingRequest
*/
func (a *AvoidPostingEntriesAPIService) UndeleteAvoidPosting(ctx context.Context, idOrArtistName string) AvoidPostingEntriesAPIUndeleteAvoidPostingRequest {
	return AvoidPostingEntriesAPIUndeleteAvoidPostingRequest{
		ApiService:     a,
		ctx:            ctx,
		idOrArtistName: idOrArtistName,
	}
}

// Execute executes the request
func (a *AvoidPostingEntriesAPIService) UndeleteAvoidPostingExecute(r AvoidPostingEntriesAPIUndeleteAvoidPostingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AvoidPostingEntriesAPIService.UndeleteAvoidPosting")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/avoid_postings/{idOrArtistName}/undelete.json"
	localVarPath = strings.Replace(localVarPath, "{"+"idOrArtistName"+"}", url.PathEscape(parameterValueToString(r.idOrArtistName, "idOrArtistName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
