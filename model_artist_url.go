/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ArtistURL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtistURL{}

// ArtistURL struct for ArtistURL
type ArtistURL struct {
	Id float32 `json:"id"`
	ArtistId float32 `json:"artist_id"`
	Url string `json:"url"`
	NormalizedUrl string `json:"normalized_url"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	IsActive bool `json:"is_active"`
}

type _ArtistURL ArtistURL

// NewArtistURL instantiates a new ArtistURL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtistURL(id float32, artistId float32, url string, normalizedUrl string, createdAt time.Time, updatedAt time.Time, isActive bool) *ArtistURL {
	this := ArtistURL{}
	this.Id = id
	this.ArtistId = artistId
	this.Url = url
	this.NormalizedUrl = normalizedUrl
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.IsActive = isActive
	return &this
}

// NewArtistURLWithDefaults instantiates a new ArtistURL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtistURLWithDefaults() *ArtistURL {
	this := ArtistURL{}
	return &this
}

// GetId returns the Id field value
func (o *ArtistURL) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ArtistURL) SetId(v float32) {
	o.Id = v
}

// GetArtistId returns the ArtistId field value
func (o *ArtistURL) GetArtistId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ArtistId
}

// GetArtistIdOk returns a tuple with the ArtistId field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetArtistIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtistId, true
}

// SetArtistId sets field value
func (o *ArtistURL) SetArtistId(v float32) {
	o.ArtistId = v
}

// GetUrl returns the Url field value
func (o *ArtistURL) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ArtistURL) SetUrl(v string) {
	o.Url = v
}

// GetNormalizedUrl returns the NormalizedUrl field value
func (o *ArtistURL) GetNormalizedUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NormalizedUrl
}

// GetNormalizedUrlOk returns a tuple with the NormalizedUrl field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetNormalizedUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NormalizedUrl, true
}

// SetNormalizedUrl sets field value
func (o *ArtistURL) SetNormalizedUrl(v string) {
	o.NormalizedUrl = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ArtistURL) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ArtistURL) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ArtistURL) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ArtistURL) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIsActive returns the IsActive field value
func (o *ArtistURL) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *ArtistURL) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *ArtistURL) SetIsActive(v bool) {
	o.IsActive = v
}

func (o ArtistURL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtistURL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["artist_id"] = o.ArtistId
	toSerialize["url"] = o.Url
	toSerialize["normalized_url"] = o.NormalizedUrl
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["is_active"] = o.IsActive
	return toSerialize, nil
}

func (o *ArtistURL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"artist_id",
		"url",
		"normalized_url",
		"created_at",
		"updated_at",
		"is_active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArtistURL := _ArtistURL{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArtistURL)

	if err != nil {
		return err
	}

	*o = ArtistURL(varArtistURL)

	return err
}

type NullableArtistURL struct {
	value *ArtistURL
	isSet bool
}

func (v NullableArtistURL) Get() *ArtistURL {
	return v.value
}

func (v *NullableArtistURL) Set(val *ArtistURL) {
	v.value = val
	v.isSet = true
}

func (v NullableArtistURL) IsSet() bool {
	return v.isSet
}

func (v *NullableArtistURL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtistURL(val *ArtistURL) *NullableArtistURL {
	return &NullableArtistURL{value: val, isSet: true}
}

func (v NullableArtistURL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtistURL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


