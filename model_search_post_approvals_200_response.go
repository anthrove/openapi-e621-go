/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// SearchPostApprovals200Response struct for SearchPostApprovals200Response
type SearchPostApprovals200Response struct {
	SearchPostApprovals200ResponseAnyOf *SearchPostApprovals200ResponseAnyOf
	ArrayOfPostApproval *[]PostApproval
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SearchPostApprovals200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SearchPostApprovals200ResponseAnyOf
	err = json.Unmarshal(data, &dst.SearchPostApprovals200ResponseAnyOf);
	if err == nil {
		jsonSearchPostApprovals200ResponseAnyOf, _ := json.Marshal(dst.SearchPostApprovals200ResponseAnyOf)
		if string(jsonSearchPostApprovals200ResponseAnyOf) == "{}" { // empty struct
			dst.SearchPostApprovals200ResponseAnyOf = nil
		} else {
			return nil // data stored in dst.SearchPostApprovals200ResponseAnyOf, return on the first match
		}
	} else {
		dst.SearchPostApprovals200ResponseAnyOf = nil
	}

	// try to unmarshal JSON data into ArrayOfPostApproval
	err = json.Unmarshal(data, &dst.ArrayOfPostApproval);
	if err == nil {
		jsonArrayOfPostApproval, _ := json.Marshal(dst.ArrayOfPostApproval)
		if string(jsonArrayOfPostApproval) == "{}" { // empty struct
			dst.ArrayOfPostApproval = nil
		} else {
			return nil // data stored in dst.ArrayOfPostApproval, return on the first match
		}
	} else {
		dst.ArrayOfPostApproval = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SearchPostApprovals200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SearchPostApprovals200Response) MarshalJSON() ([]byte, error) {
	if src.SearchPostApprovals200ResponseAnyOf != nil {
		return json.Marshal(&src.SearchPostApprovals200ResponseAnyOf)
	}

	if src.ArrayOfPostApproval != nil {
		return json.Marshal(&src.ArrayOfPostApproval)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSearchPostApprovals200Response struct {
	value *SearchPostApprovals200Response
	isSet bool
}

func (v NullableSearchPostApprovals200Response) Get() *SearchPostApprovals200Response {
	return v.value
}

func (v *NullableSearchPostApprovals200Response) Set(val *SearchPostApprovals200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchPostApprovals200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchPostApprovals200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchPostApprovals200Response(val *SearchPostApprovals200Response) *NullableSearchPostApprovals200Response {
	return &NullableSearchPostApprovals200Response{value: val, isSet: true}
}

func (v NullableSearchPostApprovals200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchPostApprovals200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


