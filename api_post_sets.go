/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PostSetsAPIService PostSetsAPI service
type PostSetsAPIService service

type PostSetsAPIAddPostsToPostSetRequest struct {
	ctx        context.Context
	ApiService *PostSetsAPIService
	id         float32
	postIds    *[]float32
}

// post_ids[]&#x3D;1&amp;post_ids[]&#x3D;2
func (r PostSetsAPIAddPostsToPostSetRequest) PostIds(postIds []float32) PostSetsAPIAddPostsToPostSetRequest {
	r.postIds = &postIds
	return r
}

func (r PostSetsAPIAddPostsToPostSetRequest) Execute() (*PostSet, *http.Response, error) {
	return r.ApiService.AddPostsToPostSetExecute(r)
}

/*
AddPostsToPostSet Add Posts To Post Set

You must be the owner of the set, a maintainer (if public), or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post set.
	@return PostSetsAPIAddPostsToPostSetRequest
*/
func (a *PostSetsAPIService) AddPostsToPostSet(ctx context.Context, id float32) PostSetsAPIAddPostsToPostSetRequest {
	return PostSetsAPIAddPostsToPostSetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PostSet
func (a *PostSetsAPIService) AddPostsToPostSetExecute(r PostSetsAPIAddPostsToPostSetRequest) (*PostSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.AddPostsToPostSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/{id}/add_posts.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postIds == nil {
		return localVarReturnValue, nil, reportError("postIds is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_ids", r.postIds, "csv")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostSetsAPICreatePostSetRequest struct {
	ctx                    context.Context
	ApiService             *PostSetsAPIService
	postSetName            *string
	postSetShortname       *string
	postSetDescription     *string
	postSetIsPublic        *bool
	postSetRansferOnDelete *bool
}

func (r PostSetsAPICreatePostSetRequest) PostSetName(postSetName string) PostSetsAPICreatePostSetRequest {
	r.postSetName = &postSetName
	return r
}

func (r PostSetsAPICreatePostSetRequest) PostSetShortname(postSetShortname string) PostSetsAPICreatePostSetRequest {
	r.postSetShortname = &postSetShortname
	return r
}

func (r PostSetsAPICreatePostSetRequest) PostSetDescription(postSetDescription string) PostSetsAPICreatePostSetRequest {
	r.postSetDescription = &postSetDescription
	return r
}

func (r PostSetsAPICreatePostSetRequest) PostSetIsPublic(postSetIsPublic bool) PostSetsAPICreatePostSetRequest {
	r.postSetIsPublic = &postSetIsPublic
	return r
}

func (r PostSetsAPICreatePostSetRequest) PostSetRansferOnDelete(postSetRansferOnDelete bool) PostSetsAPICreatePostSetRequest {
	r.postSetRansferOnDelete = &postSetRansferOnDelete
	return r
}

func (r PostSetsAPICreatePostSetRequest) Execute() (*PostSet, *http.Response, error) {
	return r.ApiService.CreatePostSetExecute(r)
}

/*
CreatePostSet Create Post Set

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostSetsAPICreatePostSetRequest
*/
func (a *PostSetsAPIService) CreatePostSet(ctx context.Context) PostSetsAPICreatePostSetRequest {
	return PostSetsAPICreatePostSetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PostSet
func (a *PostSetsAPIService) CreatePostSetExecute(r PostSetsAPICreatePostSetRequest) (*PostSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.CreatePostSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postSetName == nil {
		return localVarReturnValue, nil, reportError("postSetName is required and must be specified")
	}
	if r.postSetShortname == nil {
		return localVarReturnValue, nil, reportError("postSetShortname is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_set[name]", r.postSetName, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "post_set[shortname]", r.postSetShortname, "")
	if r.postSetDescription != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[description]", r.postSetDescription, "")
	}
	if r.postSetIsPublic != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[is_public]", r.postSetIsPublic, "")
	}
	if r.postSetRansferOnDelete != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[ransfer_on_delete]", r.postSetRansferOnDelete, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostSetsAPIDeletePostSetRequest struct {
	ctx        context.Context
	ApiService *PostSetsAPIService
	id         float32
}

func (r PostSetsAPIDeletePostSetRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePostSetExecute(r)
}

/*
DeletePostSet Delete Post Set

You must be the owner of the set, or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post set.
	@return PostSetsAPIDeletePostSetRequest
*/
func (a *PostSetsAPIService) DeletePostSet(ctx context.Context, id float32) PostSetsAPIDeletePostSetRequest {
	return PostSetsAPIDeletePostSetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PostSetsAPIService) DeletePostSetExecute(r PostSetsAPIDeletePostSetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.DeletePostSet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PostSetsAPIEditPostSetRequest struct {
	ctx                     context.Context
	ApiService              *PostSetsAPIService
	id                      float32
	postSetName             *string
	postSetShortname        *string
	postSetDescription      *string
	postSetIsPublic         *bool
	postSetTransferOnDelete *bool
}

func (r PostSetsAPIEditPostSetRequest) PostSetName(postSetName string) PostSetsAPIEditPostSetRequest {
	r.postSetName = &postSetName
	return r
}

func (r PostSetsAPIEditPostSetRequest) PostSetShortname(postSetShortname string) PostSetsAPIEditPostSetRequest {
	r.postSetShortname = &postSetShortname
	return r
}

func (r PostSetsAPIEditPostSetRequest) PostSetDescription(postSetDescription string) PostSetsAPIEditPostSetRequest {
	r.postSetDescription = &postSetDescription
	return r
}

func (r PostSetsAPIEditPostSetRequest) PostSetIsPublic(postSetIsPublic bool) PostSetsAPIEditPostSetRequest {
	r.postSetIsPublic = &postSetIsPublic
	return r
}

func (r PostSetsAPIEditPostSetRequest) PostSetTransferOnDelete(postSetTransferOnDelete bool) PostSetsAPIEditPostSetRequest {
	r.postSetTransferOnDelete = &postSetTransferOnDelete
	return r
}

func (r PostSetsAPIEditPostSetRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditPostSetExecute(r)
}

/*
EditPostSet Edit Post Set

You must be the owner of the set, or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post sets.
	@return PostSetsAPIEditPostSetRequest
*/
func (a *PostSetsAPIService) EditPostSet(ctx context.Context, id float32) PostSetsAPIEditPostSetRequest {
	return PostSetsAPIEditPostSetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PostSetsAPIService) EditPostSetExecute(r PostSetsAPIEditPostSetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.EditPostSet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.postSetName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[name]", r.postSetName, "")
	}
	if r.postSetShortname != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[shortname]", r.postSetShortname, "")
	}
	if r.postSetDescription != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[description]", r.postSetDescription, "")
	}
	if r.postSetIsPublic != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[is_public]", r.postSetIsPublic, "")
	}
	if r.postSetTransferOnDelete != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_set[transfer_on_delete]", r.postSetTransferOnDelete, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PostSetsAPIGetPostSetRequest struct {
	ctx        context.Context
	ApiService *PostSetsAPIService
	id         float32
}

func (r PostSetsAPIGetPostSetRequest) Execute() (*PostSet, *http.Response, error) {
	return r.ApiService.GetPostSetExecute(r)
}

/*
GetPostSet Get Post Set

You must be Moderator+ if the set is not public.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post set.
	@return PostSetsAPIGetPostSetRequest
*/
func (a *PostSetsAPIService) GetPostSet(ctx context.Context, id float32) PostSetsAPIGetPostSetRequest {
	return PostSetsAPIGetPostSetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PostSet
func (a *PostSetsAPIService) GetPostSetExecute(r PostSetsAPIGetPostSetRequest) (*PostSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.GetPostSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostSetsAPIListPostSetsForSelectRequest struct {
	ctx        context.Context
	ApiService *PostSetsAPIService
}

func (r PostSetsAPIListPostSetsForSelectRequest) Execute() (*ListPostSetsForSelect200Response, *http.Response, error) {
	return r.ApiService.ListPostSetsForSelectExecute(r)
}

/*
ListPostSetsForSelect List Post Sets For Select

You must be the owner of the set, a maintainer (if public), or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostSetsAPIListPostSetsForSelectRequest
*/
func (a *PostSetsAPIService) ListPostSetsForSelect(ctx context.Context) PostSetsAPIListPostSetsForSelectRequest {
	return PostSetsAPIListPostSetsForSelectRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListPostSetsForSelect200Response
func (a *PostSetsAPIService) ListPostSetsForSelectExecute(r PostSetsAPIListPostSetsForSelectRequest) (*ListPostSetsForSelect200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListPostSetsForSelect200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.ListPostSetsForSelect")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/for_select.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostSetsAPIRemovePostsFromPostSetRequest struct {
	ctx        context.Context
	ApiService *PostSetsAPIService
	id         float32
	postIds    *[]float32
}

// post_ids[]&#x3D;1&amp;post_ids[]&#x3D;2
func (r PostSetsAPIRemovePostsFromPostSetRequest) PostIds(postIds []float32) PostSetsAPIRemovePostsFromPostSetRequest {
	r.postIds = &postIds
	return r
}

func (r PostSetsAPIRemovePostsFromPostSetRequest) Execute() (*PostSet, *http.Response, error) {
	return r.ApiService.RemovePostsFromPostSetExecute(r)
}

/*
RemovePostsFromPostSet Remove Posts From Post Set

You must be the owner of the set, a maintainer (if public), or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post set.
	@return PostSetsAPIRemovePostsFromPostSetRequest
*/
func (a *PostSetsAPIService) RemovePostsFromPostSet(ctx context.Context, id float32) PostSetsAPIRemovePostsFromPostSetRequest {
	return PostSetsAPIRemovePostsFromPostSetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PostSet
func (a *PostSetsAPIService) RemovePostsFromPostSetExecute(r PostSetsAPIRemovePostsFromPostSetRequest) (*PostSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.RemovePostsFromPostSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/{id}/remove_posts.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postIds == nil {
		return localVarReturnValue, nil, reportError("postIds is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_ids", r.postIds, "csv")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostSetsAPISearchPostSetsRequest struct {
	ctx                context.Context
	ApiService         *PostSetsAPIService
	limit              *int32
	page               *int32
	searchId           *int32
	searchOrder        *string
	searchCreatorId    *float32
	searchCreatorName  *string
	searchName         *string
	searchShortname    *string
	searchIsPublic     *bool
	searchPostId       *float32
	searchMaintainerId *float32
}

// The maximum number of results to return. Between 0 and 320.
func (r PostSetsAPISearchPostSetsRequest) Limit(limit int32) PostSetsAPISearchPostSetsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r PostSetsAPISearchPostSetsRequest) Page(page int32) PostSetsAPISearchPostSetsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r PostSetsAPISearchPostSetsRequest) SearchId(searchId int32) PostSetsAPISearchPostSetsRequest {
	r.searchId = &searchId
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchOrder(searchOrder string) PostSetsAPISearchPostSetsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchCreatorId(searchCreatorId float32) PostSetsAPISearchPostSetsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchCreatorName(searchCreatorName string) PostSetsAPISearchPostSetsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchName(searchName string) PostSetsAPISearchPostSetsRequest {
	r.searchName = &searchName
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchShortname(searchShortname string) PostSetsAPISearchPostSetsRequest {
	r.searchShortname = &searchShortname
	return r
}

// You must be Moderator+.
func (r PostSetsAPISearchPostSetsRequest) SearchIsPublic(searchIsPublic bool) PostSetsAPISearchPostSetsRequest {
	r.searchIsPublic = &searchIsPublic
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchPostId(searchPostId float32) PostSetsAPISearchPostSetsRequest {
	r.searchPostId = &searchPostId
	return r
}

func (r PostSetsAPISearchPostSetsRequest) SearchMaintainerId(searchMaintainerId float32) PostSetsAPISearchPostSetsRequest {
	r.searchMaintainerId = &searchMaintainerId
	return r
}

func (r PostSetsAPISearchPostSetsRequest) Execute() (*SearchPostSets200Response, *http.Response, error) {
	return r.ApiService.SearchPostSetsExecute(r)
}

/*
SearchPostSets Search Post Sets

When no results are found, an object with a `post_sets` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostSetsAPISearchPostSetsRequest
*/
func (a *PostSetsAPIService) SearchPostSets(ctx context.Context) PostSetsAPISearchPostSetsRequest {
	return PostSetsAPISearchPostSetsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchPostSets200Response
func (a *PostSetsAPIService) SearchPostSetsExecute(r PostSetsAPISearchPostSetsRequest) (*SearchPostSets200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchPostSets200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.SearchPostSets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[name]", r.searchName, "")
	}
	if r.searchShortname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[shortname]", r.searchShortname, "")
	}
	if r.searchIsPublic != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_public]", r.searchIsPublic, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchMaintainerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[maintainer_id]", r.searchMaintainerId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostSetsAPIUpdatePostSetPostsRequest struct {
	ctx                  context.Context
	ApiService           *PostSetsAPIService
	id                   float32
	postSetPostIdsString *string
}

func (r PostSetsAPIUpdatePostSetPostsRequest) PostSetPostIdsString(postSetPostIdsString string) PostSetsAPIUpdatePostSetPostsRequest {
	r.postSetPostIdsString = &postSetPostIdsString
	return r
}

func (r PostSetsAPIUpdatePostSetPostsRequest) Execute() (*PostSet, *http.Response, error) {
	return r.ApiService.UpdatePostSetPostsExecute(r)
}

/*
UpdatePostSetPosts Update Post Set Posts

You must be the owner of the set, a maintainer (if public), or Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the post set.
	@return PostSetsAPIUpdatePostSetPostsRequest
*/
func (a *PostSetsAPIService) UpdatePostSetPosts(ctx context.Context, id float32) PostSetsAPIUpdatePostSetPostsRequest {
	return PostSetsAPIUpdatePostSetPostsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PostSet
func (a *PostSetsAPIService) UpdatePostSetPostsExecute(r PostSetsAPIUpdatePostSetPostsRequest) (*PostSet, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostSet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostSetsAPIService.UpdatePostSetPosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_sets/{id}/update_posts.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postSetPostIdsString == nil {
		return localVarReturnValue, nil, reportError("postSetPostIdsString is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_set[post_ids_string]", r.postSetPostIdsString, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
