/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PoolsAPIService PoolsAPI service
type PoolsAPIService service

type PoolsAPIAddPostToPoolRequest struct {
	ctx        context.Context
	ApiService *PoolsAPIService
	postId     *int32
	poolId     *int32
	poolName   *string
}

func (r PoolsAPIAddPostToPoolRequest) PostId(postId int32) PoolsAPIAddPostToPoolRequest {
	r.postId = &postId
	return r
}

// Mutually exclusive with pool_name.
func (r PoolsAPIAddPostToPoolRequest) PoolId(poolId int32) PoolsAPIAddPostToPoolRequest {
	r.poolId = &poolId
	return r
}

// Mutually exclusive with pool_id.
func (r PoolsAPIAddPostToPoolRequest) PoolName(poolName string) PoolsAPIAddPostToPoolRequest {
	r.poolName = &poolName
	return r
}

func (r PoolsAPIAddPostToPoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddPostToPoolExecute(r)
}

/*
AddPostToPool Add Post To Pool

Note that the extension is JS, this route will not return JSON.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoolsAPIAddPostToPoolRequest
*/
func (a *PoolsAPIService) AddPostToPool(ctx context.Context) PoolsAPIAddPostToPoolRequest {
	return PoolsAPIAddPostToPoolRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolsAPIService) AddPostToPoolExecute(r PoolsAPIAddPostToPoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.AddPostToPool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool_element.js"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postId == nil {
		return nil, reportError("postId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.poolId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool_id", r.poolId, "")
	}
	if r.poolName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool_name", r.poolName, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_id", r.postId, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolsAPICreatePoolRequest struct {
	ctx               context.Context
	ApiService        *PoolsAPIService
	poolName          *string
	poolDescription   *string
	poolCategory      *PoolCategories
	ipoolSActive      *bool
	poolPostIdsString *string
	poolPostIds       *[]int32
}

func (r PoolsAPICreatePoolRequest) PoolName(poolName string) PoolsAPICreatePoolRequest {
	r.poolName = &poolName
	return r
}

func (r PoolsAPICreatePoolRequest) PoolDescription(poolDescription string) PoolsAPICreatePoolRequest {
	r.poolDescription = &poolDescription
	return r
}

func (r PoolsAPICreatePoolRequest) PoolCategory(poolCategory PoolCategories) PoolsAPICreatePoolRequest {
	r.poolCategory = &poolCategory
	return r
}

func (r PoolsAPICreatePoolRequest) IpoolSActive(ipoolSActive bool) PoolsAPICreatePoolRequest {
	r.ipoolSActive = &ipoolSActive
	return r
}

// Space separated list of post IDs. Mutually exclusive with post_ids.
func (r PoolsAPICreatePoolRequest) PoolPostIdsString(poolPostIdsString string) PoolsAPICreatePoolRequest {
	r.poolPostIdsString = &poolPostIdsString
	return r
}

// Array of post IDs. Mutually exclusive with post_ids_string.
func (r PoolsAPICreatePoolRequest) PoolPostIds(poolPostIds []int32) PoolsAPICreatePoolRequest {
	r.poolPostIds = &poolPostIds
	return r
}

func (r PoolsAPICreatePoolRequest) Execute() (*Pool, *http.Response, error) {
	return r.ApiService.CreatePoolExecute(r)
}

/*
CreatePool Create Pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoolsAPICreatePoolRequest
*/
func (a *PoolsAPIService) CreatePool(ctx context.Context) PoolsAPICreatePoolRequest {
	return PoolsAPICreatePoolRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Pool
func (a *PoolsAPIService) CreatePoolExecute(r PoolsAPICreatePoolRequest) (*Pool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Pool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.CreatePool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.poolName == nil {
		return localVarReturnValue, nil, reportError("poolName is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "pool[name]", r.poolName, "")
	if r.poolDescription != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[description]", r.poolDescription, "")
	}
	if r.poolCategory != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[category]", r.poolCategory, "")
	}
	if r.ipoolSActive != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "ipool[s_active]", r.ipoolSActive, "")
	}
	if r.poolPostIdsString != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[post_ids_string]", r.poolPostIdsString, "")
	}
	if r.poolPostIds != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[post_ids]", r.poolPostIds, "csv")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIDeletePoolRequest struct {
	ctx        context.Context
	ApiService *PoolsAPIService
	id         int32
}

func (r PoolsAPIDeletePoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePoolExecute(r)
}

/*
DeletePool Delete Pool

You must be Janitor+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the pool.
	@return PoolsAPIDeletePoolRequest
*/
func (a *PoolsAPIService) DeletePool(ctx context.Context, id int32) PoolsAPIDeletePoolRequest {
	return PoolsAPIDeletePoolRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolsAPIService) DeletePoolExecute(r PoolsAPIDeletePoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.DeletePool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolsAPIEditPoolRequest struct {
	ctx               context.Context
	ApiService        *PoolsAPIService
	id                int32
	poolName          *string
	poolDescription   *string
	poolIsActive      *bool
	poolCategory      *PoolCategories
	poolPostIdsString *string
	poolPostIds       *[]int32
}

func (r PoolsAPIEditPoolRequest) PoolName(poolName string) PoolsAPIEditPoolRequest {
	r.poolName = &poolName
	return r
}

func (r PoolsAPIEditPoolRequest) PoolDescription(poolDescription string) PoolsAPIEditPoolRequest {
	r.poolDescription = &poolDescription
	return r
}

func (r PoolsAPIEditPoolRequest) PoolIsActive(poolIsActive bool) PoolsAPIEditPoolRequest {
	r.poolIsActive = &poolIsActive
	return r
}

// If the pool has more than 30 posts, you must be Janitor+.
func (r PoolsAPIEditPoolRequest) PoolCategory(poolCategory PoolCategories) PoolsAPIEditPoolRequest {
	r.poolCategory = &poolCategory
	return r
}

// Space separated list of post IDs. Mutually exclusive with post_ids.
func (r PoolsAPIEditPoolRequest) PoolPostIdsString(poolPostIdsString string) PoolsAPIEditPoolRequest {
	r.poolPostIdsString = &poolPostIdsString
	return r
}

// Array of post IDs. Mutually exclusive with post_ids_string.
func (r PoolsAPIEditPoolRequest) PoolPostIds(poolPostIds []int32) PoolsAPIEditPoolRequest {
	r.poolPostIds = &poolPostIds
	return r
}

func (r PoolsAPIEditPoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditPoolExecute(r)
}

/*
EditPool Edit Pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the pool.
	@return PoolsAPIEditPoolRequest
*/
func (a *PoolsAPIService) EditPool(ctx context.Context, id int32) PoolsAPIEditPoolRequest {
	return PoolsAPIEditPoolRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolsAPIService) EditPoolExecute(r PoolsAPIEditPoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.EditPool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.poolName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[name]", r.poolName, "")
	}
	if r.poolDescription != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[description]", r.poolDescription, "")
	}
	if r.poolIsActive != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[is_active]", r.poolIsActive, "")
	}
	if r.poolCategory != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[category]", r.poolCategory, "")
	}
	if r.poolPostIdsString != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[post_ids_string]", r.poolPostIdsString, "")
	}
	if r.poolPostIds != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "pool[post_ids]", r.poolPostIds, "csv")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolsAPIGetPoolRequest struct {
	ctx        context.Context
	ApiService *PoolsAPIService
	id         int32
}

func (r PoolsAPIGetPoolRequest) Execute() (*Pool, *http.Response, error) {
	return r.ApiService.GetPoolExecute(r)
}

/*
GetPool Get Pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the pool.
	@return PoolsAPIGetPoolRequest
*/
func (a *PoolsAPIService) GetPool(ctx context.Context, id int32) PoolsAPIGetPoolRequest {
	return PoolsAPIGetPoolRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Pool
func (a *PoolsAPIService) GetPoolExecute(r PoolsAPIGetPoolRequest) (*Pool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Pool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.GetPool")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PoolsAPIRemovePostFromPoolRequest struct {
	ctx        context.Context
	ApiService *PoolsAPIService
	poolId     *int32
	postId     *int32
}

func (r PoolsAPIRemovePostFromPoolRequest) PoolId(poolId int32) PoolsAPIRemovePostFromPoolRequest {
	r.poolId = &poolId
	return r
}

func (r PoolsAPIRemovePostFromPoolRequest) PostId(postId int32) PoolsAPIRemovePostFromPoolRequest {
	r.postId = &postId
	return r
}

func (r PoolsAPIRemovePostFromPoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemovePostFromPoolExecute(r)
}

/*
RemovePostFromPool Remove Post From Pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoolsAPIRemovePostFromPoolRequest
*/
func (a *PoolsAPIService) RemovePostFromPool(ctx context.Context) PoolsAPIRemovePostFromPoolRequest {
	return PoolsAPIRemovePostFromPoolRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolsAPIService) RemovePostFromPoolExecute(r PoolsAPIRemovePostFromPoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.RemovePostFromPool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool_element.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.poolId == nil {
		return nil, reportError("poolId is required and must be specified")
	}
	if r.postId == nil {
		return nil, reportError("postId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "pool_id", r.poolId, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "post_id", r.postId, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolsAPIRevertPoolRequest struct {
	ctx        context.Context
	ApiService *PoolsAPIService
	id         int32
	versionId  *int32
}

// The version ID to revert to.
func (r PoolsAPIRevertPoolRequest) VersionId(versionId int32) PoolsAPIRevertPoolRequest {
	r.versionId = &versionId
	return r
}

func (r PoolsAPIRevertPoolRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevertPoolExecute(r)
}

/*
RevertPool Revert Pool

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the pool.
	@return PoolsAPIRevertPoolRequest
*/
func (a *PoolsAPIService) RevertPool(ctx context.Context, id int32) PoolsAPIRevertPoolRequest {
	return PoolsAPIRevertPoolRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolsAPIService) RevertPoolExecute(r PoolsAPIRevertPoolRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.RevertPool")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools/{id}/revert.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.versionId == nil {
		return nil, reportError("versionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version_id", r.versionId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolsAPISearchPoolsRequest struct {
	ctx                      context.Context
	ApiService               *PoolsAPIService
	limit                    *int32
	page                     *int32
	searchId                 *int32
	searchOrder              *string
	searchNameMatches        *string
	searchDescriptionMatches *string
	searchCreatorId          *int32
	searchCreatorName        *string
	searchCategory           *PoolCategories
	searchIsActive           *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r PoolsAPISearchPoolsRequest) Limit(limit int32) PoolsAPISearchPoolsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r PoolsAPISearchPoolsRequest) Page(page int32) PoolsAPISearchPoolsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r PoolsAPISearchPoolsRequest) SearchId(searchId int32) PoolsAPISearchPoolsRequest {
	r.searchId = &searchId
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchOrder(searchOrder string) PoolsAPISearchPoolsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchNameMatches(searchNameMatches string) PoolsAPISearchPoolsRequest {
	r.searchNameMatches = &searchNameMatches
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchDescriptionMatches(searchDescriptionMatches string) PoolsAPISearchPoolsRequest {
	r.searchDescriptionMatches = &searchDescriptionMatches
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchCreatorId(searchCreatorId int32) PoolsAPISearchPoolsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchCreatorName(searchCreatorName string) PoolsAPISearchPoolsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchCategory(searchCategory PoolCategories) PoolsAPISearchPoolsRequest {
	r.searchCategory = &searchCategory
	return r
}

func (r PoolsAPISearchPoolsRequest) SearchIsActive(searchIsActive bool) PoolsAPISearchPoolsRequest {
	r.searchIsActive = &searchIsActive
	return r
}

func (r PoolsAPISearchPoolsRequest) Execute() ([]Pool, *http.Response, error) {
	return r.ApiService.SearchPoolsExecute(r)
}

/*
SearchPools Search Pools

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PoolsAPISearchPoolsRequest
*/
func (a *PoolsAPIService) SearchPools(ctx context.Context) PoolsAPISearchPoolsRequest {
	return PoolsAPISearchPoolsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Pool
func (a *PoolsAPIService) SearchPoolsExecute(r PoolsAPISearchPoolsRequest) ([]Pool, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Pool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolsAPIService.SearchPools")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pools.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchNameMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[name_matches]", r.searchNameMatches, "")
	}
	if r.searchDescriptionMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[description_matches]", r.searchDescriptionMatches, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchCategory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[category]", r.searchCategory, "")
	}
	if r.searchIsActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_active]", r.searchIsActive, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
