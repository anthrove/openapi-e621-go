/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PoolCategories the model 'PoolCategories'
type PoolCategories string

// List of PoolCategories
const (
	POOLCATEGORIES_COLLECTION PoolCategories = "collection"
	POOLCATEGORIES_SERIES     PoolCategories = "series"
)

// All allowed values of PoolCategories enum
var AllowedPoolCategoriesEnumValues = []PoolCategories{
	"collection",
	"series",
}

func (v *PoolCategories) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PoolCategories(value)
	for _, existing := range AllowedPoolCategoriesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PoolCategories", value)
}

// NewPoolCategoriesFromValue returns a pointer to a valid PoolCategories
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPoolCategoriesFromValue(v string) (*PoolCategories, error) {
	ev := PoolCategories(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PoolCategories: valid values are %v", v, AllowedPoolCategoriesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PoolCategories) IsValid() bool {
	for _, existing := range AllowedPoolCategoriesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PoolCategories value
func (v PoolCategories) Ptr() *PoolCategories {
	return &v
}

type NullablePoolCategories struct {
	value *PoolCategories
	isSet bool
}

func (v NullablePoolCategories) Get() *PoolCategories {
	return v.value
}

func (v *NullablePoolCategories) Set(val *PoolCategories) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolCategories) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolCategories(val *PoolCategories) *NullablePoolCategories {
	return &NullablePoolCategories{value: val, isSet: true}
}

func (v NullablePoolCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
