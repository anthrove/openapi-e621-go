/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// TakedownsAPIService TakedownsAPI service
type TakedownsAPIService service

type TakedownsAPIAddPostsToTakedownByIdsRequest struct {
	ctx        context.Context
	ApiService *TakedownsAPIService
	id         float32
	postIds    *string
}

func (r TakedownsAPIAddPostsToTakedownByIdsRequest) PostIds(postIds string) TakedownsAPIAddPostsToTakedownByIdsRequest {
	r.postIds = &postIds
	return r
}

func (r TakedownsAPIAddPostsToTakedownByIdsRequest) Execute() (*AddPostsToTakedownByIds200Response, *http.Response, error) {
	return r.ApiService.AddPostsToTakedownByIdsExecute(r)
}

/*
AddPostsToTakedownByIds Add Posts To Takedown By IDs

You must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPIAddPostsToTakedownByIdsRequest
*/
func (a *TakedownsAPIService) AddPostsToTakedownByIds(ctx context.Context, id float32) TakedownsAPIAddPostsToTakedownByIdsRequest {
	return TakedownsAPIAddPostsToTakedownByIdsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AddPostsToTakedownByIds200Response
func (a *TakedownsAPIService) AddPostsToTakedownByIdsExecute(r TakedownsAPIAddPostsToTakedownByIdsRequest) (*AddPostsToTakedownByIds200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPostsToTakedownByIds200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.AddPostsToTakedownByIds")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}/add_by_ids.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postIds == nil {
		return localVarReturnValue, nil, reportError("postIds is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_ids", r.postIds, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TakedownsAPIAddPostsToTakedownByTagsRequest struct {
	ctx        context.Context
	ApiService *TakedownsAPIService
	id         float32
	postTags   *string
}

func (r TakedownsAPIAddPostsToTakedownByTagsRequest) PostTags(postTags string) TakedownsAPIAddPostsToTakedownByTagsRequest {
	r.postTags = &postTags
	return r
}

func (r TakedownsAPIAddPostsToTakedownByTagsRequest) Execute() (*AddPostsToTakedownByIds200Response, *http.Response, error) {
	return r.ApiService.AddPostsToTakedownByTagsExecute(r)
}

/*
AddPostsToTakedownByTags Add Posts To Takedown By Tags

You must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPIAddPostsToTakedownByTagsRequest
*/
func (a *TakedownsAPIService) AddPostsToTakedownByTags(ctx context.Context, id float32) TakedownsAPIAddPostsToTakedownByTagsRequest {
	return TakedownsAPIAddPostsToTakedownByTagsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AddPostsToTakedownByIds200Response
func (a *TakedownsAPIService) AddPostsToTakedownByTagsExecute(r TakedownsAPIAddPostsToTakedownByTagsRequest) (*AddPostsToTakedownByIds200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AddPostsToTakedownByIds200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.AddPostsToTakedownByTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}/add_by_tags.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postTags == nil {
		return localVarReturnValue, nil, reportError("postTags is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_tags", r.postTags, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TakedownsAPICountMatchingPostsRequest struct {
	ctx        context.Context
	ApiService *TakedownsAPIService
	id         float32
	postTags   *string
}

func (r TakedownsAPICountMatchingPostsRequest) PostTags(postTags string) TakedownsAPICountMatchingPostsRequest {
	r.postTags = &postTags
	return r
}

func (r TakedownsAPICountMatchingPostsRequest) Execute() (*CountMatchingPosts200Response, *http.Response, error) {
	return r.ApiService.CountMatchingPostsExecute(r)
}

/*
CountMatchingPosts Count Matching Posts

You must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPICountMatchingPostsRequest
*/
func (a *TakedownsAPIService) CountMatchingPosts(ctx context.Context, id float32) TakedownsAPICountMatchingPostsRequest {
	return TakedownsAPICountMatchingPostsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CountMatchingPosts200Response
func (a *TakedownsAPIService) CountMatchingPostsExecute(r TakedownsAPICountMatchingPostsRequest) (*CountMatchingPosts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CountMatchingPosts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.CountMatchingPosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}/count_matching_posts.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postTags == nil {
		return localVarReturnValue, nil, reportError("postTags is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_tags", r.postTags, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TakedownsAPICreateTakedownRequest struct {
	ctx                  context.Context
	ApiService           *TakedownsAPIService
	takedownEmail        *string
	takedownReason       *string
	takedownSource       *string
	takedownInstructions *string
	takedownPostIds      *[]float32
	takedownReasonHidden *bool
	takedownNotes        *string
	takedownDelPostIds   *[]float32
	takedownStatus       *string
}

func (r TakedownsAPICreateTakedownRequest) TakedownEmail(takedownEmail string) TakedownsAPICreateTakedownRequest {
	r.takedownEmail = &takedownEmail
	return r
}

func (r TakedownsAPICreateTakedownRequest) TakedownReason(takedownReason string) TakedownsAPICreateTakedownRequest {
	r.takedownReason = &takedownReason
	return r
}

func (r TakedownsAPICreateTakedownRequest) TakedownSource(takedownSource string) TakedownsAPICreateTakedownRequest {
	r.takedownSource = &takedownSource
	return r
}

func (r TakedownsAPICreateTakedownRequest) TakedownInstructions(takedownInstructions string) TakedownsAPICreateTakedownRequest {
	r.takedownInstructions = &takedownInstructions
	return r
}

// takedown[post_ids][]&#x3D;1&amp;takedown[post_ids][]&#x3D;2
func (r TakedownsAPICreateTakedownRequest) TakedownPostIds(takedownPostIds []float32) TakedownsAPICreateTakedownRequest {
	r.takedownPostIds = &takedownPostIds
	return r
}

func (r TakedownsAPICreateTakedownRequest) TakedownReasonHidden(takedownReasonHidden bool) TakedownsAPICreateTakedownRequest {
	r.takedownReasonHidden = &takedownReasonHidden
	return r
}

// Must have the bd staff user flag to use.
func (r TakedownsAPICreateTakedownRequest) TakedownNotes(takedownNotes string) TakedownsAPICreateTakedownRequest {
	r.takedownNotes = &takedownNotes
	return r
}

// Must have the bd staff user flag to use. takedown[del_post_ids][]&#x3D;1&amp;takedown[del_post_ids][]&#x3D;2
func (r TakedownsAPICreateTakedownRequest) TakedownDelPostIds(takedownDelPostIds []float32) TakedownsAPICreateTakedownRequest {
	r.takedownDelPostIds = &takedownDelPostIds
	return r
}

// Must have the bd staff user flag to use.
func (r TakedownsAPICreateTakedownRequest) TakedownStatus(takedownStatus string) TakedownsAPICreateTakedownRequest {
	r.takedownStatus = &takedownStatus
	return r
}

func (r TakedownsAPICreateTakedownRequest) Execute() (*Takedown, *http.Response, error) {
	return r.ApiService.CreateTakedownExecute(r)
}

/*
CreateTakedown Create Takedown

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TakedownsAPICreateTakedownRequest
*/
func (a *TakedownsAPIService) CreateTakedown(ctx context.Context) TakedownsAPICreateTakedownRequest {
	return TakedownsAPICreateTakedownRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Takedown
func (a *TakedownsAPIService) CreateTakedownExecute(r TakedownsAPICreateTakedownRequest) (*Takedown, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Takedown
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.CreateTakedown")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.takedownEmail == nil {
		return localVarReturnValue, nil, reportError("takedownEmail is required and must be specified")
	}
	if r.takedownReason == nil {
		return localVarReturnValue, nil, reportError("takedownReason is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "takedown[email]", r.takedownEmail, "")
	if r.takedownSource != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[source]", r.takedownSource, "")
	}
	if r.takedownInstructions != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[instructions]", r.takedownInstructions, "")
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "takedown[reason]", r.takedownReason, "")
	if r.takedownPostIds != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[post_ids]", r.takedownPostIds, "csv")
	}
	if r.takedownReasonHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[reason_hidden]", r.takedownReasonHidden, "")
	}
	if r.takedownNotes != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[notes]", r.takedownNotes, "")
	}
	if r.takedownDelPostIds != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[del_post_ids]", r.takedownDelPostIds, "csv")
	}
	if r.takedownStatus != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[status]", r.takedownStatus, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TakedownsAPIDeleteTakedownRequest struct {
	ctx        context.Context
	ApiService *TakedownsAPIService
	id         float32
}

func (r TakedownsAPIDeleteTakedownRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTakedownExecute(r)
}

/*
DeleteTakedown Delete Takedown

You must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPIDeleteTakedownRequest
*/
func (a *TakedownsAPIService) DeleteTakedown(ctx context.Context, id float32) TakedownsAPIDeleteTakedownRequest {
	return TakedownsAPIDeleteTakedownRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *TakedownsAPIService) DeleteTakedownExecute(r TakedownsAPIDeleteTakedownRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.DeleteTakedown")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TakedownsAPIEditTakedownRequest struct {
	ctx                  context.Context
	ApiService           *TakedownsAPIService
	id                   float32
	takedownNotes        *string
	takedownReasonHidden *bool
	takedownPosts        *string
	processTakedown      *bool
	deleteReason         *string
}

func (r TakedownsAPIEditTakedownRequest) TakedownNotes(takedownNotes string) TakedownsAPIEditTakedownRequest {
	r.takedownNotes = &takedownNotes
	return r
}

func (r TakedownsAPIEditTakedownRequest) TakedownReasonHidden(takedownReasonHidden bool) TakedownsAPIEditTakedownRequest {
	r.takedownReasonHidden = &takedownReasonHidden
	return r
}

func (r TakedownsAPIEditTakedownRequest) TakedownPosts(takedownPosts string) TakedownsAPIEditTakedownRequest {
	r.takedownPosts = &takedownPosts
	return r
}

// If not truthy, the takedown will be denied.
func (r TakedownsAPIEditTakedownRequest) ProcessTakedown(processTakedown bool) TakedownsAPIEditTakedownRequest {
	r.processTakedown = &processTakedown
	return r
}

func (r TakedownsAPIEditTakedownRequest) DeleteReason(deleteReason string) TakedownsAPIEditTakedownRequest {
	r.deleteReason = &deleteReason
	return r
}

func (r TakedownsAPIEditTakedownRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditTakedownExecute(r)
}

/*
EditTakedown Edit Takedown

You must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPIEditTakedownRequest
*/
func (a *TakedownsAPIService) EditTakedown(ctx context.Context, id float32) TakedownsAPIEditTakedownRequest {
	return TakedownsAPIEditTakedownRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *TakedownsAPIService) EditTakedownExecute(r TakedownsAPIEditTakedownRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.EditTakedown")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.takedownNotes != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[notes]", r.takedownNotes, "")
	}
	if r.takedownReasonHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown[reason_hidden]", r.takedownReasonHidden, "")
	}
	if r.takedownPosts != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "takedown_posts", r.takedownPosts, "")
	}
	if r.processTakedown != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "process_takedown", r.processTakedown, "")
	}
	if r.deleteReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "delete_reason", r.deleteReason, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TakedownsAPIGetTakedownRequest struct {
	ctx        context.Context
	ApiService *TakedownsAPIService
	id         float32
}

func (r TakedownsAPIGetTakedownRequest) Execute() (*Takedown, *http.Response, error) {
	return r.ApiService.GetTakedownExecute(r)
}

/*
GetTakedown Get Takedown

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPIGetTakedownRequest
*/
func (a *TakedownsAPIService) GetTakedown(ctx context.Context, id float32) TakedownsAPIGetTakedownRequest {
	return TakedownsAPIGetTakedownRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Takedown
func (a *TakedownsAPIService) GetTakedownExecute(r TakedownsAPIGetTakedownRequest) (*Takedown, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Takedown
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.GetTakedown")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type TakedownsAPIRemovePostsFromTakedownByIdsRequest struct {
	ctx        context.Context
	ApiService *TakedownsAPIService
	id         float32
	postIds    *string
}

func (r TakedownsAPIRemovePostsFromTakedownByIdsRequest) PostIds(postIds string) TakedownsAPIRemovePostsFromTakedownByIdsRequest {
	r.postIds = &postIds
	return r
}

func (r TakedownsAPIRemovePostsFromTakedownByIdsRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemovePostsFromTakedownByIdsExecute(r)
}

/*
RemovePostsFromTakedownByIds Remove Posts From Takedown By IDs

You must have the bd staff user flag.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the takedown.
	@return TakedownsAPIRemovePostsFromTakedownByIdsRequest
*/
func (a *TakedownsAPIService) RemovePostsFromTakedownByIds(ctx context.Context, id float32) TakedownsAPIRemovePostsFromTakedownByIdsRequest {
	return TakedownsAPIRemovePostsFromTakedownByIdsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *TakedownsAPIService) RemovePostsFromTakedownByIdsExecute(r TakedownsAPIRemovePostsFromTakedownByIdsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.RemovePostsFromTakedownByIds")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns/{id}/remove_by_ids.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postIds == nil {
		return nil, reportError("postIds is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_ids", r.postIds, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type TakedownsAPISearchTakedownsRequest struct {
	ctx                context.Context
	ApiService         *TakedownsAPIService
	limit              *int32
	page               *int32
	searchId           *int32
	searchIpAddr       *string
	searchOrder        *string
	searchStatus       *string
	searchSource       *string
	searchReason       *string
	searchCreatorId    *float32
	searchCreatorName  *string
	searchReasonHidden *bool
	searchInstructions *string
	searchPostId       *float32
	searchNotes        *string
	searchEmail        *string
	searchVericode     *string
}

// The maximum number of results to return. Between 0 and 320.
func (r TakedownsAPISearchTakedownsRequest) Limit(limit int32) TakedownsAPISearchTakedownsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r TakedownsAPISearchTakedownsRequest) Page(page int32) TakedownsAPISearchTakedownsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r TakedownsAPISearchTakedownsRequest) SearchId(searchId int32) TakedownsAPISearchTakedownsRequest {
	r.searchId = &searchId
	return r
}

// Must be Admin+ to use. See [postgres&#39; documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, \&quot;is contained within or equals\&quot; (&#x60;&lt;&lt;&#x3D;&#x60;).
func (r TakedownsAPISearchTakedownsRequest) SearchIpAddr(searchIpAddr string) TakedownsAPISearchTakedownsRequest {
	r.searchIpAddr = &searchIpAddr
	return r
}

func (r TakedownsAPISearchTakedownsRequest) SearchOrder(searchOrder string) TakedownsAPISearchTakedownsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r TakedownsAPISearchTakedownsRequest) SearchStatus(searchStatus string) TakedownsAPISearchTakedownsRequest {
	r.searchStatus = &searchStatus
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchSource(searchSource string) TakedownsAPISearchTakedownsRequest {
	r.searchSource = &searchSource
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchReason(searchReason string) TakedownsAPISearchTakedownsRequest {
	r.searchReason = &searchReason
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchCreatorId(searchCreatorId float32) TakedownsAPISearchTakedownsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchCreatorName(searchCreatorName string) TakedownsAPISearchTakedownsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchReasonHidden(searchReasonHidden bool) TakedownsAPISearchTakedownsRequest {
	r.searchReasonHidden = &searchReasonHidden
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchInstructions(searchInstructions string) TakedownsAPISearchTakedownsRequest {
	r.searchInstructions = &searchInstructions
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchPostId(searchPostId float32) TakedownsAPISearchTakedownsRequest {
	r.searchPostId = &searchPostId
	return r
}

// Must be Moderator+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchNotes(searchNotes string) TakedownsAPISearchTakedownsRequest {
	r.searchNotes = &searchNotes
	return r
}

// Must be Admin+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchEmail(searchEmail string) TakedownsAPISearchTakedownsRequest {
	r.searchEmail = &searchEmail
	return r
}

// Must be Admin+ to use.
func (r TakedownsAPISearchTakedownsRequest) SearchVericode(searchVericode string) TakedownsAPISearchTakedownsRequest {
	r.searchVericode = &searchVericode
	return r
}

func (r TakedownsAPISearchTakedownsRequest) Execute() (*SearchTakedowns200Response, *http.Response, error) {
	return r.ApiService.SearchTakedownsExecute(r)
}

/*
SearchTakedowns Search Takedowns

When no results are found, an object with an `takedowns` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return TakedownsAPISearchTakedownsRequest
*/
func (a *TakedownsAPIService) SearchTakedowns(ctx context.Context) TakedownsAPISearchTakedownsRequest {
	return TakedownsAPISearchTakedownsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchTakedowns200Response
func (a *TakedownsAPIService) SearchTakedownsExecute(r TakedownsAPISearchTakedownsRequest) (*SearchTakedowns200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchTakedowns200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TakedownsAPIService.SearchTakedowns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/takedowns.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchIpAddr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[ip_addr]", r.searchIpAddr, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[status]", r.searchStatus, "")
	}
	if r.searchSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[source]", r.searchSource, "")
	}
	if r.searchReason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[reason]", r.searchReason, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchReasonHidden != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[reason_hidden]", r.searchReasonHidden, "")
	}
	if r.searchInstructions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[instructions]", r.searchInstructions, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchNotes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[notes]", r.searchNotes, "")
	}
	if r.searchEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[email]", r.searchEmail, "")
	}
	if r.searchVericode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[vericode]", r.searchVericode, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
