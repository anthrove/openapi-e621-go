/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostTags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostTags{}

// PostTags struct for PostTags
type PostTags struct {
	General     []string `json:"general"`
	Artist      []string `json:"artist"`
	Copyright   []string `json:"copyright"`
	Character   []string `json:"character"`
	Species     []string `json:"species"`
	Invalid     []string `json:"invalid"`
	Meta        []string `json:"meta"`
	Lore        []string `json:"lore"`
	Contributor []string `json:"contributor"`
}

type _PostTags PostTags

// NewPostTags instantiates a new PostTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostTags(general []string, artist []string, copyright []string, character []string, species []string, invalid []string, meta []string, lore []string, contributor []string) *PostTags {
	this := PostTags{}
	this.General = general
	this.Artist = artist
	this.Copyright = copyright
	this.Character = character
	this.Species = species
	this.Invalid = invalid
	this.Meta = meta
	this.Lore = lore
	this.Contributor = contributor
	return &this
}

// NewPostTagsWithDefaults instantiates a new PostTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostTagsWithDefaults() *PostTags {
	this := PostTags{}
	return &this
}

// GetGeneral returns the General field value
func (o *PostTags) GetGeneral() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.General
}

// GetGeneralOk returns a tuple with the General field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetGeneralOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.General, true
}

// SetGeneral sets field value
func (o *PostTags) SetGeneral(v []string) {
	o.General = v
}

// GetArtist returns the Artist field value
func (o *PostTags) GetArtist() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Artist
}

// GetArtistOk returns a tuple with the Artist field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetArtistOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Artist, true
}

// SetArtist sets field value
func (o *PostTags) SetArtist(v []string) {
	o.Artist = v
}

// GetCopyright returns the Copyright field value
func (o *PostTags) GetCopyright() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Copyright
}

// GetCopyrightOk returns a tuple with the Copyright field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetCopyrightOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Copyright, true
}

// SetCopyright sets field value
func (o *PostTags) SetCopyright(v []string) {
	o.Copyright = v
}

// GetCharacter returns the Character field value
func (o *PostTags) GetCharacter() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Character
}

// GetCharacterOk returns a tuple with the Character field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetCharacterOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Character, true
}

// SetCharacter sets field value
func (o *PostTags) SetCharacter(v []string) {
	o.Character = v
}

// GetSpecies returns the Species field value
func (o *PostTags) GetSpecies() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Species
}

// GetSpeciesOk returns a tuple with the Species field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetSpeciesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Species, true
}

// SetSpecies sets field value
func (o *PostTags) SetSpecies(v []string) {
	o.Species = v
}

// GetInvalid returns the Invalid field value
func (o *PostTags) GetInvalid() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Invalid
}

// GetInvalidOk returns a tuple with the Invalid field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetInvalidOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Invalid, true
}

// SetInvalid sets field value
func (o *PostTags) SetInvalid(v []string) {
	o.Invalid = v
}

// GetMeta returns the Meta field value
func (o *PostTags) GetMeta() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetMetaOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Meta, true
}

// SetMeta sets field value
func (o *PostTags) SetMeta(v []string) {
	o.Meta = v
}

// GetLore returns the Lore field value
func (o *PostTags) GetLore() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Lore
}

// GetLoreOk returns a tuple with the Lore field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetLoreOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lore, true
}

// SetLore sets field value
func (o *PostTags) SetLore(v []string) {
	o.Lore = v
}

// GetContributor returns the Contributor field value
func (o *PostTags) GetContributor() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Contributor
}

// GetContributorOk returns a tuple with the Contributor field value
// and a boolean to check if the value has been set.
func (o *PostTags) GetContributorOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contributor, true
}

// SetContributor sets field value
func (o *PostTags) SetContributor(v []string) {
	o.Contributor = v
}

func (o PostTags) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostTags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["general"] = o.General
	toSerialize["artist"] = o.Artist
	toSerialize["copyright"] = o.Copyright
	toSerialize["character"] = o.Character
	toSerialize["species"] = o.Species
	toSerialize["invalid"] = o.Invalid
	toSerialize["meta"] = o.Meta
	toSerialize["lore"] = o.Lore
	toSerialize["contributor"] = o.Contributor
	return toSerialize, nil
}

func (o *PostTags) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"general",
		"artist",
		"copyright",
		"character",
		"species",
		"invalid",
		"meta",
		"lore",
		"contributor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostTags := _PostTags{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostTags)

	if err != nil {
		return err
	}

	*o = PostTags(varPostTags)

	return err
}

type NullablePostTags struct {
	value *PostTags
	isSet bool
}

func (v NullablePostTags) Get() *PostTags {
	return v.value
}

func (v *NullablePostTags) Set(val *PostTags) {
	v.value = val
	v.isSet = true
}

func (v NullablePostTags) IsSet() bool {
	return v.isSet
}

func (v *NullablePostTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostTags(val *PostTags) *NullablePostTags {
	return &NullablePostTags{value: val, isSet: true}
}

func (v NullablePostTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
