/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// PostDisapprovalsAPIService PostDisapprovalsAPI service
type PostDisapprovalsAPIService service

type PostDisapprovalsAPICreatePostDisapprovalRequest struct {
	ctx                    context.Context
	ApiService             *PostDisapprovalsAPIService
	postDisapprovalPostId  *float32
	postDisapprovalReason  *string
	postDisapprovalMessage *string
}

func (r PostDisapprovalsAPICreatePostDisapprovalRequest) PostDisapprovalPostId(postDisapprovalPostId float32) PostDisapprovalsAPICreatePostDisapprovalRequest {
	r.postDisapprovalPostId = &postDisapprovalPostId
	return r
}

func (r PostDisapprovalsAPICreatePostDisapprovalRequest) PostDisapprovalReason(postDisapprovalReason string) PostDisapprovalsAPICreatePostDisapprovalRequest {
	r.postDisapprovalReason = &postDisapprovalReason
	return r
}

func (r PostDisapprovalsAPICreatePostDisapprovalRequest) PostDisapprovalMessage(postDisapprovalMessage string) PostDisapprovalsAPICreatePostDisapprovalRequest {
	r.postDisapprovalMessage = &postDisapprovalMessage
	return r
}

func (r PostDisapprovalsAPICreatePostDisapprovalRequest) Execute() (*PostDisapproval, *http.Response, error) {
	return r.ApiService.CreatePostDisapprovalExecute(r)
}

/*
CreatePostDisapproval Create Post Disapproval

You must have the "Approve Posts" permission.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostDisapprovalsAPICreatePostDisapprovalRequest
*/
func (a *PostDisapprovalsAPIService) CreatePostDisapproval(ctx context.Context) PostDisapprovalsAPICreatePostDisapprovalRequest {
	return PostDisapprovalsAPICreatePostDisapprovalRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PostDisapproval
func (a *PostDisapprovalsAPIService) CreatePostDisapprovalExecute(r PostDisapprovalsAPICreatePostDisapprovalRequest) (*PostDisapproval, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PostDisapproval
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostDisapprovalsAPIService.CreatePostDisapproval")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moderator/post/disapprovals.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.postDisapprovalPostId == nil {
		return localVarReturnValue, nil, reportError("postDisapprovalPostId is required and must be specified")
	}
	if r.postDisapprovalReason == nil {
		return localVarReturnValue, nil, reportError("postDisapprovalReason is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "post_disapproval[post_id]", r.postDisapprovalPostId, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "post_disapproval[reason]", r.postDisapprovalReason, "")
	if r.postDisapprovalMessage != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "post_disapproval[message]", r.postDisapprovalMessage, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PostDisapprovalsAPISearchPostDisapprovalsRequest struct {
	ctx                 context.Context
	ApiService          *PostDisapprovalsAPIService
	limit               *int32
	page                *int32
	searchId            *int32
	searchOrder         *string
	searchCreatorId     *float32
	searchCreatorName   *string
	searchPostId        *float32
	searchMessage       *string
	searchPostTagsMatch *string
	searchReason        *string
	searchHasMessage    *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) Limit(limit int32) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) Page(page int32) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchId(searchId int32) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchId = &searchId
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchOrder(searchOrder string) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchCreatorId(searchCreatorId float32) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchCreatorName(searchCreatorName string) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchPostId(searchPostId float32) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchPostId = &searchPostId
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchMessage(searchMessage string) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchMessage = &searchMessage
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchPostTagsMatch(searchPostTagsMatch string) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchPostTagsMatch = &searchPostTagsMatch
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchReason(searchReason string) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchReason = &searchReason
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) SearchHasMessage(searchHasMessage bool) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	r.searchHasMessage = &searchHasMessage
	return r
}

func (r PostDisapprovalsAPISearchPostDisapprovalsRequest) Execute() (*SearchPostDisapprovals200Response, *http.Response, error) {
	return r.ApiService.SearchPostDisapprovalsExecute(r)
}

/*
SearchPostDisapprovals Search Post Disapprovals

You must have the "Approve Posts" permission When no results are found, an object with a `post_disapprovals` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return PostDisapprovalsAPISearchPostDisapprovalsRequest
*/
func (a *PostDisapprovalsAPIService) SearchPostDisapprovals(ctx context.Context) PostDisapprovalsAPISearchPostDisapprovalsRequest {
	return PostDisapprovalsAPISearchPostDisapprovalsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchPostDisapprovals200Response
func (a *PostDisapprovalsAPIService) SearchPostDisapprovalsExecute(r PostDisapprovalsAPISearchPostDisapprovalsRequest) (*SearchPostDisapprovals200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchPostDisapprovals200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostDisapprovalsAPIService.SearchPostDisapprovals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/moderator/post/disapprovals.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[message]", r.searchMessage, "")
	}
	if r.searchPostTagsMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_tags_match]", r.searchPostTagsMatch, "")
	}
	if r.searchReason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[reason]", r.searchReason, "")
	}
	if r.searchHasMessage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[has_message]", r.searchHasMessage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
