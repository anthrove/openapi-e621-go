/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// SearchBlips200Response struct for SearchBlips200Response
type SearchBlips200Response struct {
	SearchBlips200ResponseAnyOf *SearchBlips200ResponseAnyOf
	ArrayOfBlip *[]Blip
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *SearchBlips200Response) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SearchBlips200ResponseAnyOf
	err = json.Unmarshal(data, &dst.SearchBlips200ResponseAnyOf);
	if err == nil {
		jsonSearchBlips200ResponseAnyOf, _ := json.Marshal(dst.SearchBlips200ResponseAnyOf)
		if string(jsonSearchBlips200ResponseAnyOf) == "{}" { // empty struct
			dst.SearchBlips200ResponseAnyOf = nil
		} else {
			return nil // data stored in dst.SearchBlips200ResponseAnyOf, return on the first match
		}
	} else {
		dst.SearchBlips200ResponseAnyOf = nil
	}

	// try to unmarshal JSON data into ArrayOfBlip
	err = json.Unmarshal(data, &dst.ArrayOfBlip);
	if err == nil {
		jsonArrayOfBlip, _ := json.Marshal(dst.ArrayOfBlip)
		if string(jsonArrayOfBlip) == "{}" { // empty struct
			dst.ArrayOfBlip = nil
		} else {
			return nil // data stored in dst.ArrayOfBlip, return on the first match
		}
	} else {
		dst.ArrayOfBlip = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(SearchBlips200Response)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *SearchBlips200Response) MarshalJSON() ([]byte, error) {
	if src.SearchBlips200ResponseAnyOf != nil {
		return json.Marshal(&src.SearchBlips200ResponseAnyOf)
	}

	if src.ArrayOfBlip != nil {
		return json.Marshal(&src.ArrayOfBlip)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableSearchBlips200Response struct {
	value *SearchBlips200Response
	isSet bool
}

func (v NullableSearchBlips200Response) Get() *SearchBlips200Response {
	return v.value
}

func (v *NullableSearchBlips200Response) Set(val *SearchBlips200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBlips200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBlips200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBlips200Response(val *SearchBlips200Response) *NullableSearchBlips200Response {
	return &NullableSearchBlips200Response{value: val, isSet: true}
}

func (v NullableSearchBlips200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBlips200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


