/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostSampleAlternate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostSampleAlternate{}

// PostSampleAlternate struct for PostSampleAlternate
type PostSampleAlternate struct {
	Type   string                         `json:"type"`
	Height int32                          `json:"height"`
	Width  int32                          `json:"width"`
	Urls   []PostSampleAlternateUrlsInner `json:"urls"`
}

type _PostSampleAlternate PostSampleAlternate

// NewPostSampleAlternate instantiates a new PostSampleAlternate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostSampleAlternate(type_ string, height int32, width int32, urls []PostSampleAlternateUrlsInner) *PostSampleAlternate {
	this := PostSampleAlternate{}
	this.Type = type_
	this.Height = height
	this.Width = width
	this.Urls = urls
	return &this
}

// NewPostSampleAlternateWithDefaults instantiates a new PostSampleAlternate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostSampleAlternateWithDefaults() *PostSampleAlternate {
	this := PostSampleAlternate{}
	return &this
}

// GetType returns the Type field value
func (o *PostSampleAlternate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PostSampleAlternate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PostSampleAlternate) SetType(v string) {
	o.Type = v
}

// GetHeight returns the Height field value
func (o *PostSampleAlternate) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *PostSampleAlternate) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *PostSampleAlternate) SetHeight(v int32) {
	o.Height = v
}

// GetWidth returns the Width field value
func (o *PostSampleAlternate) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *PostSampleAlternate) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *PostSampleAlternate) SetWidth(v int32) {
	o.Width = v
}

// GetUrls returns the Urls field value
func (o *PostSampleAlternate) GetUrls() []PostSampleAlternateUrlsInner {
	if o == nil {
		var ret []PostSampleAlternateUrlsInner
		return ret
	}

	return o.Urls
}

// GetUrlsOk returns a tuple with the Urls field value
// and a boolean to check if the value has been set.
func (o *PostSampleAlternate) GetUrlsOk() ([]PostSampleAlternateUrlsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Urls, true
}

// SetUrls sets field value
func (o *PostSampleAlternate) SetUrls(v []PostSampleAlternateUrlsInner) {
	o.Urls = v
}

func (o PostSampleAlternate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostSampleAlternate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["height"] = o.Height
	toSerialize["width"] = o.Width
	toSerialize["urls"] = o.Urls
	return toSerialize, nil
}

func (o *PostSampleAlternate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"height",
		"width",
		"urls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostSampleAlternate := _PostSampleAlternate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostSampleAlternate)

	if err != nil {
		return err
	}

	*o = PostSampleAlternate(varPostSampleAlternate)

	return err
}

type NullablePostSampleAlternate struct {
	value *PostSampleAlternate
	isSet bool
}

func (v NullablePostSampleAlternate) Get() *PostSampleAlternate {
	return v.value
}

func (v *NullablePostSampleAlternate) Set(val *PostSampleAlternate) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSampleAlternate) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSampleAlternate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSampleAlternate(val *PostSampleAlternate) *NullablePostSampleAlternate {
	return &NullablePostSampleAlternate{value: val, isSet: true}
}

func (v NullablePostSampleAlternate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSampleAlternate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
