/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetUserIdParameter struct for GetUserIdParameter
type GetUserIdParameter struct {
	Int32  *int32
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *GetUserIdParameter) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Int32
	err = json.Unmarshal(data, &dst.Int32)
	if err == nil {
		jsonInt32, _ := json.Marshal(dst.Int32)
		if string(jsonInt32) == "{}" { // empty struct
			dst.Int32 = nil
		} else {
			return nil // data stored in dst.Int32, return on the first match
		}
	} else {
		dst.Int32 = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(GetUserIdParameter)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *GetUserIdParameter) MarshalJSON() ([]byte, error) {
	if src.Int32 != nil {
		return json.Marshal(&src.Int32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableGetUserIdParameter struct {
	value *GetUserIdParameter
	isSet bool
}

func (v NullableGetUserIdParameter) Get() *GetUserIdParameter {
	return v.value
}

func (v *NullableGetUserIdParameter) Set(val *GetUserIdParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserIdParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserIdParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserIdParameter(val *GetUserIdParameter) *NullableGetUserIdParameter {
	return &NullableGetUserIdParameter{value: val, isSet: true}
}

func (v NullableGetUserIdParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserIdParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
