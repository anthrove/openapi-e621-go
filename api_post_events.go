/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// PostEventsAPIService PostEventsAPI service
type PostEventsAPIService service

type ApiSearchPostEventsRequest struct {
	ctx context.Context
	ApiService *PostEventsAPIService
	limit *float32
	page *float32
	searchId *float32
	searchOrder *string
	searchPostId *float32
	searchCreatorId *float32
	searchCreatorName *string
	searchAction *PostEventActions
}

// The maximum number of results to return. Between 0 and 320.
func (r ApiSearchPostEventsRequest) Limit(limit float32) ApiSearchPostEventsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ApiSearchPostEventsRequest) Page(page float32) ApiSearchPostEventsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ApiSearchPostEventsRequest) SearchId(searchId float32) ApiSearchPostEventsRequest {
	r.searchId = &searchId
	return r
}

func (r ApiSearchPostEventsRequest) SearchOrder(searchOrder string) ApiSearchPostEventsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r ApiSearchPostEventsRequest) SearchPostId(searchPostId float32) ApiSearchPostEventsRequest {
	r.searchPostId = &searchPostId
	return r
}

func (r ApiSearchPostEventsRequest) SearchCreatorId(searchCreatorId float32) ApiSearchPostEventsRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r ApiSearchPostEventsRequest) SearchCreatorName(searchCreatorName string) ApiSearchPostEventsRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r ApiSearchPostEventsRequest) SearchAction(searchAction PostEventActions) ApiSearchPostEventsRequest {
	r.searchAction = &searchAction
	return r
}

func (r ApiSearchPostEventsRequest) Execute() (*SearchPostEvents200Response, *http.Response, error) {
	return r.ApiService.SearchPostEventsExecute(r)
}

/*
SearchPostEvents Search Post Events

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchPostEventsRequest
*/
func (a *PostEventsAPIService) SearchPostEvents(ctx context.Context) ApiSearchPostEventsRequest {
	return ApiSearchPostEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchPostEvents200Response
func (a *PostEventsAPIService) SearchPostEventsExecute(r ApiSearchPostEventsRequest) (*SearchPostEvents200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchPostEvents200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostEventsAPIService.SearchPostEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/post_events.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchAction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[action]", r.searchAction, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
