/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EditArtistRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditArtistRequest{}

// EditArtistRequest struct for EditArtistRequest
type EditArtistRequest struct {
	// Only usable for Janitor+
	ArtistName             *string  `json:"artist[name],omitempty"`
	ArtistOtherNames       []string `json:"artist[other_names],omitempty"`
	ArtistOtherNamesString *string  `json:"artist[other_names_string],omitempty"`
	ArtistUrlString        *string  `json:"artist[url_string],omitempty"`
	ArtistNotes            *string  `json:"artist[notes],omitempty"`
	ArtistGroupName        *string  `json:"artist[group_name],omitempty"`
	// Only usable for Janitor+
	ArtistLinkedUserId NullableFloat32 `json:"artist[linked_user_id],omitempty"`
	// Only usable for Janitor+
	ArtistIsLocked *bool `json:"artist[is_locked],omitempty"`
}

// NewEditArtistRequest instantiates a new EditArtistRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditArtistRequest() *EditArtistRequest {
	this := EditArtistRequest{}
	return &this
}

// NewEditArtistRequestWithDefaults instantiates a new EditArtistRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditArtistRequestWithDefaults() *EditArtistRequest {
	this := EditArtistRequest{}
	return &this
}

// GetArtistName returns the ArtistName field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistName() string {
	if o == nil || IsNil(o.ArtistName) {
		var ret string
		return ret
	}
	return *o.ArtistName
}

// GetArtistNameOk returns a tuple with the ArtistName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistNameOk() (*string, bool) {
	if o == nil || IsNil(o.ArtistName) {
		return nil, false
	}
	return o.ArtistName, true
}

// HasArtistName returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistName() bool {
	if o != nil && !IsNil(o.ArtistName) {
		return true
	}

	return false
}

// SetArtistName gets a reference to the given string and assigns it to the ArtistName field.
func (o *EditArtistRequest) SetArtistName(v string) {
	o.ArtistName = &v
}

// GetArtistOtherNames returns the ArtistOtherNames field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistOtherNames() []string {
	if o == nil || IsNil(o.ArtistOtherNames) {
		var ret []string
		return ret
	}
	return o.ArtistOtherNames
}

// GetArtistOtherNamesOk returns a tuple with the ArtistOtherNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistOtherNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ArtistOtherNames) {
		return nil, false
	}
	return o.ArtistOtherNames, true
}

// HasArtistOtherNames returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistOtherNames() bool {
	if o != nil && !IsNil(o.ArtistOtherNames) {
		return true
	}

	return false
}

// SetArtistOtherNames gets a reference to the given []string and assigns it to the ArtistOtherNames field.
func (o *EditArtistRequest) SetArtistOtherNames(v []string) {
	o.ArtistOtherNames = v
}

// GetArtistOtherNamesString returns the ArtistOtherNamesString field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistOtherNamesString() string {
	if o == nil || IsNil(o.ArtistOtherNamesString) {
		var ret string
		return ret
	}
	return *o.ArtistOtherNamesString
}

// GetArtistOtherNamesStringOk returns a tuple with the ArtistOtherNamesString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistOtherNamesStringOk() (*string, bool) {
	if o == nil || IsNil(o.ArtistOtherNamesString) {
		return nil, false
	}
	return o.ArtistOtherNamesString, true
}

// HasArtistOtherNamesString returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistOtherNamesString() bool {
	if o != nil && !IsNil(o.ArtistOtherNamesString) {
		return true
	}

	return false
}

// SetArtistOtherNamesString gets a reference to the given string and assigns it to the ArtistOtherNamesString field.
func (o *EditArtistRequest) SetArtistOtherNamesString(v string) {
	o.ArtistOtherNamesString = &v
}

// GetArtistUrlString returns the ArtistUrlString field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistUrlString() string {
	if o == nil || IsNil(o.ArtistUrlString) {
		var ret string
		return ret
	}
	return *o.ArtistUrlString
}

// GetArtistUrlStringOk returns a tuple with the ArtistUrlString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistUrlStringOk() (*string, bool) {
	if o == nil || IsNil(o.ArtistUrlString) {
		return nil, false
	}
	return o.ArtistUrlString, true
}

// HasArtistUrlString returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistUrlString() bool {
	if o != nil && !IsNil(o.ArtistUrlString) {
		return true
	}

	return false
}

// SetArtistUrlString gets a reference to the given string and assigns it to the ArtistUrlString field.
func (o *EditArtistRequest) SetArtistUrlString(v string) {
	o.ArtistUrlString = &v
}

// GetArtistNotes returns the ArtistNotes field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistNotes() string {
	if o == nil || IsNil(o.ArtistNotes) {
		var ret string
		return ret
	}
	return *o.ArtistNotes
}

// GetArtistNotesOk returns a tuple with the ArtistNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ArtistNotes) {
		return nil, false
	}
	return o.ArtistNotes, true
}

// HasArtistNotes returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistNotes() bool {
	if o != nil && !IsNil(o.ArtistNotes) {
		return true
	}

	return false
}

// SetArtistNotes gets a reference to the given string and assigns it to the ArtistNotes field.
func (o *EditArtistRequest) SetArtistNotes(v string) {
	o.ArtistNotes = &v
}

// GetArtistGroupName returns the ArtistGroupName field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistGroupName() string {
	if o == nil || IsNil(o.ArtistGroupName) {
		var ret string
		return ret
	}
	return *o.ArtistGroupName
}

// GetArtistGroupNameOk returns a tuple with the ArtistGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.ArtistGroupName) {
		return nil, false
	}
	return o.ArtistGroupName, true
}

// HasArtistGroupName returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistGroupName() bool {
	if o != nil && !IsNil(o.ArtistGroupName) {
		return true
	}

	return false
}

// SetArtistGroupName gets a reference to the given string and assigns it to the ArtistGroupName field.
func (o *EditArtistRequest) SetArtistGroupName(v string) {
	o.ArtistGroupName = &v
}

// GetArtistLinkedUserId returns the ArtistLinkedUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EditArtistRequest) GetArtistLinkedUserId() float32 {
	if o == nil || IsNil(o.ArtistLinkedUserId.Get()) {
		var ret float32
		return ret
	}
	return *o.ArtistLinkedUserId.Get()
}

// GetArtistLinkedUserIdOk returns a tuple with the ArtistLinkedUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EditArtistRequest) GetArtistLinkedUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArtistLinkedUserId.Get(), o.ArtistLinkedUserId.IsSet()
}

// HasArtistLinkedUserId returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistLinkedUserId() bool {
	if o != nil && o.ArtistLinkedUserId.IsSet() {
		return true
	}

	return false
}

// SetArtistLinkedUserId gets a reference to the given NullableFloat32 and assigns it to the ArtistLinkedUserId field.
func (o *EditArtistRequest) SetArtistLinkedUserId(v float32) {
	o.ArtistLinkedUserId.Set(&v)
}

// SetArtistLinkedUserIdNil sets the value for ArtistLinkedUserId to be an explicit nil
func (o *EditArtistRequest) SetArtistLinkedUserIdNil() {
	o.ArtistLinkedUserId.Set(nil)
}

// UnsetArtistLinkedUserId ensures that no value is present for ArtistLinkedUserId, not even an explicit nil
func (o *EditArtistRequest) UnsetArtistLinkedUserId() {
	o.ArtistLinkedUserId.Unset()
}

// GetArtistIsLocked returns the ArtistIsLocked field value if set, zero value otherwise.
func (o *EditArtistRequest) GetArtistIsLocked() bool {
	if o == nil || IsNil(o.ArtistIsLocked) {
		var ret bool
		return ret
	}
	return *o.ArtistIsLocked
}

// GetArtistIsLockedOk returns a tuple with the ArtistIsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditArtistRequest) GetArtistIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.ArtistIsLocked) {
		return nil, false
	}
	return o.ArtistIsLocked, true
}

// HasArtistIsLocked returns a boolean if a field has been set.
func (o *EditArtistRequest) HasArtistIsLocked() bool {
	if o != nil && !IsNil(o.ArtistIsLocked) {
		return true
	}

	return false
}

// SetArtistIsLocked gets a reference to the given bool and assigns it to the ArtistIsLocked field.
func (o *EditArtistRequest) SetArtistIsLocked(v bool) {
	o.ArtistIsLocked = &v
}

func (o EditArtistRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditArtistRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArtistName) {
		toSerialize["artist[name]"] = o.ArtistName
	}
	if !IsNil(o.ArtistOtherNames) {
		toSerialize["artist[other_names]"] = o.ArtistOtherNames
	}
	if !IsNil(o.ArtistOtherNamesString) {
		toSerialize["artist[other_names_string]"] = o.ArtistOtherNamesString
	}
	if !IsNil(o.ArtistUrlString) {
		toSerialize["artist[url_string]"] = o.ArtistUrlString
	}
	if !IsNil(o.ArtistNotes) {
		toSerialize["artist[notes]"] = o.ArtistNotes
	}
	if !IsNil(o.ArtistGroupName) {
		toSerialize["artist[group_name]"] = o.ArtistGroupName
	}
	if o.ArtistLinkedUserId.IsSet() {
		toSerialize["artist[linked_user_id]"] = o.ArtistLinkedUserId.Get()
	}
	if !IsNil(o.ArtistIsLocked) {
		toSerialize["artist[is_locked]"] = o.ArtistIsLocked
	}
	return toSerialize, nil
}

type NullableEditArtistRequest struct {
	value *EditArtistRequest
	isSet bool
}

func (v NullableEditArtistRequest) Get() *EditArtistRequest {
	return v.value
}

func (v *NullableEditArtistRequest) Set(val *EditArtistRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditArtistRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditArtistRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditArtistRequest(val *EditArtistRequest) *NullableEditArtistRequest {
	return &NullableEditArtistRequest{value: val, isSet: true}
}

func (v NullableEditArtistRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditArtistRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
