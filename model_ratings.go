/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// Ratings the model 'Ratings'
type Ratings string

// List of Ratings
const (
	S Ratings = "s"
	Q Ratings = "q"
	E Ratings = "e"
)

// All allowed values of Ratings enum
var AllowedRatingsEnumValues = []Ratings{
	"s",
	"q",
	"e",
}

func (v *Ratings) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Ratings(value)
	for _, existing := range AllowedRatingsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Ratings", value)
}

// NewRatingsFromValue returns a pointer to a valid Ratings
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatingsFromValue(v string) (*Ratings, error) {
	ev := Ratings(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Ratings: valid values are %v", v, AllowedRatingsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Ratings) IsValid() bool {
	for _, existing := range AllowedRatingsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Ratings value
func (v Ratings) Ptr() *Ratings {
	return &v
}

type NullableRatings struct {
	value *Ratings
	isSet bool
}

func (v NullableRatings) Get() *Ratings {
	return v.value
}

func (v *NullableRatings) Set(val *Ratings) {
	v.value = val
	v.isSet = true
}

func (v NullableRatings) IsSet() bool {
	return v.isSet
}

func (v *NullableRatings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatings(val *Ratings) *NullableRatings {
	return &NullableRatings{value: val, isSet: true}
}

func (v NullableRatings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

