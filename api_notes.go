/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NotesAPIService NotesAPI service
type NotesAPIService service

type ApiCreateNoteRequest struct {
	ctx context.Context
	ApiService *NotesAPIService
	notePostId *float32
	noteX *float32
	noteY *float32
	noteWidth *float32
	noteHeight *float32
	noteBody *string
	noteHtmlId *string
}

func (r ApiCreateNoteRequest) NotePostId(notePostId float32) ApiCreateNoteRequest {
	r.notePostId = &notePostId
	return r
}

func (r ApiCreateNoteRequest) NoteX(noteX float32) ApiCreateNoteRequest {
	r.noteX = &noteX
	return r
}

func (r ApiCreateNoteRequest) NoteY(noteY float32) ApiCreateNoteRequest {
	r.noteY = &noteY
	return r
}

func (r ApiCreateNoteRequest) NoteWidth(noteWidth float32) ApiCreateNoteRequest {
	r.noteWidth = &noteWidth
	return r
}

func (r ApiCreateNoteRequest) NoteHeight(noteHeight float32) ApiCreateNoteRequest {
	r.noteHeight = &noteHeight
	return r
}

func (r ApiCreateNoteRequest) NoteBody(noteBody string) ApiCreateNoteRequest {
	r.noteBody = &noteBody
	return r
}

// Passthrough, used in frontend.
func (r ApiCreateNoteRequest) NoteHtmlId(noteHtmlId string) ApiCreateNoteRequest {
	r.noteHtmlId = &noteHtmlId
	return r
}

func (r ApiCreateNoteRequest) Execute() (*CreateNote201Response, *http.Response, error) {
	return r.ApiService.CreateNoteExecute(r)
}

/*
CreateNote Create Note

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNoteRequest
*/
func (a *NotesAPIService) CreateNote(ctx context.Context) ApiCreateNoteRequest {
	return ApiCreateNoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateNote201Response
func (a *NotesAPIService) CreateNoteExecute(r ApiCreateNoteRequest) (*CreateNote201Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateNote201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotesAPIService.CreateNote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notes.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.notePostId == nil {
		return localVarReturnValue, nil, reportError("notePostId is required and must be specified")
	}
	if r.noteX == nil {
		return localVarReturnValue, nil, reportError("noteX is required and must be specified")
	}
	if r.noteY == nil {
		return localVarReturnValue, nil, reportError("noteY is required and must be specified")
	}
	if r.noteWidth == nil {
		return localVarReturnValue, nil, reportError("noteWidth is required and must be specified")
	}
	if r.noteHeight == nil {
		return localVarReturnValue, nil, reportError("noteHeight is required and must be specified")
	}
	if r.noteBody == nil {
		return localVarReturnValue, nil, reportError("noteBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "note[post_id]", r.notePostId, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "note[x]", r.noteX, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "note[y]", r.noteY, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "note[width]", r.noteWidth, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "note[height]", r.noteHeight, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "note[body]", r.noteBody, "")
	if r.noteHtmlId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "note[html_id]", r.noteHtmlId, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNoteRequest struct {
	ctx context.Context
	ApiService *NotesAPIService
	id float32
}

func (r ApiDeleteNoteRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteNoteExecute(r)
}

/*
DeleteNote Delete Note

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the note.
 @return ApiDeleteNoteRequest
*/
func (a *NotesAPIService) DeleteNote(ctx context.Context, id float32) ApiDeleteNoteRequest {
	return ApiDeleteNoteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NotesAPIService) DeleteNoteExecute(r ApiDeleteNoteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotesAPIService.DeleteNote")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notes/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditNoteRequest struct {
	ctx context.Context
	ApiService *NotesAPIService
	id float32
	noteX *float32
	noteY *float32
	noteWidth *float32
	noteHeight *float32
	noteBody *string
}

func (r ApiEditNoteRequest) NoteX(noteX float32) ApiEditNoteRequest {
	r.noteX = &noteX
	return r
}

func (r ApiEditNoteRequest) NoteY(noteY float32) ApiEditNoteRequest {
	r.noteY = &noteY
	return r
}

func (r ApiEditNoteRequest) NoteWidth(noteWidth float32) ApiEditNoteRequest {
	r.noteWidth = &noteWidth
	return r
}

func (r ApiEditNoteRequest) NoteHeight(noteHeight float32) ApiEditNoteRequest {
	r.noteHeight = &noteHeight
	return r
}

func (r ApiEditNoteRequest) NoteBody(noteBody string) ApiEditNoteRequest {
	r.noteBody = &noteBody
	return r
}

func (r ApiEditNoteRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditNoteExecute(r)
}

/*
EditNote Edit Note

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the note.
 @return ApiEditNoteRequest
*/
func (a *NotesAPIService) EditNote(ctx context.Context, id float32) ApiEditNoteRequest {
	return ApiEditNoteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NotesAPIService) EditNoteExecute(r ApiEditNoteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotesAPIService.EditNote")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notes/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.noteX != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "note[x]", r.noteX, "")
	}
	if r.noteY != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "note[y]", r.noteY, "")
	}
	if r.noteWidth != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "note[width]", r.noteWidth, "")
	}
	if r.noteHeight != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "note[height]", r.noteHeight, "")
	}
	if r.noteBody != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "note[body]", r.noteBody, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNoteRequest struct {
	ctx context.Context
	ApiService *NotesAPIService
	id float32
}

func (r ApiGetNoteRequest) Execute() (*Note, *http.Response, error) {
	return r.ApiService.GetNoteExecute(r)
}

/*
GetNote Get Note

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the note.
 @return ApiGetNoteRequest
*/
func (a *NotesAPIService) GetNote(ctx context.Context, id float32) ApiGetNoteRequest {
	return ApiGetNoteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Note
func (a *NotesAPIService) GetNoteExecute(r ApiGetNoteRequest) (*Note, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Note
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotesAPIService.GetNote")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notes/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRevertNoteRequest struct {
	ctx context.Context
	ApiService *NotesAPIService
	id float32
	versionId *float32
}

// The version ID to revert to.
func (r ApiRevertNoteRequest) VersionId(versionId float32) ApiRevertNoteRequest {
	r.versionId = &versionId
	return r
}

func (r ApiRevertNoteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevertNoteExecute(r)
}

/*
RevertNote Revert Note

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the note.
 @return ApiRevertNoteRequest
*/
func (a *NotesAPIService) RevertNote(ctx context.Context, id float32) ApiRevertNoteRequest {
	return ApiRevertNoteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NotesAPIService) RevertNoteExecute(r ApiRevertNoteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotesAPIService.RevertNote")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notes/{id}/revert.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.versionId == nil {
		return nil, reportError("versionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version_id", r.versionId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchNotesRequest struct {
	ctx context.Context
	ApiService *NotesAPIService
	limit *float32
	page *float32
	searchId *float32
	searchOrder *string
	searchBodyMatches *string
	searchIsActive *bool
	searchPostId *float32
	searchPostTagsMatch *string
	searchPostNoteUpdaterId *float32
	searchPostNoteUpdaterName *string
	searchCreatorId *float32
	searchCreatorName *string
}

// The maximum number of results to return. Between 0 and 320.
func (r ApiSearchNotesRequest) Limit(limit float32) ApiSearchNotesRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ApiSearchNotesRequest) Page(page float32) ApiSearchNotesRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ApiSearchNotesRequest) SearchId(searchId float32) ApiSearchNotesRequest {
	r.searchId = &searchId
	return r
}

func (r ApiSearchNotesRequest) SearchOrder(searchOrder string) ApiSearchNotesRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r ApiSearchNotesRequest) SearchBodyMatches(searchBodyMatches string) ApiSearchNotesRequest {
	r.searchBodyMatches = &searchBodyMatches
	return r
}

func (r ApiSearchNotesRequest) SearchIsActive(searchIsActive bool) ApiSearchNotesRequest {
	r.searchIsActive = &searchIsActive
	return r
}

func (r ApiSearchNotesRequest) SearchPostId(searchPostId float32) ApiSearchNotesRequest {
	r.searchPostId = &searchPostId
	return r
}

func (r ApiSearchNotesRequest) SearchPostTagsMatch(searchPostTagsMatch string) ApiSearchNotesRequest {
	r.searchPostTagsMatch = &searchPostTagsMatch
	return r
}

func (r ApiSearchNotesRequest) SearchPostNoteUpdaterId(searchPostNoteUpdaterId float32) ApiSearchNotesRequest {
	r.searchPostNoteUpdaterId = &searchPostNoteUpdaterId
	return r
}

func (r ApiSearchNotesRequest) SearchPostNoteUpdaterName(searchPostNoteUpdaterName string) ApiSearchNotesRequest {
	r.searchPostNoteUpdaterName = &searchPostNoteUpdaterName
	return r
}

func (r ApiSearchNotesRequest) SearchCreatorId(searchCreatorId float32) ApiSearchNotesRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r ApiSearchNotesRequest) SearchCreatorName(searchCreatorName string) ApiSearchNotesRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r ApiSearchNotesRequest) Execute() (*SearchNotes200Response, *http.Response, error) {
	return r.ApiService.SearchNotesExecute(r)
}

/*
SearchNotes Search Notes

When no results are found, an object with an `notes` key is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchNotesRequest
*/
func (a *NotesAPIService) SearchNotes(ctx context.Context) ApiSearchNotesRequest {
	return ApiSearchNotesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchNotes200Response
func (a *NotesAPIService) SearchNotesExecute(r ApiSearchNotesRequest) (*SearchNotes200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchNotes200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NotesAPIService.SearchNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/notes.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchBodyMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[body_matches]", r.searchBodyMatches, "")
	}
	if r.searchIsActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_active]", r.searchIsActive, "")
	}
	if r.searchPostId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_id]", r.searchPostId, "")
	}
	if r.searchPostTagsMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_tags_match]", r.searchPostTagsMatch, "")
	}
	if r.searchPostNoteUpdaterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_note_updater_id]", r.searchPostNoteUpdaterId, "")
	}
	if r.searchPostNoteUpdaterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[post_note_updater_name]", r.searchPostNoteUpdaterName, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
