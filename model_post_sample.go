/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostSample type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostSample{}

// PostSample struct for PostSample
type PostSample struct {
	Has        bool                 `json:"has"`
	Height     NullableInt32        `json:"height"`
	Width      NullableInt32        `json:"width"`
	Url        NullableString       `json:"url"`
	Alternates PostSampleAlternates `json:"alternates"`
}

type _PostSample PostSample

// NewPostSample instantiates a new PostSample object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostSample(has bool, height NullableInt32, width NullableInt32, url NullableString, alternates PostSampleAlternates) *PostSample {
	this := PostSample{}
	this.Has = has
	this.Height = height
	this.Width = width
	this.Url = url
	this.Alternates = alternates
	return &this
}

// NewPostSampleWithDefaults instantiates a new PostSample object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostSampleWithDefaults() *PostSample {
	this := PostSample{}
	return &this
}

// GetHas returns the Has field value
func (o *PostSample) GetHas() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Has
}

// GetHasOk returns a tuple with the Has field value
// and a boolean to check if the value has been set.
func (o *PostSample) GetHasOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Has, true
}

// SetHas sets field value
func (o *PostSample) SetHas(v bool) {
	o.Has = v
}

// GetHeight returns the Height field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PostSample) GetHeight() int32 {
	if o == nil || o.Height.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Height.Get()
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostSample) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Height.Get(), o.Height.IsSet()
}

// SetHeight sets field value
func (o *PostSample) SetHeight(v int32) {
	o.Height.Set(&v)
}

// GetWidth returns the Width field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *PostSample) GetWidth() int32 {
	if o == nil || o.Width.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Width.Get()
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostSample) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Width.Get(), o.Width.IsSet()
}

// SetWidth sets field value
func (o *PostSample) SetWidth(v int32) {
	o.Width.Set(&v)
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PostSample) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}

	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostSample) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// SetUrl sets field value
func (o *PostSample) SetUrl(v string) {
	o.Url.Set(&v)
}

// GetAlternates returns the Alternates field value
func (o *PostSample) GetAlternates() PostSampleAlternates {
	if o == nil {
		var ret PostSampleAlternates
		return ret
	}

	return o.Alternates
}

// GetAlternatesOk returns a tuple with the Alternates field value
// and a boolean to check if the value has been set.
func (o *PostSample) GetAlternatesOk() (*PostSampleAlternates, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Alternates, true
}

// SetAlternates sets field value
func (o *PostSample) SetAlternates(v PostSampleAlternates) {
	o.Alternates = v
}

func (o PostSample) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostSample) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["has"] = o.Has
	toSerialize["height"] = o.Height.Get()
	toSerialize["width"] = o.Width.Get()
	toSerialize["url"] = o.Url.Get()
	toSerialize["alternates"] = o.Alternates
	return toSerialize, nil
}

func (o *PostSample) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"has",
		"height",
		"width",
		"url",
		"alternates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostSample := _PostSample{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostSample)

	if err != nil {
		return err
	}

	*o = PostSample(varPostSample)

	return err
}

type NullablePostSample struct {
	value *PostSample
	isSet bool
}

func (v NullablePostSample) Get() *PostSample {
	return v.value
}

func (v *NullablePostSample) Set(val *PostSample) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSample) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSample) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSample(val *PostSample) *NullablePostSample {
	return &NullablePostSample{value: val, isSet: true}
}

func (v NullablePostSample) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSample) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
