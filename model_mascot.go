/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Mascot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mascot{}

// Mascot struct for Mascot
type Mascot struct {
	Id              int32     `json:"id"`
	CreatorId       int32     `json:"creator_id"`
	DisplayName     string    `json:"display_name"`
	Md5             string    `json:"md5"`
	FileExt         string    `json:"file_ext"`
	BackgroundColor string    `json:"background_color"`
	ArtistUrl       string    `json:"artist_url"`
	ArtistName      string    `json:"artist_name"`
	Active          bool      `json:"active"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	AvailableOn     []string  `json:"available_on"`
	UrlPath         string    `json:"url_path"`
}

type _Mascot Mascot

// NewMascot instantiates a new Mascot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMascot(id int32, creatorId int32, displayName string, md5 string, fileExt string, backgroundColor string, artistUrl string, artistName string, active bool, createdAt time.Time, updatedAt time.Time, availableOn []string, urlPath string) *Mascot {
	this := Mascot{}
	this.Id = id
	this.CreatorId = creatorId
	this.DisplayName = displayName
	this.Md5 = md5
	this.FileExt = fileExt
	this.BackgroundColor = backgroundColor
	this.ArtistUrl = artistUrl
	this.ArtistName = artistName
	this.Active = active
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.AvailableOn = availableOn
	this.UrlPath = urlPath
	return &this
}

// NewMascotWithDefaults instantiates a new Mascot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMascotWithDefaults() *Mascot {
	this := Mascot{}
	return &this
}

// GetId returns the Id field value
func (o *Mascot) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Mascot) SetId(v int32) {
	o.Id = v
}

// GetCreatorId returns the CreatorId field value
func (o *Mascot) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *Mascot) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetDisplayName returns the DisplayName field value
func (o *Mascot) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *Mascot) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetMd5 returns the Md5 field value
func (o *Mascot) GetMd5() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetMd5Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Md5, true
}

// SetMd5 sets field value
func (o *Mascot) SetMd5(v string) {
	o.Md5 = v
}

// GetFileExt returns the FileExt field value
func (o *Mascot) GetFileExt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileExt
}

// GetFileExtOk returns a tuple with the FileExt field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetFileExtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileExt, true
}

// SetFileExt sets field value
func (o *Mascot) SetFileExt(v string) {
	o.FileExt = v
}

// GetBackgroundColor returns the BackgroundColor field value
func (o *Mascot) GetBackgroundColor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetBackgroundColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackgroundColor, true
}

// SetBackgroundColor sets field value
func (o *Mascot) SetBackgroundColor(v string) {
	o.BackgroundColor = v
}

// GetArtistUrl returns the ArtistUrl field value
func (o *Mascot) GetArtistUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtistUrl
}

// GetArtistUrlOk returns a tuple with the ArtistUrl field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetArtistUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtistUrl, true
}

// SetArtistUrl sets field value
func (o *Mascot) SetArtistUrl(v string) {
	o.ArtistUrl = v
}

// GetArtistName returns the ArtistName field value
func (o *Mascot) GetArtistName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ArtistName
}

// GetArtistNameOk returns a tuple with the ArtistName field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetArtistNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArtistName, true
}

// SetArtistName sets field value
func (o *Mascot) SetArtistName(v string) {
	o.ArtistName = v
}

// GetActive returns the Active field value
func (o *Mascot) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Mascot) SetActive(v bool) {
	o.Active = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Mascot) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Mascot) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Mascot) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Mascot) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetAvailableOn returns the AvailableOn field value
func (o *Mascot) GetAvailableOn() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AvailableOn
}

// GetAvailableOnOk returns a tuple with the AvailableOn field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetAvailableOnOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailableOn, true
}

// SetAvailableOn sets field value
func (o *Mascot) SetAvailableOn(v []string) {
	o.AvailableOn = v
}

// GetUrlPath returns the UrlPath field value
func (o *Mascot) GetUrlPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UrlPath
}

// GetUrlPathOk returns a tuple with the UrlPath field value
// and a boolean to check if the value has been set.
func (o *Mascot) GetUrlPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UrlPath, true
}

// SetUrlPath sets field value
func (o *Mascot) SetUrlPath(v string) {
	o.UrlPath = v
}

func (o Mascot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mascot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["display_name"] = o.DisplayName
	toSerialize["md5"] = o.Md5
	toSerialize["file_ext"] = o.FileExt
	toSerialize["background_color"] = o.BackgroundColor
	toSerialize["artist_url"] = o.ArtistUrl
	toSerialize["artist_name"] = o.ArtistName
	toSerialize["active"] = o.Active
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["available_on"] = o.AvailableOn
	toSerialize["url_path"] = o.UrlPath
	return toSerialize, nil
}

func (o *Mascot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"creator_id",
		"display_name",
		"md5",
		"file_ext",
		"background_color",
		"artist_url",
		"artist_name",
		"active",
		"created_at",
		"updated_at",
		"available_on",
		"url_path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMascot := _Mascot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMascot)

	if err != nil {
		return err
	}

	*o = Mascot(varMascot)

	return err
}

type NullableMascot struct {
	value *Mascot
	isSet bool
}

func (v NullableMascot) Get() *Mascot {
	return v.value
}

func (v *NullableMascot) Set(val *Mascot) {
	v.value = val
	v.isSet = true
}

func (v NullableMascot) IsSet() bool {
	return v.isSet
}

func (v *NullableMascot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMascot(val *Mascot) *NullableMascot {
	return &NullableMascot{value: val, isSet: true}
}

func (v NullableMascot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMascot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
