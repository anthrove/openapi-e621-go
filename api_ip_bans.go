/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// IPBansAPIService IPBansAPI service
type IPBansAPIService service

type IPBansAPICreateIPBanRequest struct {
	ctx         context.Context
	ApiService  *IPBansAPIService
	ipBanIpAddr *string
	ipBanReason *string
}

func (r IPBansAPICreateIPBanRequest) IpBanIpAddr(ipBanIpAddr string) IPBansAPICreateIPBanRequest {
	r.ipBanIpAddr = &ipBanIpAddr
	return r
}

func (r IPBansAPICreateIPBanRequest) IpBanReason(ipBanReason string) IPBansAPICreateIPBanRequest {
	r.ipBanReason = &ipBanReason
	return r
}

func (r IPBansAPICreateIPBanRequest) Execute() (*IPBan, *http.Response, error) {
	return r.ApiService.CreateIPBanExecute(r)
}

/*
CreateIPBan Create IP Ban

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IPBansAPICreateIPBanRequest
*/
func (a *IPBansAPIService) CreateIPBan(ctx context.Context) IPBansAPICreateIPBanRequest {
	return IPBansAPICreateIPBanRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return IPBan
func (a *IPBansAPIService) CreateIPBanExecute(r IPBansAPICreateIPBanRequest) (*IPBan, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *IPBan
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPBansAPIService.CreateIPBan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ip_bans.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ipBanIpAddr == nil {
		return localVarReturnValue, nil, reportError("ipBanIpAddr is required and must be specified")
	}
	if r.ipBanReason == nil {
		return localVarReturnValue, nil, reportError("ipBanReason is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "ip_ban[ip_addr]", r.ipBanIpAddr, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "ip_ban[reason]", r.ipBanReason, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type IPBansAPIDeleteIPBanRequest struct {
	ctx        context.Context
	ApiService *IPBansAPIService
	id         int32
}

func (r IPBansAPIDeleteIPBanRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteIPBanExecute(r)
}

/*
DeleteIPBan Delete IP Ban

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the ip ban.
	@return IPBansAPIDeleteIPBanRequest
*/
func (a *IPBansAPIService) DeleteIPBan(ctx context.Context, id int32) IPBansAPIDeleteIPBanRequest {
	return IPBansAPIDeleteIPBanRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *IPBansAPIService) DeleteIPBanExecute(r IPBansAPIDeleteIPBanRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPBansAPIService.DeleteIPBan")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ip_bans/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IPBansAPIListIPBansRequest struct {
	ctx              context.Context
	ApiService       *IPBansAPIService
	limit            *int32
	page             *int32
	searchId         *int32
	searchIpAddr     *string
	searchOrder      *string
	searchBannerId   *int32
	searchBannerName *string
	searchReason     *string
}

// The maximum number of results to return. Between 0 and 320.
func (r IPBansAPIListIPBansRequest) Limit(limit int32) IPBansAPIListIPBansRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r IPBansAPIListIPBansRequest) Page(page int32) IPBansAPIListIPBansRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r IPBansAPIListIPBansRequest) SearchId(searchId int32) IPBansAPIListIPBansRequest {
	r.searchId = &searchId
	return r
}

// Must be Admin+ to use. See [postgres&#39; documentation](https://www.postgresql.org/docs/9.3/functions-net.html) for information on how this is parsed. Specifically, \&quot;is contained within or equals\&quot; (&#x60;&lt;&lt;&#x3D;&#x60;).
func (r IPBansAPIListIPBansRequest) SearchIpAddr(searchIpAddr string) IPBansAPIListIPBansRequest {
	r.searchIpAddr = &searchIpAddr
	return r
}

func (r IPBansAPIListIPBansRequest) SearchOrder(searchOrder string) IPBansAPIListIPBansRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r IPBansAPIListIPBansRequest) SearchBannerId(searchBannerId int32) IPBansAPIListIPBansRequest {
	r.searchBannerId = &searchBannerId
	return r
}

func (r IPBansAPIListIPBansRequest) SearchBannerName(searchBannerName string) IPBansAPIListIPBansRequest {
	r.searchBannerName = &searchBannerName
	return r
}

func (r IPBansAPIListIPBansRequest) SearchReason(searchReason string) IPBansAPIListIPBansRequest {
	r.searchReason = &searchReason
	return r
}

func (r IPBansAPIListIPBansRequest) Execute() (*ListIPBans200Response, *http.Response, error) {
	return r.ApiService.ListIPBansExecute(r)
}

/*
ListIPBans List IP Bans

You must be Admin+. When no results are found, an object with an `ip_bans` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return IPBansAPIListIPBansRequest
*/
func (a *IPBansAPIService) ListIPBans(ctx context.Context) IPBansAPIListIPBansRequest {
	return IPBansAPIListIPBansRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ListIPBans200Response
func (a *IPBansAPIService) ListIPBansExecute(r IPBansAPIListIPBansRequest) (*ListIPBans200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListIPBans200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IPBansAPIService.ListIPBans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ip_bans.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchIpAddr != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[ip_addr]", r.searchIpAddr, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchBannerId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[banner_id]", r.searchBannerId, "")
	}
	if r.searchBannerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[banner_name]", r.searchBannerName, "")
	}
	if r.searchReason != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[reason]", r.searchReason, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
