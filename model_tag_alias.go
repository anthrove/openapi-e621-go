/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TagAlias type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagAlias{}

// TagAlias struct for TagAlias
type TagAlias struct {
	Id             int32           `json:"id"`
	AntecedentName string          `json:"antecedent_name"`
	Reason         string          `json:"reason"`
	CreatorId      int32           `json:"creator_id"`
	CreatedAt      NullableTime    `json:"created_at"`
	ForumPostId    NullableFloat32 `json:"forum_post_id"`
	UpdatedAt      NullableTime    `json:"updated_at"`
	ForumTopicId   NullableFloat32 `json:"forum_topic_id"`
	ConsequentName string          `json:"consequent_name"`
	// Note: The \"error\" status will be proceeded by an error, ex: \"error: Validation failed: A tag alias for tag_name already exists\"
	Status     TagRequestStatuses `json:"status"`
	PostCount  int32              `json:"post_count"`
	ApproverId NullableFloat32    `json:"approver_id"`
}

type _TagAlias TagAlias

// NewTagAlias instantiates a new TagAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagAlias(id int32, antecedentName string, reason string, creatorId int32, createdAt NullableTime, forumPostId NullableFloat32, updatedAt NullableTime, forumTopicId NullableFloat32, consequentName string, status TagRequestStatuses, postCount int32, approverId NullableFloat32) *TagAlias {
	this := TagAlias{}
	this.Id = id
	this.AntecedentName = antecedentName
	this.Reason = reason
	this.CreatorId = creatorId
	this.CreatedAt = createdAt
	this.ForumPostId = forumPostId
	this.UpdatedAt = updatedAt
	this.ForumTopicId = forumTopicId
	this.ConsequentName = consequentName
	this.Status = status
	this.PostCount = postCount
	this.ApproverId = approverId
	return &this
}

// NewTagAliasWithDefaults instantiates a new TagAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagAliasWithDefaults() *TagAlias {
	this := TagAlias{}
	return &this
}

// GetId returns the Id field value
func (o *TagAlias) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TagAlias) SetId(v int32) {
	o.Id = v
}

// GetAntecedentName returns the AntecedentName field value
func (o *TagAlias) GetAntecedentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AntecedentName
}

// GetAntecedentNameOk returns a tuple with the AntecedentName field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetAntecedentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AntecedentName, true
}

// SetAntecedentName sets field value
func (o *TagAlias) SetAntecedentName(v string) {
	o.AntecedentName = v
}

// GetReason returns the Reason field value
func (o *TagAlias) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *TagAlias) SetReason(v string) {
	o.Reason = v
}

// GetCreatorId returns the CreatorId field value
func (o *TagAlias) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *TagAlias) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetCreatedAt returns the CreatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TagAlias) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagAlias) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// SetCreatedAt sets field value
func (o *TagAlias) SetCreatedAt(v time.Time) {
	o.CreatedAt.Set(&v)
}

// GetForumPostId returns the ForumPostId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *TagAlias) GetForumPostId() float32 {
	if o == nil || o.ForumPostId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.ForumPostId.Get()
}

// GetForumPostIdOk returns a tuple with the ForumPostId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagAlias) GetForumPostIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForumPostId.Get(), o.ForumPostId.IsSet()
}

// SetForumPostId sets field value
func (o *TagAlias) SetForumPostId(v float32) {
	o.ForumPostId.Set(&v)
}

// GetUpdatedAt returns the UpdatedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *TagAlias) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagAlias) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// SetUpdatedAt sets field value
func (o *TagAlias) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// GetForumTopicId returns the ForumTopicId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *TagAlias) GetForumTopicId() float32 {
	if o == nil || o.ForumTopicId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.ForumTopicId.Get()
}

// GetForumTopicIdOk returns a tuple with the ForumTopicId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagAlias) GetForumTopicIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForumTopicId.Get(), o.ForumTopicId.IsSet()
}

// SetForumTopicId sets field value
func (o *TagAlias) SetForumTopicId(v float32) {
	o.ForumTopicId.Set(&v)
}

// GetConsequentName returns the ConsequentName field value
func (o *TagAlias) GetConsequentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsequentName
}

// GetConsequentNameOk returns a tuple with the ConsequentName field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetConsequentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsequentName, true
}

// SetConsequentName sets field value
func (o *TagAlias) SetConsequentName(v string) {
	o.ConsequentName = v
}

// GetStatus returns the Status field value
func (o *TagAlias) GetStatus() TagRequestStatuses {
	if o == nil {
		var ret TagRequestStatuses
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetStatusOk() (*TagRequestStatuses, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TagAlias) SetStatus(v TagRequestStatuses) {
	o.Status = v
}

// GetPostCount returns the PostCount field value
func (o *TagAlias) GetPostCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PostCount
}

// GetPostCountOk returns a tuple with the PostCount field value
// and a boolean to check if the value has been set.
func (o *TagAlias) GetPostCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostCount, true
}

// SetPostCount sets field value
func (o *TagAlias) SetPostCount(v int32) {
	o.PostCount = v
}

// GetApproverId returns the ApproverId field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *TagAlias) GetApproverId() float32 {
	if o == nil || o.ApproverId.Get() == nil {
		var ret float32
		return ret
	}

	return *o.ApproverId.Get()
}

// GetApproverIdOk returns a tuple with the ApproverId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagAlias) GetApproverIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApproverId.Get(), o.ApproverId.IsSet()
}

// SetApproverId sets field value
func (o *TagAlias) SetApproverId(v float32) {
	o.ApproverId.Set(&v)
}

func (o TagAlias) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagAlias) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["antecedent_name"] = o.AntecedentName
	toSerialize["reason"] = o.Reason
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["created_at"] = o.CreatedAt.Get()
	toSerialize["forum_post_id"] = o.ForumPostId.Get()
	toSerialize["updated_at"] = o.UpdatedAt.Get()
	toSerialize["forum_topic_id"] = o.ForumTopicId.Get()
	toSerialize["consequent_name"] = o.ConsequentName
	toSerialize["status"] = o.Status
	toSerialize["post_count"] = o.PostCount
	toSerialize["approver_id"] = o.ApproverId.Get()
	return toSerialize, nil
}

func (o *TagAlias) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"antecedent_name",
		"reason",
		"creator_id",
		"created_at",
		"forum_post_id",
		"updated_at",
		"forum_topic_id",
		"consequent_name",
		"status",
		"post_count",
		"approver_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagAlias := _TagAlias{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagAlias)

	if err != nil {
		return err
	}

	*o = TagAlias(varTagAlias)

	return err
}

type NullableTagAlias struct {
	value *TagAlias
	isSet bool
}

func (v NullableTagAlias) Get() *TagAlias {
	return v.value
}

func (v *NullableTagAlias) Set(val *TagAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableTagAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableTagAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagAlias(val *TagAlias) *NullableTagAlias {
	return &NullableTagAlias{value: val, isSet: true}
}

func (v NullableTagAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
