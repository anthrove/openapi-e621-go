/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// WikiPagesAPIService WikiPagesAPI service
type WikiPagesAPIService service

type WikiPagesAPICreateWikiPageRequest struct {
	ctx                              context.Context
	ApiService                       *WikiPagesAPIService
	wikiPageTitle                    *string
	wikiPageBody                     *string
	wikiPageEditReason               *string
	wikiPageParent                   *string
	wikiPageIsLocked                 *bool
	wikiPageIsDeleted                *bool
	wikiPageSkipSecondaryValidations *bool
}

func (r WikiPagesAPICreateWikiPageRequest) WikiPageTitle(wikiPageTitle string) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageTitle = &wikiPageTitle
	return r
}

func (r WikiPagesAPICreateWikiPageRequest) WikiPageBody(wikiPageBody string) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageBody = &wikiPageBody
	return r
}

func (r WikiPagesAPICreateWikiPageRequest) WikiPageEditReason(wikiPageEditReason string) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageEditReason = &wikiPageEditReason
	return r
}

// Must be Privileged+ to use.
func (r WikiPagesAPICreateWikiPageRequest) WikiPageParent(wikiPageParent string) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageParent = &wikiPageParent
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPICreateWikiPageRequest) WikiPageIsLocked(wikiPageIsLocked bool) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageIsLocked = &wikiPageIsLocked
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPICreateWikiPageRequest) WikiPageIsDeleted(wikiPageIsDeleted bool) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageIsDeleted = &wikiPageIsDeleted
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPICreateWikiPageRequest) WikiPageSkipSecondaryValidations(wikiPageSkipSecondaryValidations bool) WikiPagesAPICreateWikiPageRequest {
	r.wikiPageSkipSecondaryValidations = &wikiPageSkipSecondaryValidations
	return r
}

func (r WikiPagesAPICreateWikiPageRequest) Execute() (*WikiPage, *http.Response, error) {
	return r.ApiService.CreateWikiPageExecute(r)
}

/*
CreateWikiPage Create Wiki Page

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WikiPagesAPICreateWikiPageRequest
*/
func (a *WikiPagesAPIService) CreateWikiPage(ctx context.Context) WikiPagesAPICreateWikiPageRequest {
	return WikiPagesAPICreateWikiPageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return WikiPage
func (a *WikiPagesAPIService) CreateWikiPageExecute(r WikiPagesAPICreateWikiPageRequest) (*WikiPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WikiPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.CreateWikiPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wikiPageTitle == nil {
		return localVarReturnValue, nil, reportError("wikiPageTitle is required and must be specified")
	}
	if r.wikiPageBody == nil {
		return localVarReturnValue, nil, reportError("wikiPageBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[title]", r.wikiPageTitle, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[body]", r.wikiPageBody, "")
	if r.wikiPageEditReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[edit_reason]", r.wikiPageEditReason, "")
	}
	if r.wikiPageParent != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[parent]", r.wikiPageParent, "")
	}
	if r.wikiPageIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_locked]", r.wikiPageIsLocked, "")
	}
	if r.wikiPageIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_deleted]", r.wikiPageIsDeleted, "")
	}
	if r.wikiPageSkipSecondaryValidations != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[skip_secondary_validations]", r.wikiPageSkipSecondaryValidations, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WikiPagesAPIDeleteWikiPageRequest struct {
	ctx        context.Context
	ApiService *WikiPagesAPIService
	id         int32
}

func (r WikiPagesAPIDeleteWikiPageRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWikiPageExecute(r)
}

/*
DeleteWikiPage Delete Wiki Page

You must be Admin+

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the wiki page.
	@return WikiPagesAPIDeleteWikiPageRequest
*/
func (a *WikiPagesAPIService) DeleteWikiPage(ctx context.Context, id int32) WikiPagesAPIDeleteWikiPageRequest {
	return WikiPagesAPIDeleteWikiPageRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *WikiPagesAPIService) DeleteWikiPageExecute(r WikiPagesAPIDeleteWikiPageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.DeleteWikiPage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WikiPagesAPIEditWikiPageRequest struct {
	ctx                              context.Context
	ApiService                       *WikiPagesAPIService
	id                               int32
	wikiPageBody                     *string
	wikiPageEditReason               *string
	wikiPageParent                   *string
	wikiPageTitle                    *string
	wikiPageIsLocked                 *bool
	wikiPageIsDeleted                *bool
	wikiPageSkipSecondaryValidations *bool
}

func (r WikiPagesAPIEditWikiPageRequest) WikiPageBody(wikiPageBody string) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageBody = &wikiPageBody
	return r
}

func (r WikiPagesAPIEditWikiPageRequest) WikiPageEditReason(wikiPageEditReason string) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageEditReason = &wikiPageEditReason
	return r
}

// Must be Privileged+ to use.
func (r WikiPagesAPIEditWikiPageRequest) WikiPageParent(wikiPageParent string) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageParent = &wikiPageParent
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPIEditWikiPageRequest) WikiPageTitle(wikiPageTitle string) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageTitle = &wikiPageTitle
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPIEditWikiPageRequest) WikiPageIsLocked(wikiPageIsLocked bool) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageIsLocked = &wikiPageIsLocked
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPIEditWikiPageRequest) WikiPageIsDeleted(wikiPageIsDeleted bool) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageIsDeleted = &wikiPageIsDeleted
	return r
}

// Must be Janitor+ to use.
func (r WikiPagesAPIEditWikiPageRequest) WikiPageSkipSecondaryValidations(wikiPageSkipSecondaryValidations bool) WikiPagesAPIEditWikiPageRequest {
	r.wikiPageSkipSecondaryValidations = &wikiPageSkipSecondaryValidations
	return r
}

func (r WikiPagesAPIEditWikiPageRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditWikiPageExecute(r)
}

/*
EditWikiPage Edit Wiki Page

You must be Janitor+ if the wiki page is locked.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the wiki page.
	@return WikiPagesAPIEditWikiPageRequest
*/
func (a *WikiPagesAPIService) EditWikiPage(ctx context.Context, id int32) WikiPagesAPIEditWikiPageRequest {
	return WikiPagesAPIEditWikiPageRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *WikiPagesAPIService) EditWikiPageExecute(r WikiPagesAPIEditWikiPageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.EditWikiPage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.wikiPageBody != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[body]", r.wikiPageBody, "")
	}
	if r.wikiPageEditReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[edit_reason]", r.wikiPageEditReason, "")
	}
	if r.wikiPageParent != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[parent]", r.wikiPageParent, "")
	}
	if r.wikiPageTitle != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[title]", r.wikiPageTitle, "")
	}
	if r.wikiPageIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_locked]", r.wikiPageIsLocked, "")
	}
	if r.wikiPageIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_deleted]", r.wikiPageIsDeleted, "")
	}
	if r.wikiPageSkipSecondaryValidations != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[skip_secondary_validations]", r.wikiPageSkipSecondaryValidations, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WikiPagesAPIGetWikiPageRequest struct {
	ctx        context.Context
	ApiService *WikiPagesAPIService
	id         int32
}

func (r WikiPagesAPIGetWikiPageRequest) Execute() (*WikiPage, *http.Response, error) {
	return r.ApiService.GetWikiPageExecute(r)
}

/*
GetWikiPage Get Wiki Page

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID or name of the wiki page.
	@return WikiPagesAPIGetWikiPageRequest
*/
func (a *WikiPagesAPIService) GetWikiPage(ctx context.Context, id int32) WikiPagesAPIGetWikiPageRequest {
	return WikiPagesAPIGetWikiPageRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return WikiPage
func (a *WikiPagesAPIService) GetWikiPageExecute(r WikiPagesAPIGetWikiPageRequest) (*WikiPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WikiPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.GetWikiPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WikiPagesAPIRevertWikiPageRequest struct {
	ctx        context.Context
	ApiService *WikiPagesAPIService
	id         int32
	versionId  *int32
}

// The version ID to revert to.
func (r WikiPagesAPIRevertWikiPageRequest) VersionId(versionId int32) WikiPagesAPIRevertWikiPageRequest {
	r.versionId = &versionId
	return r
}

func (r WikiPagesAPIRevertWikiPageRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevertWikiPageExecute(r)
}

/*
RevertWikiPage Revert Wiki Page

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the wiki page.
	@return WikiPagesAPIRevertWikiPageRequest
*/
func (a *WikiPagesAPIService) RevertWikiPage(ctx context.Context, id int32) WikiPagesAPIRevertWikiPageRequest {
	return WikiPagesAPIRevertWikiPageRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *WikiPagesAPIService) RevertWikiPageExecute(r WikiPagesAPIRevertWikiPageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.RevertWikiPage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_page/{id}/revert.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.versionId == nil {
		return nil, reportError("versionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version_id", r.versionId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WikiPagesAPISearchWikiPagesRequest struct {
	ctx                     context.Context
	ApiService              *WikiPagesAPIService
	limit                   *int32
	page                    *int32
	searchId                *int32
	searchOrder             *string
	searchTitle             *string
	searchTitleMatches      *string
	searchBodyMatches       *string
	searchOtherNamesMatch   *string
	searchCreatorId         *int32
	searchCreatorName       *string
	searchParent            *string
	searchOtherNamesPresent *bool
	searchIsLocked          *bool
	searchIsDeleted         *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r WikiPagesAPISearchWikiPagesRequest) Limit(limit int32) WikiPagesAPISearchWikiPagesRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r WikiPagesAPISearchWikiPagesRequest) Page(page int32) WikiPagesAPISearchWikiPagesRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r WikiPagesAPISearchWikiPagesRequest) SearchId(searchId int32) WikiPagesAPISearchWikiPagesRequest {
	r.searchId = &searchId
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchOrder(searchOrder string) WikiPagesAPISearchWikiPagesRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchTitle(searchTitle string) WikiPagesAPISearchWikiPagesRequest {
	r.searchTitle = &searchTitle
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchTitleMatches(searchTitleMatches string) WikiPagesAPISearchWikiPagesRequest {
	r.searchTitleMatches = &searchTitleMatches
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchBodyMatches(searchBodyMatches string) WikiPagesAPISearchWikiPagesRequest {
	r.searchBodyMatches = &searchBodyMatches
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchOtherNamesMatch(searchOtherNamesMatch string) WikiPagesAPISearchWikiPagesRequest {
	r.searchOtherNamesMatch = &searchOtherNamesMatch
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchCreatorId(searchCreatorId int32) WikiPagesAPISearchWikiPagesRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchCreatorName(searchCreatorName string) WikiPagesAPISearchWikiPagesRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchParent(searchParent string) WikiPagesAPISearchWikiPagesRequest {
	r.searchParent = &searchParent
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchOtherNamesPresent(searchOtherNamesPresent bool) WikiPagesAPISearchWikiPagesRequest {
	r.searchOtherNamesPresent = &searchOtherNamesPresent
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchIsLocked(searchIsLocked bool) WikiPagesAPISearchWikiPagesRequest {
	r.searchIsLocked = &searchIsLocked
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) SearchIsDeleted(searchIsDeleted bool) WikiPagesAPISearchWikiPagesRequest {
	r.searchIsDeleted = &searchIsDeleted
	return r
}

func (r WikiPagesAPISearchWikiPagesRequest) Execute() ([]WikiPage, *http.Response, error) {
	return r.ApiService.SearchWikiPagesExecute(r)
}

/*
SearchWikiPages Search Wiki Pages

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WikiPagesAPISearchWikiPagesRequest
*/
func (a *WikiPagesAPIService) SearchWikiPages(ctx context.Context) WikiPagesAPISearchWikiPagesRequest {
	return WikiPagesAPISearchWikiPagesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []WikiPage
func (a *WikiPagesAPIService) SearchWikiPagesExecute(r WikiPagesAPISearchWikiPagesRequest) ([]WikiPage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []WikiPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.SearchWikiPages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title]", r.searchTitle, "")
	}
	if r.searchTitleMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title_matches]", r.searchTitleMatches, "")
	}
	if r.searchBodyMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[body_matches]", r.searchBodyMatches, "")
	}
	if r.searchOtherNamesMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[other_names_match]", r.searchOtherNamesMatch, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchParent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[parent]", r.searchParent, "")
	}
	if r.searchOtherNamesPresent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[other_names_present]", r.searchOtherNamesPresent, "")
	}
	if r.searchIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_locked]", r.searchIsLocked, "")
	}
	if r.searchIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_deleted]", r.searchIsDeleted, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
