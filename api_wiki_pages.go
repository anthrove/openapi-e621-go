/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WikiPagesAPIService WikiPagesAPI service
type WikiPagesAPIService service

type ApiCreateWikiPageRequest struct {
	ctx context.Context
	ApiService *WikiPagesAPIService
	wikiPageTitle *string
	wikiPageBody *string
	wikiPageEditReason *string
	wikiPageParent *string
	wikiPageIsLocked *bool
	wikiPageIsDeleted *bool
	wikiPageSkipSecondaryValidations *bool
}

func (r ApiCreateWikiPageRequest) WikiPageTitle(wikiPageTitle string) ApiCreateWikiPageRequest {
	r.wikiPageTitle = &wikiPageTitle
	return r
}

func (r ApiCreateWikiPageRequest) WikiPageBody(wikiPageBody string) ApiCreateWikiPageRequest {
	r.wikiPageBody = &wikiPageBody
	return r
}

func (r ApiCreateWikiPageRequest) WikiPageEditReason(wikiPageEditReason string) ApiCreateWikiPageRequest {
	r.wikiPageEditReason = &wikiPageEditReason
	return r
}

// Must be Privileged+ to use.
func (r ApiCreateWikiPageRequest) WikiPageParent(wikiPageParent string) ApiCreateWikiPageRequest {
	r.wikiPageParent = &wikiPageParent
	return r
}

// Must be Janitor+ to use.
func (r ApiCreateWikiPageRequest) WikiPageIsLocked(wikiPageIsLocked bool) ApiCreateWikiPageRequest {
	r.wikiPageIsLocked = &wikiPageIsLocked
	return r
}

// Must be Janitor+ to use.
func (r ApiCreateWikiPageRequest) WikiPageIsDeleted(wikiPageIsDeleted bool) ApiCreateWikiPageRequest {
	r.wikiPageIsDeleted = &wikiPageIsDeleted
	return r
}

// Must be Janitor+ to use.
func (r ApiCreateWikiPageRequest) WikiPageSkipSecondaryValidations(wikiPageSkipSecondaryValidations bool) ApiCreateWikiPageRequest {
	r.wikiPageSkipSecondaryValidations = &wikiPageSkipSecondaryValidations
	return r
}

func (r ApiCreateWikiPageRequest) Execute() (*WikiPage, *http.Response, error) {
	return r.ApiService.CreateWikiPageExecute(r)
}

/*
CreateWikiPage Create Wiki Page

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWikiPageRequest
*/
func (a *WikiPagesAPIService) CreateWikiPage(ctx context.Context) ApiCreateWikiPageRequest {
	return ApiCreateWikiPageRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WikiPage
func (a *WikiPagesAPIService) CreateWikiPageExecute(r ApiCreateWikiPageRequest) (*WikiPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WikiPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.CreateWikiPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.wikiPageTitle == nil {
		return localVarReturnValue, nil, reportError("wikiPageTitle is required and must be specified")
	}
	if r.wikiPageBody == nil {
		return localVarReturnValue, nil, reportError("wikiPageBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[title]", r.wikiPageTitle, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[body]", r.wikiPageBody, "")
	if r.wikiPageEditReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[edit_reason]", r.wikiPageEditReason, "")
	}
	if r.wikiPageParent != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[parent]", r.wikiPageParent, "")
	}
	if r.wikiPageIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_locked]", r.wikiPageIsLocked, "")
	}
	if r.wikiPageIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_deleted]", r.wikiPageIsDeleted, "")
	}
	if r.wikiPageSkipSecondaryValidations != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[skip_secondary_validations]", r.wikiPageSkipSecondaryValidations, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteWikiPageRequest struct {
	ctx context.Context
	ApiService *WikiPagesAPIService
	id float32
}

func (r ApiDeleteWikiPageRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWikiPageExecute(r)
}

/*
DeleteWikiPage Delete Wiki Page

You must be Admin+

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the wiki page.
 @return ApiDeleteWikiPageRequest
*/
func (a *WikiPagesAPIService) DeleteWikiPage(ctx context.Context, id float32) ApiDeleteWikiPageRequest {
	return ApiDeleteWikiPageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WikiPagesAPIService) DeleteWikiPageExecute(r ApiDeleteWikiPageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.DeleteWikiPage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditWikiPageRequest struct {
	ctx context.Context
	ApiService *WikiPagesAPIService
	id float32
	wikiPageBody *string
	wikiPageEditReason *string
	wikiPageParent *string
	wikiPageTitle *string
	wikiPageIsLocked *bool
	wikiPageIsDeleted *bool
	wikiPageSkipSecondaryValidations *bool
}

func (r ApiEditWikiPageRequest) WikiPageBody(wikiPageBody string) ApiEditWikiPageRequest {
	r.wikiPageBody = &wikiPageBody
	return r
}

func (r ApiEditWikiPageRequest) WikiPageEditReason(wikiPageEditReason string) ApiEditWikiPageRequest {
	r.wikiPageEditReason = &wikiPageEditReason
	return r
}

// Must be Privileged+ to use.
func (r ApiEditWikiPageRequest) WikiPageParent(wikiPageParent string) ApiEditWikiPageRequest {
	r.wikiPageParent = &wikiPageParent
	return r
}

// Must be Janitor+ to use.
func (r ApiEditWikiPageRequest) WikiPageTitle(wikiPageTitle string) ApiEditWikiPageRequest {
	r.wikiPageTitle = &wikiPageTitle
	return r
}

// Must be Janitor+ to use.
func (r ApiEditWikiPageRequest) WikiPageIsLocked(wikiPageIsLocked bool) ApiEditWikiPageRequest {
	r.wikiPageIsLocked = &wikiPageIsLocked
	return r
}

// Must be Janitor+ to use.
func (r ApiEditWikiPageRequest) WikiPageIsDeleted(wikiPageIsDeleted bool) ApiEditWikiPageRequest {
	r.wikiPageIsDeleted = &wikiPageIsDeleted
	return r
}

// Must be Janitor+ to use.
func (r ApiEditWikiPageRequest) WikiPageSkipSecondaryValidations(wikiPageSkipSecondaryValidations bool) ApiEditWikiPageRequest {
	r.wikiPageSkipSecondaryValidations = &wikiPageSkipSecondaryValidations
	return r
}

func (r ApiEditWikiPageRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditWikiPageExecute(r)
}

/*
EditWikiPage Edit Wiki Page

You must be Janitor+ if the wiki page is locked.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the wiki page.
 @return ApiEditWikiPageRequest
*/
func (a *WikiPagesAPIService) EditWikiPage(ctx context.Context, id float32) ApiEditWikiPageRequest {
	return ApiEditWikiPageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WikiPagesAPIService) EditWikiPageExecute(r ApiEditWikiPageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.EditWikiPage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.wikiPageBody != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[body]", r.wikiPageBody, "")
	}
	if r.wikiPageEditReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[edit_reason]", r.wikiPageEditReason, "")
	}
	if r.wikiPageParent != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[parent]", r.wikiPageParent, "")
	}
	if r.wikiPageTitle != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[title]", r.wikiPageTitle, "")
	}
	if r.wikiPageIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_locked]", r.wikiPageIsLocked, "")
	}
	if r.wikiPageIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[is_deleted]", r.wikiPageIsDeleted, "")
	}
	if r.wikiPageSkipSecondaryValidations != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "wiki_page[skip_secondary_validations]", r.wikiPageSkipSecondaryValidations, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetWikiPageRequest struct {
	ctx context.Context
	ApiService *WikiPagesAPIService
	id float32
}

func (r ApiGetWikiPageRequest) Execute() (*WikiPage, *http.Response, error) {
	return r.ApiService.GetWikiPageExecute(r)
}

/*
GetWikiPage Get Wiki Page

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID or name of the wiki page.
 @return ApiGetWikiPageRequest
*/
func (a *WikiPagesAPIService) GetWikiPage(ctx context.Context, id float32) ApiGetWikiPageRequest {
	return ApiGetWikiPageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WikiPage
func (a *WikiPagesAPIService) GetWikiPageExecute(r ApiGetWikiPageRequest) (*WikiPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WikiPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.GetWikiPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRevertWikiPageRequest struct {
	ctx context.Context
	ApiService *WikiPagesAPIService
	id float32
	versionId *float32
}

// The version ID to revert to.
func (r ApiRevertWikiPageRequest) VersionId(versionId float32) ApiRevertWikiPageRequest {
	r.versionId = &versionId
	return r
}

func (r ApiRevertWikiPageRequest) Execute() (*http.Response, error) {
	return r.ApiService.RevertWikiPageExecute(r)
}

/*
RevertWikiPage Revert Wiki Page

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the wiki page.
 @return ApiRevertWikiPageRequest
*/
func (a *WikiPagesAPIService) RevertWikiPage(ctx context.Context, id float32) ApiRevertWikiPageRequest {
	return ApiRevertWikiPageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WikiPagesAPIService) RevertWikiPageExecute(r ApiRevertWikiPageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.RevertWikiPage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_page/{id}/revert.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.versionId == nil {
		return nil, reportError("versionId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version_id", r.versionId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchWikiPagesRequest struct {
	ctx context.Context
	ApiService *WikiPagesAPIService
	limit *float32
	page *float32
	searchId *float32
	searchOrder *string
	searchTitle *string
	searchTitleMatches *string
	searchBodyMatches *string
	searchOtherNamesMatch *string
	searchCreatorId *float32
	searchCreatorName *string
	searchParent *string
	searchOtherNamesPresent *bool
	searchIsLocked *bool
	searchIsDeleted *bool
}

// The maximum number of results to return. Between 0 and 320.
func (r ApiSearchWikiPagesRequest) Limit(limit float32) ApiSearchWikiPagesRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ApiSearchWikiPagesRequest) Page(page float32) ApiSearchWikiPagesRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ApiSearchWikiPagesRequest) SearchId(searchId float32) ApiSearchWikiPagesRequest {
	r.searchId = &searchId
	return r
}

func (r ApiSearchWikiPagesRequest) SearchOrder(searchOrder string) ApiSearchWikiPagesRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r ApiSearchWikiPagesRequest) SearchTitle(searchTitle string) ApiSearchWikiPagesRequest {
	r.searchTitle = &searchTitle
	return r
}

func (r ApiSearchWikiPagesRequest) SearchTitleMatches(searchTitleMatches string) ApiSearchWikiPagesRequest {
	r.searchTitleMatches = &searchTitleMatches
	return r
}

func (r ApiSearchWikiPagesRequest) SearchBodyMatches(searchBodyMatches string) ApiSearchWikiPagesRequest {
	r.searchBodyMatches = &searchBodyMatches
	return r
}

func (r ApiSearchWikiPagesRequest) SearchOtherNamesMatch(searchOtherNamesMatch string) ApiSearchWikiPagesRequest {
	r.searchOtherNamesMatch = &searchOtherNamesMatch
	return r
}

func (r ApiSearchWikiPagesRequest) SearchCreatorId(searchCreatorId float32) ApiSearchWikiPagesRequest {
	r.searchCreatorId = &searchCreatorId
	return r
}

func (r ApiSearchWikiPagesRequest) SearchCreatorName(searchCreatorName string) ApiSearchWikiPagesRequest {
	r.searchCreatorName = &searchCreatorName
	return r
}

func (r ApiSearchWikiPagesRequest) SearchParent(searchParent string) ApiSearchWikiPagesRequest {
	r.searchParent = &searchParent
	return r
}

func (r ApiSearchWikiPagesRequest) SearchOtherNamesPresent(searchOtherNamesPresent bool) ApiSearchWikiPagesRequest {
	r.searchOtherNamesPresent = &searchOtherNamesPresent
	return r
}

func (r ApiSearchWikiPagesRequest) SearchIsLocked(searchIsLocked bool) ApiSearchWikiPagesRequest {
	r.searchIsLocked = &searchIsLocked
	return r
}

func (r ApiSearchWikiPagesRequest) SearchIsDeleted(searchIsDeleted bool) ApiSearchWikiPagesRequest {
	r.searchIsDeleted = &searchIsDeleted
	return r
}

func (r ApiSearchWikiPagesRequest) Execute() ([]WikiPage, *http.Response, error) {
	return r.ApiService.SearchWikiPagesExecute(r)
}

/*
SearchWikiPages Search Wiki Pages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchWikiPagesRequest
*/
func (a *WikiPagesAPIService) SearchWikiPages(ctx context.Context) ApiSearchWikiPagesRequest {
	return ApiSearchWikiPagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WikiPage
func (a *WikiPagesAPIService) SearchWikiPagesExecute(r ApiSearchWikiPagesRequest) ([]WikiPage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WikiPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WikiPagesAPIService.SearchWikiPages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wiki_pages.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchTitle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title]", r.searchTitle, "")
	}
	if r.searchTitleMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[title_matches]", r.searchTitleMatches, "")
	}
	if r.searchBodyMatches != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[body_matches]", r.searchBodyMatches, "")
	}
	if r.searchOtherNamesMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[other_names_match]", r.searchOtherNamesMatch, "")
	}
	if r.searchCreatorId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_id]", r.searchCreatorId, "")
	}
	if r.searchCreatorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[creator_name]", r.searchCreatorName, "")
	}
	if r.searchParent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[parent]", r.searchParent, "")
	}
	if r.searchOtherNamesPresent != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[other_names_present]", r.searchOtherNamesPresent, "")
	}
	if r.searchIsLocked != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_locked]", r.searchIsLocked, "")
	}
	if r.searchIsDeleted != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[is_deleted]", r.searchIsDeleted, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
