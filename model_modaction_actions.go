/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// ModactionActions the model 'ModactionActions'
type ModactionActions string

// List of ModactionActions
const (
	ARTIST_PAGE_RENAME ModactionActions = "artist_page_rename"
	ARTIST_PAGE_LOCK ModactionActions = "artist_page_lock"
	ARTIST_PAGE_UNLOCK ModactionActions = "artist_page_unlock"
	ARTIST_USER_LINKED ModactionActions = "artist_user_linked"
	ARTIST_USER_UNLINKED ModactionActions = "artist_user_unlinked"
	AVOID_POSTING_CREATE ModactionActions = "avoid_posting_create"
	AVOID_POSTING_UPDATE ModactionActions = "avoid_posting_update"
	AVOID_POSTING_DELETE ModactionActions = "avoid_posting_delete"
	AVOID_POSTING_UNDELETE ModactionActions = "avoid_posting_undelete"
	AVOID_POSTING_DESTROY ModactionActions = "avoid_posting_destroy"
	BLIP_DELETE ModactionActions = "blip_delete"
	BLIP_HIDE ModactionActions = "blip_hide"
	BLIP_UNHIDE ModactionActions = "blip_unhide"
	BLIP_UPDATE ModactionActions = "blip_update"
	COMMENT_DELETE ModactionActions = "comment_delete"
	COMMENT_HIDE ModactionActions = "comment_hide"
	COMMENT_UNHIDE ModactionActions = "comment_unhide"
	COMMENT_UPDATE ModactionActions = "comment_update"
	FORUM_CATEGORY_CREATE ModactionActions = "forum_category_create"
	FORUM_CATEGORY_DELETE ModactionActions = "forum_category_delete"
	FORUM_CATEGORY_UPDATE ModactionActions = "forum_category_update"
	FORUM_POST_DELETE ModactionActions = "forum_post_delete"
	FORUM_POST_HIDE ModactionActions = "forum_post_hide"
	FORUM_POST_UNHIDE ModactionActions = "forum_post_unhide"
	FORUM_POST_UPDATE ModactionActions = "forum_post_update"
	FORUM_TOPIC_DELETE ModactionActions = "forum_topic_delete"
	FORUM_TOPIC_HIDE ModactionActions = "forum_topic_hide"
	FORUM_TOPIC_UNHIDE ModactionActions = "forum_topic_unhide"
	FORUM_TOPIC_LOCK ModactionActions = "forum_topic_lock"
	FORUM_TOPIC_UNLOCK ModactionActions = "forum_topic_unlock"
	FORUM_TOPIC_STICK ModactionActions = "forum_topic_stick"
	FORUM_TOPIC_UNSTICK ModactionActions = "forum_topic_unstick"
	FORUM_TOPIC_UPDATE ModactionActions = "forum_topic_update"
	HELP_CREATE ModactionActions = "help_create"
	HELP_DELETE ModactionActions = "help_delete"
	HELP_UPDATE ModactionActions = "help_update"
	IP_BAN_CREATE ModactionActions = "ip_ban_create"
	IP_BAN_DELETE ModactionActions = "ip_ban_delete"
	MASCOT_CREATE ModactionActions = "mascot_create"
	MASCOT_UPDATE ModactionActions = "mascot_update"
	MASCOT_DELETE ModactionActions = "mascot_delete"
	POOL_DELETE ModactionActions = "pool_delete"
	REPORT_REASON_CREATE ModactionActions = "report_reason_create"
	REPORT_REASON_DELETE ModactionActions = "report_reason_delete"
	REPORT_REASON_UPDATE ModactionActions = "report_reason_update"
	SET_UPDATE ModactionActions = "set_update"
	SET_DELETE ModactionActions = "set_delete"
	SET_CHANGE_VISIBILITY ModactionActions = "set_change_visibility"
	TAG_ALIAS_CREATE ModactionActions = "tag_alias_create"
	TAG_ALIAS_UPDATE ModactionActions = "tag_alias_update"
	TAG_IMPLICATION_CREATE ModactionActions = "tag_implication_create"
	TAG_IMPLICATION_UPDATE ModactionActions = "tag_implication_update"
	TICKET_CLAIM ModactionActions = "ticket_claim"
	TICKET_UNCLAIM ModactionActions = "ticket_unclaim"
	TICKET_UPDATE ModactionActions = "ticket_update"
	UPLOAD_WHITELIST_CREATE ModactionActions = "upload_whitelist_create"
	UPLOAD_WHITELIST_UPDATE ModactionActions = "upload_whitelist_update"
	UPLOAD_WHITELIST_DELETE ModactionActions = "upload_whitelist_delete"
	USER_BLACKLIST_CHANGED ModactionActions = "user_blacklist_changed"
	USER_TEXT_CHANGE ModactionActions = "user_text_change"
	USER_UPLOAD_LIMIT_CHANGE ModactionActions = "user_upload_limit_change"
	USER_FLAGS_CHANGE ModactionActions = "user_flags_change"
	USER_LEVEL_CHANGE ModactionActions = "user_level_change"
	USER_NAME_CHANGE ModactionActions = "user_name_change"
	USER_DELETE ModactionActions = "user_delete"
	USER_BAN ModactionActions = "user_ban"
	USER_BAN_UPDATE ModactionActions = "user_ban_update"
	USER_UNBAN ModactionActions = "user_unban"
	USER_FEEDBACK_CREATE ModactionActions = "user_feedback_create"
	USER_FEEDBACK_UPDATE ModactionActions = "user_feedback_update"
	USER_FEEDBACK_DELETE ModactionActions = "user_feedback_delete"
	USER_FEEDBACK_UNDELETE ModactionActions = "user_feedback_undelete"
	USER_FEEDBACK_DESTROY ModactionActions = "user_feedback_destroy"
	WIKI_PAGE_RENAME ModactionActions = "wiki_page_rename"
	WIKI_PAGE_DELETE ModactionActions = "wiki_page_delete"
	WIKI_PAGE_LOCK ModactionActions = "wiki_page_lock"
	WIKI_PAGE_UNLOCK ModactionActions = "wiki_page_unlock"
	MASS_UPDATE ModactionActions = "mass_update"
	NUKE_TAG ModactionActions = "nuke_tag"
	TAKEDOWN_DELETE ModactionActions = "takedown_delete"
	TAKEDOWN_PROCESS ModactionActions = "takedown_process"
	CREATED_POSITIVE_RECORD ModactionActions = "created_positive_record"
	CREATED_NEUTRAL_RECORD ModactionActions = "created_neutral_record"
	CREATED_NEGATIVE_RECORD ModactionActions = "created_negative_record"
	CREATED_FLAG_REASON ModactionActions = "created_flag_reason"
	EDITED_FLAG_REASON ModactionActions = "edited_flag_reason"
	DELETED_FLAG_REASON ModactionActions = "deleted_flag_reason"
	POST_MOVE_FAVORITES ModactionActions = "post_move_favorites"
	POST_DELETE ModactionActions = "post_delete"
	POST_UNDELETE ModactionActions = "post_undelete"
	POST_DESTROY ModactionActions = "post_destroy"
	POST_RATING_LOCK ModactionActions = "post_rating_lock"
	POST_UNAPPROVE ModactionActions = "post_unapprove"
	POST_REPLACEMENT_ACCEPT ModactionActions = "post_replacement_accept"
	POST_REPLACEMENT_REJECT ModactionActions = "post_replacement_reject"
	POST_REPLACEMENT_DELETE ModactionActions = "post_replacement_delete"
)

// All allowed values of ModactionActions enum
var AllowedModactionActionsEnumValues = []ModactionActions{
	"artist_page_rename",
	"artist_page_lock",
	"artist_page_unlock",
	"artist_user_linked",
	"artist_user_unlinked",
	"avoid_posting_create",
	"avoid_posting_update",
	"avoid_posting_delete",
	"avoid_posting_undelete",
	"avoid_posting_destroy",
	"blip_delete",
	"blip_hide",
	"blip_unhide",
	"blip_update",
	"comment_delete",
	"comment_hide",
	"comment_unhide",
	"comment_update",
	"forum_category_create",
	"forum_category_delete",
	"forum_category_update",
	"forum_post_delete",
	"forum_post_hide",
	"forum_post_unhide",
	"forum_post_update",
	"forum_topic_delete",
	"forum_topic_hide",
	"forum_topic_unhide",
	"forum_topic_lock",
	"forum_topic_unlock",
	"forum_topic_stick",
	"forum_topic_unstick",
	"forum_topic_update",
	"help_create",
	"help_delete",
	"help_update",
	"ip_ban_create",
	"ip_ban_delete",
	"mascot_create",
	"mascot_update",
	"mascot_delete",
	"pool_delete",
	"report_reason_create",
	"report_reason_delete",
	"report_reason_update",
	"set_update",
	"set_delete",
	"set_change_visibility",
	"tag_alias_create",
	"tag_alias_update",
	"tag_implication_create",
	"tag_implication_update",
	"ticket_claim",
	"ticket_unclaim",
	"ticket_update",
	"upload_whitelist_create",
	"upload_whitelist_update",
	"upload_whitelist_delete",
	"user_blacklist_changed",
	"user_text_change",
	"user_upload_limit_change",
	"user_flags_change",
	"user_level_change",
	"user_name_change",
	"user_delete",
	"user_ban",
	"user_ban_update",
	"user_unban",
	"user_feedback_create",
	"user_feedback_update",
	"user_feedback_delete",
	"user_feedback_undelete",
	"user_feedback_destroy",
	"wiki_page_rename",
	"wiki_page_delete",
	"wiki_page_lock",
	"wiki_page_unlock",
	"mass_update",
	"nuke_tag",
	"takedown_delete",
	"takedown_process",
	"created_positive_record",
	"created_neutral_record",
	"created_negative_record",
	"created_flag_reason",
	"edited_flag_reason",
	"deleted_flag_reason",
	"post_move_favorites",
	"post_delete",
	"post_undelete",
	"post_destroy",
	"post_rating_lock",
	"post_unapprove",
	"post_replacement_accept",
	"post_replacement_reject",
	"post_replacement_delete",
}

func (v *ModactionActions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModactionActions(value)
	for _, existing := range AllowedModactionActionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModactionActions", value)
}

// NewModactionActionsFromValue returns a pointer to a valid ModactionActions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModactionActionsFromValue(v string) (*ModactionActions, error) {
	ev := ModactionActions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModactionActions: valid values are %v", v, AllowedModactionActionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModactionActions) IsValid() bool {
	for _, existing := range AllowedModactionActionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModactionActions value
func (v ModactionActions) Ptr() *ModactionActions {
	return &v
}

type NullableModactionActions struct {
	value *ModactionActions
	isSet bool
}

func (v NullableModactionActions) Get() *ModactionActions {
	return v.value
}

func (v *NullableModactionActions) Set(val *ModactionActions) {
	v.value = val
	v.isSet = true
}

func (v NullableModactionActions) IsSet() bool {
	return v.isSet
}

func (v *NullableModactionActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModactionActions(val *ModactionActions) *NullableModactionActions {
	return &NullableModactionActions{value: val, isSet: true}
}

func (v NullableModactionActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModactionActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

