/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Id                    int32         `json:"id"`
	CreatedAt             time.Time     `json:"created_at"`
	Name                  string        `json:"name"`
	Level                 float32       `json:"level"`
	BaseUploadLimit       int32         `json:"base_upload_limit"`
	PostUploadCount       int32         `json:"post_upload_count"`
	PostUpdateCount       int32         `json:"post_update_count"`
	NoteUpdateCount       int32         `json:"note_update_count"`
	IsBanned              bool          `json:"is_banned"`
	CanApprovePosts       bool          `json:"can_approve_posts"`
	CanUploadFree         bool          `json:"can_upload_free"`
	LevelString           string        `json:"level_string"`
	AvatarId              NullableInt32 `json:"avatar_id"`
	ArtistVersionCount    *int32        `json:"artist_version_count,omitempty"`
	CommentCount          *int32        `json:"comment_count,omitempty"`
	FavoritesCount        *int32        `json:"favorites_count,omitempty"`
	FlagCount             *float32      `json:"flag_count,omitempty"`
	ForumPostCount        *int32        `json:"forum_post_count,omitempty"`
	NegativeFeedbackCount *int32        `json:"negative_feedback_count,omitempty"`
	NeutralFeedbackCount  *int32        `json:"neutral_feedback_count,omitempty"`
	PoolVersionCount      *int32        `json:"pool_version_count,omitempty"`
	PositiveFeedbackCount *int32        `json:"positive_feedback_count,omitempty"`
	ProfileAbout          *string       `json:"profile_about,omitempty"`
	ProfileArtinfo        *string       `json:"profile_artinfo,omitempty"`
	UploadLimit           interface{}   `json:"upload_limit,omitempty"`
	WikiPageVersionCount  *int32        `json:"wiki_page_version_count,omitempty"`
}

type _User User

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id int32, createdAt time.Time, name string, level float32, baseUploadLimit int32, postUploadCount int32, postUpdateCount int32, noteUpdateCount int32, isBanned bool, canApprovePosts bool, canUploadFree bool, levelString string, avatarId NullableInt32) *User {
	this := User{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Name = name
	this.Level = level
	this.BaseUploadLimit = baseUploadLimit
	this.PostUploadCount = postUploadCount
	this.PostUpdateCount = postUpdateCount
	this.NoteUpdateCount = noteUpdateCount
	this.IsBanned = isBanned
	this.CanApprovePosts = canApprovePosts
	this.CanUploadFree = canUploadFree
	this.LevelString = levelString
	this.AvatarId = avatarId
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User) SetName(v string) {
	o.Name = v
}

// GetLevel returns the Level field value
func (o *User) GetLevel() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *User) GetLevelOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *User) SetLevel(v float32) {
	o.Level = v
}

// GetBaseUploadLimit returns the BaseUploadLimit field value
func (o *User) GetBaseUploadLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BaseUploadLimit
}

// GetBaseUploadLimitOk returns a tuple with the BaseUploadLimit field value
// and a boolean to check if the value has been set.
func (o *User) GetBaseUploadLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseUploadLimit, true
}

// SetBaseUploadLimit sets field value
func (o *User) SetBaseUploadLimit(v int32) {
	o.BaseUploadLimit = v
}

// GetPostUploadCount returns the PostUploadCount field value
func (o *User) GetPostUploadCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PostUploadCount
}

// GetPostUploadCountOk returns a tuple with the PostUploadCount field value
// and a boolean to check if the value has been set.
func (o *User) GetPostUploadCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostUploadCount, true
}

// SetPostUploadCount sets field value
func (o *User) SetPostUploadCount(v int32) {
	o.PostUploadCount = v
}

// GetPostUpdateCount returns the PostUpdateCount field value
func (o *User) GetPostUpdateCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PostUpdateCount
}

// GetPostUpdateCountOk returns a tuple with the PostUpdateCount field value
// and a boolean to check if the value has been set.
func (o *User) GetPostUpdateCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostUpdateCount, true
}

// SetPostUpdateCount sets field value
func (o *User) SetPostUpdateCount(v int32) {
	o.PostUpdateCount = v
}

// GetNoteUpdateCount returns the NoteUpdateCount field value
func (o *User) GetNoteUpdateCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NoteUpdateCount
}

// GetNoteUpdateCountOk returns a tuple with the NoteUpdateCount field value
// and a boolean to check if the value has been set.
func (o *User) GetNoteUpdateCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoteUpdateCount, true
}

// SetNoteUpdateCount sets field value
func (o *User) SetNoteUpdateCount(v int32) {
	o.NoteUpdateCount = v
}

// GetIsBanned returns the IsBanned field value
func (o *User) GetIsBanned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBanned
}

// GetIsBannedOk returns a tuple with the IsBanned field value
// and a boolean to check if the value has been set.
func (o *User) GetIsBannedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBanned, true
}

// SetIsBanned sets field value
func (o *User) SetIsBanned(v bool) {
	o.IsBanned = v
}

// GetCanApprovePosts returns the CanApprovePosts field value
func (o *User) GetCanApprovePosts() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanApprovePosts
}

// GetCanApprovePostsOk returns a tuple with the CanApprovePosts field value
// and a boolean to check if the value has been set.
func (o *User) GetCanApprovePostsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanApprovePosts, true
}

// SetCanApprovePosts sets field value
func (o *User) SetCanApprovePosts(v bool) {
	o.CanApprovePosts = v
}

// GetCanUploadFree returns the CanUploadFree field value
func (o *User) GetCanUploadFree() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanUploadFree
}

// GetCanUploadFreeOk returns a tuple with the CanUploadFree field value
// and a boolean to check if the value has been set.
func (o *User) GetCanUploadFreeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanUploadFree, true
}

// SetCanUploadFree sets field value
func (o *User) SetCanUploadFree(v bool) {
	o.CanUploadFree = v
}

// GetLevelString returns the LevelString field value
func (o *User) GetLevelString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LevelString
}

// GetLevelStringOk returns a tuple with the LevelString field value
// and a boolean to check if the value has been set.
func (o *User) GetLevelStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LevelString, true
}

// SetLevelString sets field value
func (o *User) SetLevelString(v string) {
	o.LevelString = v
}

// GetAvatarId returns the AvatarId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *User) GetAvatarId() int32 {
	if o == nil || o.AvatarId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.AvatarId.Get()
}

// GetAvatarIdOk returns a tuple with the AvatarId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAvatarIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvatarId.Get(), o.AvatarId.IsSet()
}

// SetAvatarId sets field value
func (o *User) SetAvatarId(v int32) {
	o.AvatarId.Set(&v)
}

// GetArtistVersionCount returns the ArtistVersionCount field value if set, zero value otherwise.
func (o *User) GetArtistVersionCount() int32 {
	if o == nil || IsNil(o.ArtistVersionCount) {
		var ret int32
		return ret
	}
	return *o.ArtistVersionCount
}

// GetArtistVersionCountOk returns a tuple with the ArtistVersionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetArtistVersionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ArtistVersionCount) {
		return nil, false
	}
	return o.ArtistVersionCount, true
}

// HasArtistVersionCount returns a boolean if a field has been set.
func (o *User) HasArtistVersionCount() bool {
	if o != nil && !IsNil(o.ArtistVersionCount) {
		return true
	}

	return false
}

// SetArtistVersionCount gets a reference to the given int32 and assigns it to the ArtistVersionCount field.
func (o *User) SetArtistVersionCount(v int32) {
	o.ArtistVersionCount = &v
}

// GetCommentCount returns the CommentCount field value if set, zero value otherwise.
func (o *User) GetCommentCount() int32 {
	if o == nil || IsNil(o.CommentCount) {
		var ret int32
		return ret
	}
	return *o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCommentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CommentCount) {
		return nil, false
	}
	return o.CommentCount, true
}

// HasCommentCount returns a boolean if a field has been set.
func (o *User) HasCommentCount() bool {
	if o != nil && !IsNil(o.CommentCount) {
		return true
	}

	return false
}

// SetCommentCount gets a reference to the given int32 and assigns it to the CommentCount field.
func (o *User) SetCommentCount(v int32) {
	o.CommentCount = &v
}

// GetFavoritesCount returns the FavoritesCount field value if set, zero value otherwise.
func (o *User) GetFavoritesCount() int32 {
	if o == nil || IsNil(o.FavoritesCount) {
		var ret int32
		return ret
	}
	return *o.FavoritesCount
}

// GetFavoritesCountOk returns a tuple with the FavoritesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFavoritesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.FavoritesCount) {
		return nil, false
	}
	return o.FavoritesCount, true
}

// HasFavoritesCount returns a boolean if a field has been set.
func (o *User) HasFavoritesCount() bool {
	if o != nil && !IsNil(o.FavoritesCount) {
		return true
	}

	return false
}

// SetFavoritesCount gets a reference to the given int32 and assigns it to the FavoritesCount field.
func (o *User) SetFavoritesCount(v int32) {
	o.FavoritesCount = &v
}

// GetFlagCount returns the FlagCount field value if set, zero value otherwise.
func (o *User) GetFlagCount() float32 {
	if o == nil || IsNil(o.FlagCount) {
		var ret float32
		return ret
	}
	return *o.FlagCount
}

// GetFlagCountOk returns a tuple with the FlagCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFlagCountOk() (*float32, bool) {
	if o == nil || IsNil(o.FlagCount) {
		return nil, false
	}
	return o.FlagCount, true
}

// HasFlagCount returns a boolean if a field has been set.
func (o *User) HasFlagCount() bool {
	if o != nil && !IsNil(o.FlagCount) {
		return true
	}

	return false
}

// SetFlagCount gets a reference to the given float32 and assigns it to the FlagCount field.
func (o *User) SetFlagCount(v float32) {
	o.FlagCount = &v
}

// GetForumPostCount returns the ForumPostCount field value if set, zero value otherwise.
func (o *User) GetForumPostCount() int32 {
	if o == nil || IsNil(o.ForumPostCount) {
		var ret int32
		return ret
	}
	return *o.ForumPostCount
}

// GetForumPostCountOk returns a tuple with the ForumPostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetForumPostCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ForumPostCount) {
		return nil, false
	}
	return o.ForumPostCount, true
}

// HasForumPostCount returns a boolean if a field has been set.
func (o *User) HasForumPostCount() bool {
	if o != nil && !IsNil(o.ForumPostCount) {
		return true
	}

	return false
}

// SetForumPostCount gets a reference to the given int32 and assigns it to the ForumPostCount field.
func (o *User) SetForumPostCount(v int32) {
	o.ForumPostCount = &v
}

// GetNegativeFeedbackCount returns the NegativeFeedbackCount field value if set, zero value otherwise.
func (o *User) GetNegativeFeedbackCount() int32 {
	if o == nil || IsNil(o.NegativeFeedbackCount) {
		var ret int32
		return ret
	}
	return *o.NegativeFeedbackCount
}

// GetNegativeFeedbackCountOk returns a tuple with the NegativeFeedbackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetNegativeFeedbackCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NegativeFeedbackCount) {
		return nil, false
	}
	return o.NegativeFeedbackCount, true
}

// HasNegativeFeedbackCount returns a boolean if a field has been set.
func (o *User) HasNegativeFeedbackCount() bool {
	if o != nil && !IsNil(o.NegativeFeedbackCount) {
		return true
	}

	return false
}

// SetNegativeFeedbackCount gets a reference to the given int32 and assigns it to the NegativeFeedbackCount field.
func (o *User) SetNegativeFeedbackCount(v int32) {
	o.NegativeFeedbackCount = &v
}

// GetNeutralFeedbackCount returns the NeutralFeedbackCount field value if set, zero value otherwise.
func (o *User) GetNeutralFeedbackCount() int32 {
	if o == nil || IsNil(o.NeutralFeedbackCount) {
		var ret int32
		return ret
	}
	return *o.NeutralFeedbackCount
}

// GetNeutralFeedbackCountOk returns a tuple with the NeutralFeedbackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetNeutralFeedbackCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NeutralFeedbackCount) {
		return nil, false
	}
	return o.NeutralFeedbackCount, true
}

// HasNeutralFeedbackCount returns a boolean if a field has been set.
func (o *User) HasNeutralFeedbackCount() bool {
	if o != nil && !IsNil(o.NeutralFeedbackCount) {
		return true
	}

	return false
}

// SetNeutralFeedbackCount gets a reference to the given int32 and assigns it to the NeutralFeedbackCount field.
func (o *User) SetNeutralFeedbackCount(v int32) {
	o.NeutralFeedbackCount = &v
}

// GetPoolVersionCount returns the PoolVersionCount field value if set, zero value otherwise.
func (o *User) GetPoolVersionCount() int32 {
	if o == nil || IsNil(o.PoolVersionCount) {
		var ret int32
		return ret
	}
	return *o.PoolVersionCount
}

// GetPoolVersionCountOk returns a tuple with the PoolVersionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPoolVersionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PoolVersionCount) {
		return nil, false
	}
	return o.PoolVersionCount, true
}

// HasPoolVersionCount returns a boolean if a field has been set.
func (o *User) HasPoolVersionCount() bool {
	if o != nil && !IsNil(o.PoolVersionCount) {
		return true
	}

	return false
}

// SetPoolVersionCount gets a reference to the given int32 and assigns it to the PoolVersionCount field.
func (o *User) SetPoolVersionCount(v int32) {
	o.PoolVersionCount = &v
}

// GetPositiveFeedbackCount returns the PositiveFeedbackCount field value if set, zero value otherwise.
func (o *User) GetPositiveFeedbackCount() int32 {
	if o == nil || IsNil(o.PositiveFeedbackCount) {
		var ret int32
		return ret
	}
	return *o.PositiveFeedbackCount
}

// GetPositiveFeedbackCountOk returns a tuple with the PositiveFeedbackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPositiveFeedbackCountOk() (*int32, bool) {
	if o == nil || IsNil(o.PositiveFeedbackCount) {
		return nil, false
	}
	return o.PositiveFeedbackCount, true
}

// HasPositiveFeedbackCount returns a boolean if a field has been set.
func (o *User) HasPositiveFeedbackCount() bool {
	if o != nil && !IsNil(o.PositiveFeedbackCount) {
		return true
	}

	return false
}

// SetPositiveFeedbackCount gets a reference to the given int32 and assigns it to the PositiveFeedbackCount field.
func (o *User) SetPositiveFeedbackCount(v int32) {
	o.PositiveFeedbackCount = &v
}

// GetProfileAbout returns the ProfileAbout field value if set, zero value otherwise.
func (o *User) GetProfileAbout() string {
	if o == nil || IsNil(o.ProfileAbout) {
		var ret string
		return ret
	}
	return *o.ProfileAbout
}

// GetProfileAboutOk returns a tuple with the ProfileAbout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfileAboutOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileAbout) {
		return nil, false
	}
	return o.ProfileAbout, true
}

// HasProfileAbout returns a boolean if a field has been set.
func (o *User) HasProfileAbout() bool {
	if o != nil && !IsNil(o.ProfileAbout) {
		return true
	}

	return false
}

// SetProfileAbout gets a reference to the given string and assigns it to the ProfileAbout field.
func (o *User) SetProfileAbout(v string) {
	o.ProfileAbout = &v
}

// GetProfileArtinfo returns the ProfileArtinfo field value if set, zero value otherwise.
func (o *User) GetProfileArtinfo() string {
	if o == nil || IsNil(o.ProfileArtinfo) {
		var ret string
		return ret
	}
	return *o.ProfileArtinfo
}

// GetProfileArtinfoOk returns a tuple with the ProfileArtinfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfileArtinfoOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileArtinfo) {
		return nil, false
	}
	return o.ProfileArtinfo, true
}

// HasProfileArtinfo returns a boolean if a field has been set.
func (o *User) HasProfileArtinfo() bool {
	if o != nil && !IsNil(o.ProfileArtinfo) {
		return true
	}

	return false
}

// SetProfileArtinfo gets a reference to the given string and assigns it to the ProfileArtinfo field.
func (o *User) SetProfileArtinfo(v string) {
	o.ProfileArtinfo = &v
}

// GetUploadLimit returns the UploadLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetUploadLimit() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.UploadLimit
}

// GetUploadLimitOk returns a tuple with the UploadLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetUploadLimitOk() (*interface{}, bool) {
	if o == nil || IsNil(o.UploadLimit) {
		return nil, false
	}
	return &o.UploadLimit, true
}

// HasUploadLimit returns a boolean if a field has been set.
func (o *User) HasUploadLimit() bool {
	if o != nil && !IsNil(o.UploadLimit) {
		return true
	}

	return false
}

// SetUploadLimit gets a reference to the given interface{} and assigns it to the UploadLimit field.
func (o *User) SetUploadLimit(v interface{}) {
	o.UploadLimit = v
}

// GetWikiPageVersionCount returns the WikiPageVersionCount field value if set, zero value otherwise.
func (o *User) GetWikiPageVersionCount() int32 {
	if o == nil || IsNil(o.WikiPageVersionCount) {
		var ret int32
		return ret
	}
	return *o.WikiPageVersionCount
}

// GetWikiPageVersionCountOk returns a tuple with the WikiPageVersionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetWikiPageVersionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WikiPageVersionCount) {
		return nil, false
	}
	return o.WikiPageVersionCount, true
}

// HasWikiPageVersionCount returns a boolean if a field has been set.
func (o *User) HasWikiPageVersionCount() bool {
	if o != nil && !IsNil(o.WikiPageVersionCount) {
		return true
	}

	return false
}

// SetWikiPageVersionCount gets a reference to the given int32 and assigns it to the WikiPageVersionCount field.
func (o *User) SetWikiPageVersionCount(v int32) {
	o.WikiPageVersionCount = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["name"] = o.Name
	toSerialize["level"] = o.Level
	toSerialize["base_upload_limit"] = o.BaseUploadLimit
	toSerialize["post_upload_count"] = o.PostUploadCount
	toSerialize["post_update_count"] = o.PostUpdateCount
	toSerialize["note_update_count"] = o.NoteUpdateCount
	toSerialize["is_banned"] = o.IsBanned
	toSerialize["can_approve_posts"] = o.CanApprovePosts
	toSerialize["can_upload_free"] = o.CanUploadFree
	toSerialize["level_string"] = o.LevelString
	toSerialize["avatar_id"] = o.AvatarId.Get()
	if !IsNil(o.ArtistVersionCount) {
		toSerialize["artist_version_count"] = o.ArtistVersionCount
	}
	if !IsNil(o.CommentCount) {
		toSerialize["comment_count"] = o.CommentCount
	}
	if !IsNil(o.FavoritesCount) {
		toSerialize["favorites_count"] = o.FavoritesCount
	}
	if !IsNil(o.FlagCount) {
		toSerialize["flag_count"] = o.FlagCount
	}
	if !IsNil(o.ForumPostCount) {
		toSerialize["forum_post_count"] = o.ForumPostCount
	}
	if !IsNil(o.NegativeFeedbackCount) {
		toSerialize["negative_feedback_count"] = o.NegativeFeedbackCount
	}
	if !IsNil(o.NeutralFeedbackCount) {
		toSerialize["neutral_feedback_count"] = o.NeutralFeedbackCount
	}
	if !IsNil(o.PoolVersionCount) {
		toSerialize["pool_version_count"] = o.PoolVersionCount
	}
	if !IsNil(o.PositiveFeedbackCount) {
		toSerialize["positive_feedback_count"] = o.PositiveFeedbackCount
	}
	if !IsNil(o.ProfileAbout) {
		toSerialize["profile_about"] = o.ProfileAbout
	}
	if !IsNil(o.ProfileArtinfo) {
		toSerialize["profile_artinfo"] = o.ProfileArtinfo
	}
	if o.UploadLimit != nil {
		toSerialize["upload_limit"] = o.UploadLimit
	}
	if !IsNil(o.WikiPageVersionCount) {
		toSerialize["wiki_page_version_count"] = o.WikiPageVersionCount
	}
	return toSerialize, nil
}

func (o *User) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"name",
		"level",
		"base_upload_limit",
		"post_upload_count",
		"post_update_count",
		"note_update_count",
		"is_banned",
		"can_approve_posts",
		"can_upload_free",
		"level_string",
		"avatar_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUser := _User{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUser)

	if err != nil {
		return err
	}

	*o = User(varUser)

	return err
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
