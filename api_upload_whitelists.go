/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UploadWhitelistsAPIService UploadWhitelistsAPI service
type UploadWhitelistsAPIService service

type ApiCheckIfUrlIsAllowedRequest struct {
	ctx context.Context
	ApiService *UploadWhitelistsAPIService
	id float32
	url *string
}

func (r ApiCheckIfUrlIsAllowedRequest) Url(url string) ApiCheckIfUrlIsAllowedRequest {
	r.url = &url
	return r
}

func (r ApiCheckIfUrlIsAllowedRequest) Execute() (*CheckIfUrlIsAllowed200Response, *http.Response, error) {
	return r.ApiService.CheckIfUrlIsAllowedExecute(r)
}

/*
CheckIfUrlIsAllowed Check If URL Is Allowed

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the upload whitelist.
 @return ApiCheckIfUrlIsAllowedRequest
*/
func (a *UploadWhitelistsAPIService) CheckIfUrlIsAllowed(ctx context.Context, id float32) ApiCheckIfUrlIsAllowedRequest {
	return ApiCheckIfUrlIsAllowedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CheckIfUrlIsAllowed200Response
func (a *UploadWhitelistsAPIService) CheckIfUrlIsAllowedExecute(r ApiCheckIfUrlIsAllowedRequest) (*CheckIfUrlIsAllowed200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CheckIfUrlIsAllowed200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.CheckIfUrlIsAllowed")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists/{id}/is_allowed.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.url != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUploadWhitelistRequest struct {
	ctx context.Context
	ApiService *UploadWhitelistsAPIService
	uploadWhitelistAllowed *string
	uploadWhitelistPattern *string
	uploadWhitelistReason *string
	uploadWhitelistNote *string
	uploadWhitelistHidden *bool
}

func (r ApiCreateUploadWhitelistRequest) UploadWhitelistAllowed(uploadWhitelistAllowed string) ApiCreateUploadWhitelistRequest {
	r.uploadWhitelistAllowed = &uploadWhitelistAllowed
	return r
}

func (r ApiCreateUploadWhitelistRequest) UploadWhitelistPattern(uploadWhitelistPattern string) ApiCreateUploadWhitelistRequest {
	r.uploadWhitelistPattern = &uploadWhitelistPattern
	return r
}

func (r ApiCreateUploadWhitelistRequest) UploadWhitelistReason(uploadWhitelistReason string) ApiCreateUploadWhitelistRequest {
	r.uploadWhitelistReason = &uploadWhitelistReason
	return r
}

func (r ApiCreateUploadWhitelistRequest) UploadWhitelistNote(uploadWhitelistNote string) ApiCreateUploadWhitelistRequest {
	r.uploadWhitelistNote = &uploadWhitelistNote
	return r
}

func (r ApiCreateUploadWhitelistRequest) UploadWhitelistHidden(uploadWhitelistHidden bool) ApiCreateUploadWhitelistRequest {
	r.uploadWhitelistHidden = &uploadWhitelistHidden
	return r
}

func (r ApiCreateUploadWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.CreateUploadWhitelistExecute(r)
}

/*
CreateUploadWhitelist Create Upload Whitelist

You must be Admin+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUploadWhitelistRequest
*/
func (a *UploadWhitelistsAPIService) CreateUploadWhitelist(ctx context.Context) ApiCreateUploadWhitelistRequest {
	return ApiCreateUploadWhitelistRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UploadWhitelistsAPIService) CreateUploadWhitelistExecute(r ApiCreateUploadWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.CreateUploadWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uploadWhitelistAllowed == nil {
		return nil, reportError("uploadWhitelistAllowed is required and must be specified")
	}
	if r.uploadWhitelistPattern == nil {
		return nil, reportError("uploadWhitelistPattern is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[allowed]", r.uploadWhitelistAllowed, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[pattern]", r.uploadWhitelistPattern, "")
	if r.uploadWhitelistReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[reason]", r.uploadWhitelistReason, "")
	}
	if r.uploadWhitelistNote != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[note]", r.uploadWhitelistNote, "")
	}
	if r.uploadWhitelistHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[hidden]", r.uploadWhitelistHidden, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteUploadWhitelistRequest struct {
	ctx context.Context
	ApiService *UploadWhitelistsAPIService
	id float32
}

func (r ApiDeleteUploadWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUploadWhitelistExecute(r)
}

/*
DeleteUploadWhitelist Delete Upload Whitelist

You must be Admin+.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the upload whitelist.
 @return ApiDeleteUploadWhitelistRequest
*/
func (a *UploadWhitelistsAPIService) DeleteUploadWhitelist(ctx context.Context, id float32) ApiDeleteUploadWhitelistRequest {
	return ApiDeleteUploadWhitelistRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UploadWhitelistsAPIService) DeleteUploadWhitelistExecute(r ApiDeleteUploadWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.DeleteUploadWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEditUploadWhitelistRequest struct {
	ctx context.Context
	ApiService *UploadWhitelistsAPIService
	id float32
	uploadWhitelistAllowed *string
	uploadWhitelistPattern *string
	uploadWhitelistReason *string
	uploadWhitelistNote *string
	uploadWhitelistHidden *bool
}

func (r ApiEditUploadWhitelistRequest) UploadWhitelistAllowed(uploadWhitelistAllowed string) ApiEditUploadWhitelistRequest {
	r.uploadWhitelistAllowed = &uploadWhitelistAllowed
	return r
}

func (r ApiEditUploadWhitelistRequest) UploadWhitelistPattern(uploadWhitelistPattern string) ApiEditUploadWhitelistRequest {
	r.uploadWhitelistPattern = &uploadWhitelistPattern
	return r
}

func (r ApiEditUploadWhitelistRequest) UploadWhitelistReason(uploadWhitelistReason string) ApiEditUploadWhitelistRequest {
	r.uploadWhitelistReason = &uploadWhitelistReason
	return r
}

func (r ApiEditUploadWhitelistRequest) UploadWhitelistNote(uploadWhitelistNote string) ApiEditUploadWhitelistRequest {
	r.uploadWhitelistNote = &uploadWhitelistNote
	return r
}

func (r ApiEditUploadWhitelistRequest) UploadWhitelistHidden(uploadWhitelistHidden bool) ApiEditUploadWhitelistRequest {
	r.uploadWhitelistHidden = &uploadWhitelistHidden
	return r
}

func (r ApiEditUploadWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditUploadWhitelistExecute(r)
}

/*
EditUploadWhitelist Edit Upload Whitelist

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The ID of the upload whitelist entry.
 @return ApiEditUploadWhitelistRequest
*/
func (a *UploadWhitelistsAPIService) EditUploadWhitelist(ctx context.Context, id float32) ApiEditUploadWhitelistRequest {
	return ApiEditUploadWhitelistRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UploadWhitelistsAPIService) EditUploadWhitelistExecute(r ApiEditUploadWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.EditUploadWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.uploadWhitelistAllowed != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[allowed]", r.uploadWhitelistAllowed, "")
	}
	if r.uploadWhitelistPattern != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[pattern]", r.uploadWhitelistPattern, "")
	}
	if r.uploadWhitelistReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[reason]", r.uploadWhitelistReason, "")
	}
	if r.uploadWhitelistNote != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[note]", r.uploadWhitelistNote, "")
	}
	if r.uploadWhitelistHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[hidden]", r.uploadWhitelistHidden, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSearchUploadWhitelistsRequest struct {
	ctx context.Context
	ApiService *UploadWhitelistsAPIService
	limit *float32
	page *float32
	searchId *float32
	searchOrder *string
	searchPattern *string
	searchNote *string
}

// The maximum number of results to return. Between 0 and 320.
func (r ApiSearchUploadWhitelistsRequest) Limit(limit float32) ApiSearchUploadWhitelistsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r ApiSearchUploadWhitelistsRequest) Page(page float32) ApiSearchUploadWhitelistsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r ApiSearchUploadWhitelistsRequest) SearchId(searchId float32) ApiSearchUploadWhitelistsRequest {
	r.searchId = &searchId
	return r
}

func (r ApiSearchUploadWhitelistsRequest) SearchOrder(searchOrder string) ApiSearchUploadWhitelistsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r ApiSearchUploadWhitelistsRequest) SearchPattern(searchPattern string) ApiSearchUploadWhitelistsRequest {
	r.searchPattern = &searchPattern
	return r
}

func (r ApiSearchUploadWhitelistsRequest) SearchNote(searchNote string) ApiSearchUploadWhitelistsRequest {
	r.searchNote = &searchNote
	return r
}

func (r ApiSearchUploadWhitelistsRequest) Execute() (*SearchUploadWhitelists200Response, *http.Response, error) {
	return r.ApiService.SearchUploadWhitelistsExecute(r)
}

/*
SearchUploadWhitelists Search Upload Whitelists

When no results are found, an object with an `upload_whitelists` key is returned.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchUploadWhitelistsRequest
*/
func (a *UploadWhitelistsAPIService) SearchUploadWhitelists(ctx context.Context) ApiSearchUploadWhitelistsRequest {
	return ApiSearchUploadWhitelistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchUploadWhitelists200Response
func (a *UploadWhitelistsAPIService) SearchUploadWhitelistsExecute(r ApiSearchUploadWhitelistsRequest) (*SearchUploadWhitelists200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchUploadWhitelists200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.SearchUploadWhitelists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchPattern != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[pattern]", r.searchPattern, "")
	}
	if r.searchNote != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[note]", r.searchNote, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
