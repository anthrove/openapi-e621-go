/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// UploadWhitelistsAPIService UploadWhitelistsAPI service
type UploadWhitelistsAPIService service

type UploadWhitelistsAPICheckIfUrlIsAllowedRequest struct {
	ctx        context.Context
	ApiService *UploadWhitelistsAPIService
	id         int32
	url        *string
}

func (r UploadWhitelistsAPICheckIfUrlIsAllowedRequest) Url(url string) UploadWhitelistsAPICheckIfUrlIsAllowedRequest {
	r.url = &url
	return r
}

func (r UploadWhitelistsAPICheckIfUrlIsAllowedRequest) Execute() (*CheckIfUrlIsAllowed200Response, *http.Response, error) {
	return r.ApiService.CheckIfUrlIsAllowedExecute(r)
}

/*
CheckIfUrlIsAllowed Check If URL Is Allowed

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the upload whitelist.
	@return UploadWhitelistsAPICheckIfUrlIsAllowedRequest
*/
func (a *UploadWhitelistsAPIService) CheckIfUrlIsAllowed(ctx context.Context, id int32) UploadWhitelistsAPICheckIfUrlIsAllowedRequest {
	return UploadWhitelistsAPICheckIfUrlIsAllowedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CheckIfUrlIsAllowed200Response
func (a *UploadWhitelistsAPIService) CheckIfUrlIsAllowedExecute(r UploadWhitelistsAPICheckIfUrlIsAllowedRequest) (*CheckIfUrlIsAllowed200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CheckIfUrlIsAllowed200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.CheckIfUrlIsAllowed")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists/{id}/is_allowed.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.url != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UploadWhitelistsAPICreateUploadWhitelistRequest struct {
	ctx                    context.Context
	ApiService             *UploadWhitelistsAPIService
	uploadWhitelistAllowed *string
	uploadWhitelistPattern *string
	uploadWhitelistReason  *string
	uploadWhitelistNote    *string
	uploadWhitelistHidden  *bool
}

func (r UploadWhitelistsAPICreateUploadWhitelistRequest) UploadWhitelistAllowed(uploadWhitelistAllowed string) UploadWhitelistsAPICreateUploadWhitelistRequest {
	r.uploadWhitelistAllowed = &uploadWhitelistAllowed
	return r
}

func (r UploadWhitelistsAPICreateUploadWhitelistRequest) UploadWhitelistPattern(uploadWhitelistPattern string) UploadWhitelistsAPICreateUploadWhitelistRequest {
	r.uploadWhitelistPattern = &uploadWhitelistPattern
	return r
}

func (r UploadWhitelistsAPICreateUploadWhitelistRequest) UploadWhitelistReason(uploadWhitelistReason string) UploadWhitelistsAPICreateUploadWhitelistRequest {
	r.uploadWhitelistReason = &uploadWhitelistReason
	return r
}

func (r UploadWhitelistsAPICreateUploadWhitelistRequest) UploadWhitelistNote(uploadWhitelistNote string) UploadWhitelistsAPICreateUploadWhitelistRequest {
	r.uploadWhitelistNote = &uploadWhitelistNote
	return r
}

func (r UploadWhitelistsAPICreateUploadWhitelistRequest) UploadWhitelistHidden(uploadWhitelistHidden bool) UploadWhitelistsAPICreateUploadWhitelistRequest {
	r.uploadWhitelistHidden = &uploadWhitelistHidden
	return r
}

func (r UploadWhitelistsAPICreateUploadWhitelistRequest) Execute() (*UploadWhitelist, *http.Response, error) {
	return r.ApiService.CreateUploadWhitelistExecute(r)
}

/*
CreateUploadWhitelist Create Upload Whitelist

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UploadWhitelistsAPICreateUploadWhitelistRequest
*/
func (a *UploadWhitelistsAPIService) CreateUploadWhitelist(ctx context.Context) UploadWhitelistsAPICreateUploadWhitelistRequest {
	return UploadWhitelistsAPICreateUploadWhitelistRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return UploadWhitelist
func (a *UploadWhitelistsAPIService) CreateUploadWhitelistExecute(r UploadWhitelistsAPICreateUploadWhitelistRequest) (*UploadWhitelist, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UploadWhitelist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.CreateUploadWhitelist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uploadWhitelistAllowed == nil {
		return localVarReturnValue, nil, reportError("uploadWhitelistAllowed is required and must be specified")
	}
	if r.uploadWhitelistPattern == nil {
		return localVarReturnValue, nil, reportError("uploadWhitelistPattern is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[allowed]", r.uploadWhitelistAllowed, "")
	parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[pattern]", r.uploadWhitelistPattern, "")
	if r.uploadWhitelistReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[reason]", r.uploadWhitelistReason, "")
	}
	if r.uploadWhitelistNote != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[note]", r.uploadWhitelistNote, "")
	}
	if r.uploadWhitelistHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[hidden]", r.uploadWhitelistHidden, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UploadWhitelistsAPIDeleteUploadWhitelistRequest struct {
	ctx        context.Context
	ApiService *UploadWhitelistsAPIService
	id         int32
}

func (r UploadWhitelistsAPIDeleteUploadWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUploadWhitelistExecute(r)
}

/*
DeleteUploadWhitelist Delete Upload Whitelist

You must be Admin+.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the upload whitelist.
	@return UploadWhitelistsAPIDeleteUploadWhitelistRequest
*/
func (a *UploadWhitelistsAPIService) DeleteUploadWhitelist(ctx context.Context, id int32) UploadWhitelistsAPIDeleteUploadWhitelistRequest {
	return UploadWhitelistsAPIDeleteUploadWhitelistRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *UploadWhitelistsAPIService) DeleteUploadWhitelistExecute(r UploadWhitelistsAPIDeleteUploadWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.DeleteUploadWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UploadWhitelistsAPIEditUploadWhitelistRequest struct {
	ctx                    context.Context
	ApiService             *UploadWhitelistsAPIService
	id                     int32
	uploadWhitelistAllowed *string
	uploadWhitelistPattern *string
	uploadWhitelistReason  *string
	uploadWhitelistNote    *string
	uploadWhitelistHidden  *bool
}

func (r UploadWhitelistsAPIEditUploadWhitelistRequest) UploadWhitelistAllowed(uploadWhitelistAllowed string) UploadWhitelistsAPIEditUploadWhitelistRequest {
	r.uploadWhitelistAllowed = &uploadWhitelistAllowed
	return r
}

func (r UploadWhitelistsAPIEditUploadWhitelistRequest) UploadWhitelistPattern(uploadWhitelistPattern string) UploadWhitelistsAPIEditUploadWhitelistRequest {
	r.uploadWhitelistPattern = &uploadWhitelistPattern
	return r
}

func (r UploadWhitelistsAPIEditUploadWhitelistRequest) UploadWhitelistReason(uploadWhitelistReason string) UploadWhitelistsAPIEditUploadWhitelistRequest {
	r.uploadWhitelistReason = &uploadWhitelistReason
	return r
}

func (r UploadWhitelistsAPIEditUploadWhitelistRequest) UploadWhitelistNote(uploadWhitelistNote string) UploadWhitelistsAPIEditUploadWhitelistRequest {
	r.uploadWhitelistNote = &uploadWhitelistNote
	return r
}

func (r UploadWhitelistsAPIEditUploadWhitelistRequest) UploadWhitelistHidden(uploadWhitelistHidden bool) UploadWhitelistsAPIEditUploadWhitelistRequest {
	r.uploadWhitelistHidden = &uploadWhitelistHidden
	return r
}

func (r UploadWhitelistsAPIEditUploadWhitelistRequest) Execute() (*http.Response, error) {
	return r.ApiService.EditUploadWhitelistExecute(r)
}

/*
EditUploadWhitelist Edit Upload Whitelist

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id The ID of the upload whitelist entry.
	@return UploadWhitelistsAPIEditUploadWhitelistRequest
*/
func (a *UploadWhitelistsAPIService) EditUploadWhitelist(ctx context.Context, id int32) UploadWhitelistsAPIEditUploadWhitelistRequest {
	return UploadWhitelistsAPIEditUploadWhitelistRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *UploadWhitelistsAPIService) EditUploadWhitelistExecute(r UploadWhitelistsAPIEditUploadWhitelistRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.EditUploadWhitelist")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists/{id}.json"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.uploadWhitelistAllowed != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[allowed]", r.uploadWhitelistAllowed, "")
	}
	if r.uploadWhitelistPattern != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[pattern]", r.uploadWhitelistPattern, "")
	}
	if r.uploadWhitelistReason != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[reason]", r.uploadWhitelistReason, "")
	}
	if r.uploadWhitelistNote != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[note]", r.uploadWhitelistNote, "")
	}
	if r.uploadWhitelistHidden != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upload_whitelist[hidden]", r.uploadWhitelistHidden, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UploadWhitelistsAPISearchUploadWhitelistsRequest struct {
	ctx           context.Context
	ApiService    *UploadWhitelistsAPIService
	limit         *int32
	page          *int32
	searchId      *int32
	searchOrder   *string
	searchPattern *string
	searchNote    *string
}

// The maximum number of results to return. Between 0 and 320.
func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) Limit(limit int32) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	r.limit = &limit
	return r
}

// The page number of results to get. Between 1 and 750.
func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) Page(page int32) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	r.page = &page
	return r
}

// Search for a specific id.
func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) SearchId(searchId int32) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	r.searchId = &searchId
	return r
}

func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) SearchOrder(searchOrder string) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	r.searchOrder = &searchOrder
	return r
}

func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) SearchPattern(searchPattern string) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	r.searchPattern = &searchPattern
	return r
}

func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) SearchNote(searchNote string) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	r.searchNote = &searchNote
	return r
}

func (r UploadWhitelistsAPISearchUploadWhitelistsRequest) Execute() (*SearchUploadWhitelists200Response, *http.Response, error) {
	return r.ApiService.SearchUploadWhitelistsExecute(r)
}

/*
SearchUploadWhitelists Search Upload Whitelists

When no results are found, an object with an `upload_whitelists` key is returned.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return UploadWhitelistsAPISearchUploadWhitelistsRequest
*/
func (a *UploadWhitelistsAPIService) SearchUploadWhitelists(ctx context.Context) UploadWhitelistsAPISearchUploadWhitelistsRequest {
	return UploadWhitelistsAPISearchUploadWhitelistsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SearchUploadWhitelists200Response
func (a *UploadWhitelistsAPIService) SearchUploadWhitelistsExecute(r UploadWhitelistsAPISearchUploadWhitelistsRequest) (*SearchUploadWhitelists200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SearchUploadWhitelists200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadWhitelistsAPIService.SearchUploadWhitelists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/upload_whitelists.json"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.searchId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[id]", r.searchId, "")
	}
	if r.searchOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[order]", r.searchOrder, "")
	}
	if r.searchPattern != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[pattern]", r.searchPattern, "")
	}
	if r.searchNote != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search[note]", r.searchNote, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
