/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"fmt"
)

// TicketTypes the model 'TicketTypes'
type TicketTypes string

// List of TicketTypes
const (
	BLIP TicketTypes = "blip"
	COMMENT TicketTypes = "comment"
	DMAIL TicketTypes = "dmail"
	FORUM TicketTypes = "forum"
	POOL TicketTypes = "pool"
	POST TicketTypes = "post"
	SET TicketTypes = "set"
	USER TicketTypes = "user"
	WIKI TicketTypes = "wiki"
)

// All allowed values of TicketTypes enum
var AllowedTicketTypesEnumValues = []TicketTypes{
	"blip",
	"comment",
	"dmail",
	"forum",
	"pool",
	"post",
	"set",
	"user",
	"wiki",
}

func (v *TicketTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TicketTypes(value)
	for _, existing := range AllowedTicketTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TicketTypes", value)
}

// NewTicketTypesFromValue returns a pointer to a valid TicketTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTicketTypesFromValue(v string) (*TicketTypes, error) {
	ev := TicketTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TicketTypes: valid values are %v", v, AllowedTicketTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TicketTypes) IsValid() bool {
	for _, existing := range AllowedTicketTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TicketTypes value
func (v TicketTypes) Ptr() *TicketTypes {
	return &v
}

type NullableTicketTypes struct {
	value *TicketTypes
	isSet bool
}

func (v NullableTicketTypes) Get() *TicketTypes {
	return v.value
}

func (v *NullableTicketTypes) Set(val *TicketTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketTypes(val *TicketTypes) *NullableTicketTypes {
	return &NullableTicketTypes{value: val, isSet: true}
}

func (v NullableTicketTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

