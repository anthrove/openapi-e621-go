/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws). 

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi-e621-go

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Ban type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ban{}

// Ban struct for Ban
type Ban struct {
	Id float32 `json:"id"`
	UserId float32 `json:"user_id"`
	Reason string `json:"reason"`
	ExpiresAt NullableTime `json:"expires_at"`
	BannerId float32 `json:"banner_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type _Ban Ban

// NewBan instantiates a new Ban object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBan(id float32, userId float32, reason string, expiresAt NullableTime, bannerId float32, createdAt time.Time, updatedAt time.Time) *Ban {
	this := Ban{}
	this.Id = id
	this.UserId = userId
	this.Reason = reason
	this.ExpiresAt = expiresAt
	this.BannerId = bannerId
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewBanWithDefaults instantiates a new Ban object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBanWithDefaults() *Ban {
	this := Ban{}
	return &this
}

// GetId returns the Id field value
func (o *Ban) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Ban) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Ban) SetId(v float32) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *Ban) GetUserId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Ban) GetUserIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Ban) SetUserId(v float32) {
	o.UserId = v
}

// GetReason returns the Reason field value
func (o *Ban) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Ban) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Ban) SetReason(v string) {
	o.Reason = v
}

// GetExpiresAt returns the ExpiresAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Ban) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ban) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// SetExpiresAt sets field value
func (o *Ban) SetExpiresAt(v time.Time) {
	o.ExpiresAt.Set(&v)
}

// GetBannerId returns the BannerId field value
func (o *Ban) GetBannerId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BannerId
}

// GetBannerIdOk returns a tuple with the BannerId field value
// and a boolean to check if the value has been set.
func (o *Ban) GetBannerIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BannerId, true
}

// SetBannerId sets field value
func (o *Ban) SetBannerId(v float32) {
	o.BannerId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Ban) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Ban) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Ban) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Ban) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Ban) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Ban) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o Ban) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ban) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user_id"] = o.UserId
	toSerialize["reason"] = o.Reason
	toSerialize["expires_at"] = o.ExpiresAt.Get()
	toSerialize["banner_id"] = o.BannerId
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *Ban) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user_id",
		"reason",
		"expires_at",
		"banner_id",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBan := _Ban{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBan)

	if err != nil {
		return err
	}

	*o = Ban(varBan)

	return err
}

type NullableBan struct {
	value *Ban
	isSet bool
}

func (v NullableBan) Get() *Ban {
	return v.value
}

func (v *NullableBan) Set(val *Ban) {
	v.value = val
	v.isSet = true
}

func (v NullableBan) IsSet() bool {
	return v.isSet
}

func (v *NullableBan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBan(val *Ban) *NullableBan {
	return &NullableBan{value: val, isSet: true}
}

func (v NullableBan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


