/*
E621

OpenAPI definition for E621's API. You can find the source [here](https://github.com/DonovanDMC/E621OpenAPI)<br> This document is intended to compliment E621's existing [API Documentation](https://e621.net/help/api).<br> Note if E621's api is under attack and/or cloudflare protections are enabled, the \"Try it out\" buttons here will not work.<br> If they are not working, you can check this [Unofficial Status Page](https://status.e621.ws).

API version: d69c34e
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UploadPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadPost200Response{}

// UploadPost200Response struct for UploadPost200Response
type UploadPost200Response struct {
	Success  bool    `json:"success"`
	Location string  `json:"location"`
	PostId   float32 `json:"post_id"`
}

type _UploadPost200Response UploadPost200Response

// NewUploadPost200Response instantiates a new UploadPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadPost200Response(success bool, location string, postId float32) *UploadPost200Response {
	this := UploadPost200Response{}
	this.Success = success
	this.Location = location
	this.PostId = postId
	return &this
}

// NewUploadPost200ResponseWithDefaults instantiates a new UploadPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadPost200ResponseWithDefaults() *UploadPost200Response {
	this := UploadPost200Response{}
	return &this
}

// GetSuccess returns the Success field value
func (o *UploadPost200Response) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *UploadPost200Response) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *UploadPost200Response) SetSuccess(v bool) {
	o.Success = v
}

// GetLocation returns the Location field value
func (o *UploadPost200Response) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *UploadPost200Response) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *UploadPost200Response) SetLocation(v string) {
	o.Location = v
}

// GetPostId returns the PostId field value
func (o *UploadPost200Response) GetPostId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PostId
}

// GetPostIdOk returns a tuple with the PostId field value
// and a boolean to check if the value has been set.
func (o *UploadPost200Response) GetPostIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostId, true
}

// SetPostId sets field value
func (o *UploadPost200Response) SetPostId(v float32) {
	o.PostId = v
}

func (o UploadPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["location"] = o.Location
	toSerialize["post_id"] = o.PostId
	return toSerialize, nil
}

func (o *UploadPost200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"location",
		"post_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadPost200Response := _UploadPost200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadPost200Response)

	if err != nil {
		return err
	}

	*o = UploadPost200Response(varUploadPost200Response)

	return err
}

type NullableUploadPost200Response struct {
	value *UploadPost200Response
	isSet bool
}

func (v NullableUploadPost200Response) Get() *UploadPost200Response {
	return v.value
}

func (v *NullableUploadPost200Response) Set(val *UploadPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadPost200Response(val *UploadPost200Response) *NullableUploadPost200Response {
	return &NullableUploadPost200Response{value: val, isSet: true}
}

func (v NullableUploadPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
